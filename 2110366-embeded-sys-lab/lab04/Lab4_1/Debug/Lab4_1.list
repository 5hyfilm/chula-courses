
Lab4_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003668  08003668  00013668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003680  08003680  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003680  08003680  00013680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003688  08003688  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003688  08003688  00013688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800368c  0800368c  0001368c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000010  080036a0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080036a0  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d23e  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bd6  00000000  00000000  0002d2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  0002ee98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ca  00000000  00000000  0002fb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016829  00000000  00000000  000304d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dc27  00000000  00000000  00046cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094fc6  00000000  00000000  00054922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034d4  00000000  00000000  000e98e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000ecdbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003650 	.word	0x08003650

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08003650 	.word	0x08003650

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_TIM_PeriodElapsedCallback>:
//		isIncrease = true;
//		TIM2->CCR1 += (TIM2->ARR+1)/100;
//	}
//	HAL_Delay(10);
//}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
//	n++;
//	if(n == 100){
//		n = 0;
		if(isIncrease){
 80004d8:	4b2d      	ldr	r3, [pc, #180]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d00f      	beq.n	8000500 <HAL_TIM_PeriodElapsedCallback+0x30>
			TIM2->CCR1 += (TIM2->ARR+1)/100;
 80004e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e6:	3301      	adds	r3, #1
 80004e8:	4a2a      	ldr	r2, [pc, #168]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80004ea:	fba2 2303 	umull	r2, r3, r2, r3
 80004ee:	095a      	lsrs	r2, r3, #5
 80004f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80004fa:	4413      	add	r3, r2
 80004fc:	634b      	str	r3, [r1, #52]	; 0x34
 80004fe:	e00e      	b.n	800051e <HAL_TIM_PeriodElapsedCallback+0x4e>
		}
		else{
			TIM2->CCR1 -= (TIM2->ARR+1)/100;
 8000500:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000506:	3301      	adds	r3, #1
 8000508:	4a22      	ldr	r2, [pc, #136]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800050a:	fba2 2303 	umull	r2, r3, r2, r3
 800050e:	095b      	lsrs	r3, r3, #5
 8000510:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000514:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000516:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800051a:	1ad3      	subs	r3, r2, r3
 800051c:	634b      	str	r3, [r1, #52]	; 0x34
		}
		if(TIM2->CCR1 >= (TIM2->ARR+1)){
 800051e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000524:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800052a:	3301      	adds	r3, #1
 800052c:	429a      	cmp	r2, r3
 800052e:	d312      	bcc.n	8000556 <HAL_TIM_PeriodElapsedCallback+0x86>
			isIncrease = false;
 8000530:	4b17      	ldr	r3, [pc, #92]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]
			TIM2->CCR1 -= (TIM2->ARR+1)/100;;
 8000536:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800053a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800053c:	3301      	adds	r3, #1
 800053e:	4a15      	ldr	r2, [pc, #84]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000540:	fba2 2303 	umull	r2, r3, r2, r3
 8000544:	095b      	lsrs	r3, r3, #5
 8000546:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800054a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800054c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	634b      	str	r3, [r1, #52]	; 0x34
		else if(TIM2->CCR1 <= 0){
			isIncrease = true;
			TIM2->CCR1 += (TIM2->ARR+1)/100;
		}
//	}
}
 8000554:	e016      	b.n	8000584 <HAL_TIM_PeriodElapsedCallback+0xb4>
		else if(TIM2->CCR1 <= 0){
 8000556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800055a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800055c:	2b00      	cmp	r3, #0
 800055e:	d111      	bne.n	8000584 <HAL_TIM_PeriodElapsedCallback+0xb4>
			isIncrease = true;
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000562:	2201      	movs	r2, #1
 8000564:	701a      	strb	r2, [r3, #0]
			TIM2->CCR1 += (TIM2->ARR+1)/100;
 8000566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800056a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800056c:	3301      	adds	r3, #1
 800056e:	4a09      	ldr	r2, [pc, #36]	; (8000594 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000570:	fba2 2303 	umull	r2, r3, r2, r3
 8000574:	095a      	lsrs	r2, r3, #5
 8000576:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800057a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800057c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000580:	4413      	add	r3, r2
 8000582:	634b      	str	r3, [r1, #52]	; 0x34
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	20000000 	.word	0x20000000
 8000594:	51eb851f 	.word	0x51eb851f

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fb56 	bl	8000c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f816 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f970 	bl	8000888 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a8:	f000 f944 	bl	8000834 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005ac:	f000 f87a 	bl	80006a4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80005b0:	f000 f8ca 	bl	8000748 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  TIM2->CCR1 = 0; //change pulse
 80005b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005b8:	2200      	movs	r2, #0
 80005ba:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_Base_Start_IT(&htim2);//start timer
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <main+0x34>)
 80005be:	f001 fd97 	bl	80020f0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);//start pwm
 80005c2:	2100      	movs	r1, #0
 80005c4:	4801      	ldr	r0, [pc, #4]	; (80005cc <main+0x34>)
 80005c6:	f001 fe4f 	bl	8002268 <HAL_TIM_PWM_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ca:	e7fe      	b.n	80005ca <main+0x32>
 80005cc:	20000074 	.word	0x20000074

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	; 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 f80a 	bl	80035f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	4b28      	ldr	r3, [pc, #160]	; (800069c <SystemClock_Config+0xcc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a27      	ldr	r2, [pc, #156]	; (800069c <SystemClock_Config+0xcc>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b25      	ldr	r3, [pc, #148]	; (800069c <SystemClock_Config+0xcc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800061c:	4a20      	ldr	r2, [pc, #128]	; (80006a0 <SystemClock_Config+0xd0>)
 800061e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000634:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000648:	2354      	movs	r3, #84	; 0x54
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000650:	2307      	movs	r3, #7
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f001 f861 	bl	8001720 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000664:	f000 f96a 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2102      	movs	r1, #2
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fac3 	bl	8001c10 <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000690:	f000 f954 	bl	800093c <Error_Handler>
  }
}
 8000694:	bf00      	nop
 8000696:	3750      	adds	r7, #80	; 0x50
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006aa:	463b      	mov	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_ADC1_Init+0x98>)
 80006b8:	4a21      	ldr	r2, [pc, #132]	; (8000740 <MX_ADC1_Init+0x9c>)
 80006ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_ADC1_Init+0x98>)
 80006be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_ADC1_Init+0x98>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_ADC1_Init+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_ADC1_Init+0x98>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_ADC1_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_ADC1_Init+0x98>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_ADC1_Init+0x98>)
 80006e6:	4a17      	ldr	r2, [pc, #92]	; (8000744 <MX_ADC1_Init+0xa0>)
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_ADC1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_ADC1_Init+0x98>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_ADC1_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_ADC1_Init+0x98>)
 8000700:	2201      	movs	r2, #1
 8000702:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <MX_ADC1_Init+0x98>)
 8000706:	f000 fb13 	bl	8000d30 <HAL_ADC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000710:	f000 f914 	bl	800093c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000714:	2300      	movs	r3, #0
 8000716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000718:	2301      	movs	r3, #1
 800071a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_ADC1_Init+0x98>)
 8000726:	f000 fb47 	bl	8000db8 <HAL_ADC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000730:	f000 f904 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000002c 	.word	0x2000002c
 8000740:	40012000 	.word	0x40012000
 8000744:	0f000001 	.word	0x0f000001

08000748 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08e      	sub	sp, #56	; 0x38
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
 8000774:	615a      	str	r2, [r3, #20]
 8000776:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000778:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <MX_TIM2_Init+0xe8>)
 800077a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800077e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000780:	4b2b      	ldr	r3, [pc, #172]	; (8000830 <MX_TIM2_Init+0xe8>)
 8000782:	2253      	movs	r2, #83	; 0x53
 8000784:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000786:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <MX_TIM2_Init+0xe8>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800078c:	4b28      	ldr	r3, [pc, #160]	; (8000830 <MX_TIM2_Init+0xe8>)
 800078e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000792:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000794:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_TIM2_Init+0xe8>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800079a:	4b25      	ldr	r3, [pc, #148]	; (8000830 <MX_TIM2_Init+0xe8>)
 800079c:	2280      	movs	r2, #128	; 0x80
 800079e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007a0:	4823      	ldr	r0, [pc, #140]	; (8000830 <MX_TIM2_Init+0xe8>)
 80007a2:	f001 fc55 	bl	8002050 <HAL_TIM_Base_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007ac:	f000 f8c6 	bl	800093c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ba:	4619      	mov	r1, r3
 80007bc:	481c      	ldr	r0, [pc, #112]	; (8000830 <MX_TIM2_Init+0xe8>)
 80007be:	f002 f81b 	bl	80027f8 <HAL_TIM_ConfigClockSource>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007c8:	f000 f8b8 	bl	800093c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007cc:	4818      	ldr	r0, [pc, #96]	; (8000830 <MX_TIM2_Init+0xe8>)
 80007ce:	f001 fcf1 	bl	80021b4 <HAL_TIM_PWM_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007d8:	f000 f8b0 	bl	800093c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007e4:	f107 0320 	add.w	r3, r7, #32
 80007e8:	4619      	mov	r1, r3
 80007ea:	4811      	ldr	r0, [pc, #68]	; (8000830 <MX_TIM2_Init+0xe8>)
 80007ec:	f002 fbc0 	bl	8002f70 <HAL_TIMEx_MasterConfigSynchronization>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007f6:	f000 f8a1 	bl	800093c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007fa:	2360      	movs	r3, #96	; 0x60
 80007fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2200      	movs	r2, #0
 800080e:	4619      	mov	r1, r3
 8000810:	4807      	ldr	r0, [pc, #28]	; (8000830 <MX_TIM2_Init+0xe8>)
 8000812:	f001 ff2f 	bl	8002674 <HAL_TIM_PWM_ConfigChannel>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800081c:	f000 f88e 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <MX_TIM2_Init+0xe8>)
 8000822:	f000 f923 	bl	8000a6c <HAL_TIM_MspPostInit>

}
 8000826:	bf00      	nop
 8000828:	3738      	adds	r7, #56	; 0x38
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000074 	.word	0x20000074

08000834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800083a:	4a12      	ldr	r2, [pc, #72]	; (8000884 <MX_USART2_UART_Init+0x50>)
 800083c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800086c:	f002 fc02 	bl	8003074 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000876:	f000 f861 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200000bc 	.word	0x200000bc
 8000884:	40004400 	.word	0x40004400

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b24      	ldr	r3, [pc, #144]	; (8000934 <MX_GPIO_Init+0xac>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a23      	ldr	r2, [pc, #140]	; (8000934 <MX_GPIO_Init+0xac>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <MX_GPIO_Init+0xac>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_GPIO_Init+0xac>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a1c      	ldr	r2, [pc, #112]	; (8000934 <MX_GPIO_Init+0xac>)
 80008c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_GPIO_Init+0xac>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_GPIO_Init+0xac>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a15      	ldr	r2, [pc, #84]	; (8000934 <MX_GPIO_Init+0xac>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <MX_GPIO_Init+0xac>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_GPIO_Init+0xac>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <MX_GPIO_Init+0xac>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_GPIO_Init+0xac>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800090e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000914:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_GPIO_Init+0xb0>)
 8000926:	f000 fd77 	bl	8001418 <HAL_GPIO_Init>

}
 800092a:	bf00      	nop
 800092c:	3728      	adds	r7, #40	; 0x28
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800
 8000938:	40020800 	.word	0x40020800

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <HAL_MspInit+0x4c>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800095c:	6453      	str	r3, [r2, #68]	; 0x44
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a08      	ldr	r2, [pc, #32]	; (8000994 <HAL_MspInit+0x4c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000986:	2005      	movs	r0, #5
 8000988:	f000 fd04 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <HAL_ADC_MspInit+0x7c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d127      	bne.n	8000a0a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <HAL_ADC_MspInit+0x80>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <HAL_ADC_MspInit+0x80>)
 80009c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <HAL_ADC_MspInit+0x80>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <HAL_ADC_MspInit+0x80>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <HAL_ADC_MspInit+0x80>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <HAL_ADC_MspInit+0x80>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009f2:	2301      	movs	r3, #1
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f6:	2303      	movs	r3, #3
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <HAL_ADC_MspInit+0x84>)
 8000a06:	f000 fd07 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a0a:	bf00      	nop
 8000a0c:	3728      	adds	r7, #40	; 0x28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40012000 	.word	0x40012000
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020000 	.word	0x40020000

08000a20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a30:	d115      	bne.n	8000a5e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_TIM_Base_MspInit+0x48>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <HAL_TIM_Base_MspInit+0x48>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6413      	str	r3, [r2, #64]	; 0x40
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_TIM_Base_MspInit+0x48>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2102      	movs	r1, #2
 8000a52:	201c      	movs	r0, #28
 8000a54:	f000 fca9 	bl	80013aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a58:	201c      	movs	r0, #28
 8000a5a:	f000 fcc2 	bl	80013e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3710      	adds	r7, #16
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a8c:	d11d      	bne.n	8000aca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <HAL_TIM_MspPostInit+0x68>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <HAL_TIM_MspPostInit+0x68>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <HAL_TIM_MspPostInit+0x68>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000aaa:	2320      	movs	r3, #32
 8000aac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aba:	2301      	movs	r3, #1
 8000abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <HAL_TIM_MspPostInit+0x6c>)
 8000ac6:	f000 fca7 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000aca:	bf00      	nop
 8000acc:	3720      	adds	r7, #32
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020000 	.word	0x40020000

08000adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a19      	ldr	r2, [pc, #100]	; (8000b60 <HAL_UART_MspInit+0x84>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d12b      	bne.n	8000b56 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <HAL_UART_MspInit+0x88>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <HAL_UART_MspInit+0x88>)
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_UART_MspInit+0x88>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <HAL_UART_MspInit+0x88>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a10      	ldr	r2, [pc, #64]	; (8000b64 <HAL_UART_MspInit+0x88>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_UART_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b36:	230c      	movs	r3, #12
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b46:	2307      	movs	r3, #7
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <HAL_UART_MspInit+0x8c>)
 8000b52:	f000 fc61 	bl	8001418 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	; 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40004400 	.word	0x40004400
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb8:	f000 f89a 	bl	8000cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <TIM2_IRQHandler+0x10>)
 8000bc6:	f001 fc4d 	bl	8002464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000074 	.word	0x20000074

08000bd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <SystemInit+0x20>)
 8000bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <SystemInit+0x20>)
 8000be0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bfe:	490e      	ldr	r1, [pc, #56]	; (8000c38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c14:	4c0b      	ldr	r4, [pc, #44]	; (8000c44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c22:	f7ff ffd7 	bl	8000bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c26:	f002 fcef 	bl	8003608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2a:	f7ff fcb5 	bl	8000598 <main>
  bx  lr    
 8000c2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c3c:	08003690 	.word	0x08003690
  ldr r2, =_sbss
 8000c40:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c44:	20000104 	.word	0x20000104

08000c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC_IRQHandler>
	...

08000c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <HAL_Init+0x40>)
 8000c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <HAL_Init+0x40>)
 8000c62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <HAL_Init+0x40>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a07      	ldr	r2, [pc, #28]	; (8000c8c <HAL_Init+0x40>)
 8000c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f000 fb8d 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f000 f808 	bl	8000c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c80:	f7ff fe62 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023c00 	.word	0x40023c00

08000c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_InitTick+0x54>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <HAL_InitTick+0x58>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fba5 	bl	80013fe <HAL_SYSTICK_Config>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00e      	b.n	8000cdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d80a      	bhi.n	8000cda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 fb6d 	bl	80013aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd0:	4a06      	ldr	r2, [pc, #24]	; (8000cec <HAL_InitTick+0x5c>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e000      	b.n	8000cdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000004 	.word	0x20000004
 8000ce8:	2000000c 	.word	0x2000000c
 8000cec:	20000008 	.word	0x20000008

08000cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_IncTick+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <HAL_IncTick+0x24>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	2000000c 	.word	0x2000000c
 8000d14:	20000100 	.word	0x20000100

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000100 	.word	0x20000100

08000d30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e033      	b.n	8000dae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d109      	bne.n	8000d62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fe22 	bl	8000998 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f003 0310 	and.w	r3, r3, #16
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d118      	bne.n	8000da0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d76:	f023 0302 	bic.w	r3, r3, #2
 8000d7a:	f043 0202 	orr.w	r2, r3, #2
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f000 f93a 	bl	8000ffc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f023 0303 	bic.w	r3, r3, #3
 8000d96:	f043 0201 	orr.w	r2, r3, #1
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	641a      	str	r2, [r3, #64]	; 0x40
 8000d9e:	e001      	b.n	8000da4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d101      	bne.n	8000dd4 <HAL_ADC_ConfigChannel+0x1c>
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	e105      	b.n	8000fe0 <HAL_ADC_ConfigChannel+0x228>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b09      	cmp	r3, #9
 8000de2:	d925      	bls.n	8000e30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68d9      	ldr	r1, [r3, #12]
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	461a      	mov	r2, r3
 8000df2:	4613      	mov	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	3b1e      	subs	r3, #30
 8000dfa:	2207      	movs	r2, #7
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43da      	mvns	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	400a      	ands	r2, r1
 8000e08:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68d9      	ldr	r1, [r3, #12]
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	4403      	add	r3, r0
 8000e22:	3b1e      	subs	r3, #30
 8000e24:	409a      	lsls	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	e022      	b.n	8000e76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6919      	ldr	r1, [r3, #16]
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4613      	mov	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4413      	add	r3, r2
 8000e44:	2207      	movs	r2, #7
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	400a      	ands	r2, r1
 8000e52:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	6919      	ldr	r1, [r3, #16]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	4618      	mov	r0, r3
 8000e66:	4603      	mov	r3, r0
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4403      	add	r3, r0
 8000e6c:	409a      	lsls	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	430a      	orrs	r2, r1
 8000e74:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d824      	bhi.n	8000ec8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	3b05      	subs	r3, #5
 8000e90:	221f      	movs	r2, #31
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	400a      	ands	r2, r1
 8000e9e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	4618      	mov	r0, r3
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	4413      	add	r3, r2
 8000eb8:	3b05      	subs	r3, #5
 8000eba:	fa00 f203 	lsl.w	r2, r0, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ec6:	e04c      	b.n	8000f62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b0c      	cmp	r3, #12
 8000ece:	d824      	bhi.n	8000f1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	3b23      	subs	r3, #35	; 0x23
 8000ee2:	221f      	movs	r2, #31
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43da      	mvns	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	400a      	ands	r2, r1
 8000ef0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685a      	ldr	r2, [r3, #4]
 8000f04:	4613      	mov	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	3b23      	subs	r3, #35	; 0x23
 8000f0c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	631a      	str	r2, [r3, #48]	; 0x30
 8000f18:	e023      	b.n	8000f62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	4613      	mov	r3, r2
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	3b41      	subs	r3, #65	; 0x41
 8000f2c:	221f      	movs	r2, #31
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43da      	mvns	r2, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	400a      	ands	r2, r1
 8000f3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	4618      	mov	r0, r3
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	4413      	add	r3, r2
 8000f54:	3b41      	subs	r3, #65	; 0x41
 8000f56:	fa00 f203 	lsl.w	r2, r0, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <HAL_ADC_ConfigChannel+0x234>)
 8000f64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a21      	ldr	r2, [pc, #132]	; (8000ff0 <HAL_ADC_ConfigChannel+0x238>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d109      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x1cc>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b12      	cmp	r3, #18
 8000f76:	d105      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a19      	ldr	r2, [pc, #100]	; (8000ff0 <HAL_ADC_ConfigChannel+0x238>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d123      	bne.n	8000fd6 <HAL_ADC_ConfigChannel+0x21e>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b10      	cmp	r3, #16
 8000f94:	d003      	beq.n	8000f9e <HAL_ADC_ConfigChannel+0x1e6>
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2b11      	cmp	r3, #17
 8000f9c:	d11b      	bne.n	8000fd6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b10      	cmp	r3, #16
 8000fb0:	d111      	bne.n	8000fd6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_ADC_ConfigChannel+0x23c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a10      	ldr	r2, [pc, #64]	; (8000ff8 <HAL_ADC_ConfigChannel+0x240>)
 8000fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbc:	0c9a      	lsrs	r2, r3, #18
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000fc8:	e002      	b.n	8000fd0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f9      	bne.n	8000fca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	40012300 	.word	0x40012300
 8000ff0:	40012000 	.word	0x40012000
 8000ff4:	20000004 	.word	0x20000004
 8000ff8:	431bde83 	.word	0x431bde83

08000ffc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001004:	4b79      	ldr	r3, [pc, #484]	; (80011ec <ADC_Init+0x1f0>)
 8001006:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	431a      	orrs	r2, r3
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001030:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6859      	ldr	r1, [r3, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	021a      	lsls	r2, r3, #8
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	430a      	orrs	r2, r1
 8001044:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001054:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6859      	ldr	r1, [r3, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	430a      	orrs	r2, r1
 8001066:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001076:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6899      	ldr	r1, [r3, #8]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	430a      	orrs	r2, r1
 8001088:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108e:	4a58      	ldr	r2, [pc, #352]	; (80011f0 <ADC_Init+0x1f4>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d022      	beq.n	80010da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6899      	ldr	r1, [r3, #8]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	430a      	orrs	r2, r1
 80010b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80010c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6899      	ldr	r1, [r3, #8]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	e00f      	b.n	80010fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80010f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 0202 	bic.w	r2, r2, #2
 8001108:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6899      	ldr	r1, [r3, #8]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7e1b      	ldrb	r3, [r3, #24]
 8001114:	005a      	lsls	r2, r3, #1
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	430a      	orrs	r2, r1
 800111c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d01b      	beq.n	8001160 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001136:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001146:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6859      	ldr	r1, [r3, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	3b01      	subs	r3, #1
 8001154:	035a      	lsls	r2, r3, #13
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	430a      	orrs	r2, r1
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	e007      	b.n	8001170 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800116e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800117e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	3b01      	subs	r3, #1
 800118c:	051a      	lsls	r2, r3, #20
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	430a      	orrs	r2, r1
 8001194:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80011a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6899      	ldr	r1, [r3, #8]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011b2:	025a      	lsls	r2, r3, #9
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	430a      	orrs	r2, r1
 80011ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6899      	ldr	r1, [r3, #8]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	029a      	lsls	r2, r3, #10
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	430a      	orrs	r2, r1
 80011de:	609a      	str	r2, [r3, #8]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	40012300 	.word	0x40012300
 80011f0:	0f000001 	.word	0x0f000001

080011f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001210:	4013      	ands	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800121c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001226:	4a04      	ldr	r2, [pc, #16]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	60d3      	str	r3, [r2, #12]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <__NVIC_GetPriorityGrouping+0x18>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	f003 0307 	and.w	r3, r3, #7
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	2b00      	cmp	r3, #0
 8001268:	db0b      	blt.n	8001282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	f003 021f 	and.w	r2, r3, #31
 8001270:	4907      	ldr	r1, [pc, #28]	; (8001290 <__NVIC_EnableIRQ+0x38>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	095b      	lsrs	r3, r3, #5
 8001278:	2001      	movs	r0, #1
 800127a:	fa00 f202 	lsl.w	r2, r0, r2
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000e100 	.word	0xe000e100

08001294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	db0a      	blt.n	80012be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	490c      	ldr	r1, [pc, #48]	; (80012e0 <__NVIC_SetPriority+0x4c>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	0112      	lsls	r2, r2, #4
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012bc:	e00a      	b.n	80012d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4908      	ldr	r1, [pc, #32]	; (80012e4 <__NVIC_SetPriority+0x50>)
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	3b04      	subs	r3, #4
 80012cc:	0112      	lsls	r2, r2, #4
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	440b      	add	r3, r1
 80012d2:	761a      	strb	r2, [r3, #24]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000e100 	.word	0xe000e100
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f1c3 0307 	rsb	r3, r3, #7
 8001302:	2b04      	cmp	r3, #4
 8001304:	bf28      	it	cs
 8001306:	2304      	movcs	r3, #4
 8001308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3304      	adds	r3, #4
 800130e:	2b06      	cmp	r3, #6
 8001310:	d902      	bls.n	8001318 <NVIC_EncodePriority+0x30>
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3b03      	subs	r3, #3
 8001316:	e000      	b.n	800131a <NVIC_EncodePriority+0x32>
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	401a      	ands	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001330:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	43d9      	mvns	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	4313      	orrs	r3, r2
         );
}
 8001342:	4618      	mov	r0, r3
 8001344:	3724      	adds	r7, #36	; 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001360:	d301      	bcc.n	8001366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001362:	2301      	movs	r3, #1
 8001364:	e00f      	b.n	8001386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <SysTick_Config+0x40>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136e:	210f      	movs	r1, #15
 8001370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001374:	f7ff ff8e 	bl	8001294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <SysTick_Config+0x40>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <SysTick_Config+0x40>)
 8001380:	2207      	movs	r2, #7
 8001382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	e000e010 	.word	0xe000e010

08001394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ff29 	bl	80011f4 <__NVIC_SetPriorityGrouping>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013bc:	f7ff ff3e 	bl	800123c <__NVIC_GetPriorityGrouping>
 80013c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	6978      	ldr	r0, [r7, #20]
 80013c8:	f7ff ff8e 	bl	80012e8 <NVIC_EncodePriority>
 80013cc:	4602      	mov	r2, r0
 80013ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff5d 	bl	8001294 <__NVIC_SetPriority>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff31 	bl	8001258 <__NVIC_EnableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffa2 	bl	8001350 <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e159      	b.n	80016e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001434:	2201      	movs	r2, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	429a      	cmp	r2, r3
 800144e:	f040 8148 	bne.w	80016e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	2b01      	cmp	r3, #1
 800145c:	d005      	beq.n	800146a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001466:	2b02      	cmp	r3, #2
 8001468:	d130      	bne.n	80014cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a0:	2201      	movs	r2, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	f003 0201 	and.w	r2, r3, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	d017      	beq.n	8001508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d123      	bne.n	800155c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	69b9      	ldr	r1, [r7, #24]
 8001558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80a2 	beq.w	80016e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b57      	ldr	r3, [pc, #348]	; (8001700 <HAL_GPIO_Init+0x2e8>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	4a56      	ldr	r2, [pc, #344]	; (8001700 <HAL_GPIO_Init+0x2e8>)
 80015a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ac:	6453      	str	r3, [r2, #68]	; 0x44
 80015ae:	4b54      	ldr	r3, [pc, #336]	; (8001700 <HAL_GPIO_Init+0x2e8>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015ba:	4a52      	ldr	r2, [pc, #328]	; (8001704 <HAL_GPIO_Init+0x2ec>)
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a49      	ldr	r2, [pc, #292]	; (8001708 <HAL_GPIO_Init+0x2f0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d019      	beq.n	800161a <HAL_GPIO_Init+0x202>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a48      	ldr	r2, [pc, #288]	; (800170c <HAL_GPIO_Init+0x2f4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d013      	beq.n	8001616 <HAL_GPIO_Init+0x1fe>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a47      	ldr	r2, [pc, #284]	; (8001710 <HAL_GPIO_Init+0x2f8>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d00d      	beq.n	8001612 <HAL_GPIO_Init+0x1fa>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a46      	ldr	r2, [pc, #280]	; (8001714 <HAL_GPIO_Init+0x2fc>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d007      	beq.n	800160e <HAL_GPIO_Init+0x1f6>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a45      	ldr	r2, [pc, #276]	; (8001718 <HAL_GPIO_Init+0x300>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d101      	bne.n	800160a <HAL_GPIO_Init+0x1f2>
 8001606:	2304      	movs	r3, #4
 8001608:	e008      	b.n	800161c <HAL_GPIO_Init+0x204>
 800160a:	2307      	movs	r3, #7
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x204>
 800160e:	2303      	movs	r3, #3
 8001610:	e004      	b.n	800161c <HAL_GPIO_Init+0x204>
 8001612:	2302      	movs	r3, #2
 8001614:	e002      	b.n	800161c <HAL_GPIO_Init+0x204>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_GPIO_Init+0x204>
 800161a:	2300      	movs	r3, #0
 800161c:	69fa      	ldr	r2, [r7, #28]
 800161e:	f002 0203 	and.w	r2, r2, #3
 8001622:	0092      	lsls	r2, r2, #2
 8001624:	4093      	lsls	r3, r2
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800162c:	4935      	ldr	r1, [pc, #212]	; (8001704 <HAL_GPIO_Init+0x2ec>)
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	3302      	adds	r3, #2
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163a:	4b38      	ldr	r3, [pc, #224]	; (800171c <HAL_GPIO_Init+0x304>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	43db      	mvns	r3, r3
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	4013      	ands	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800165e:	4a2f      	ldr	r2, [pc, #188]	; (800171c <HAL_GPIO_Init+0x304>)
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <HAL_GPIO_Init+0x304>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001688:	4a24      	ldr	r2, [pc, #144]	; (800171c <HAL_GPIO_Init+0x304>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <HAL_GPIO_Init+0x304>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b2:	4a1a      	ldr	r2, [pc, #104]	; (800171c <HAL_GPIO_Init+0x304>)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_GPIO_Init+0x304>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016dc:	4a0f      	ldr	r2, [pc, #60]	; (800171c <HAL_GPIO_Init+0x304>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3301      	adds	r3, #1
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	2b0f      	cmp	r3, #15
 80016ec:	f67f aea2 	bls.w	8001434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40013800 	.word	0x40013800
 8001708:	40020000 	.word	0x40020000
 800170c:	40020400 	.word	0x40020400
 8001710:	40020800 	.word	0x40020800
 8001714:	40020c00 	.word	0x40020c00
 8001718:	40021000 	.word	0x40021000
 800171c:	40013c00 	.word	0x40013c00

08001720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e267      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d075      	beq.n	800182a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800173e:	4b88      	ldr	r3, [pc, #544]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b04      	cmp	r3, #4
 8001748:	d00c      	beq.n	8001764 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800174a:	4b85      	ldr	r3, [pc, #532]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001752:	2b08      	cmp	r3, #8
 8001754:	d112      	bne.n	800177c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001756:	4b82      	ldr	r3, [pc, #520]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800175e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001762:	d10b      	bne.n	800177c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001764:	4b7e      	ldr	r3, [pc, #504]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d05b      	beq.n	8001828 <HAL_RCC_OscConfig+0x108>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d157      	bne.n	8001828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e242      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001784:	d106      	bne.n	8001794 <HAL_RCC_OscConfig+0x74>
 8001786:	4b76      	ldr	r3, [pc, #472]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a75      	ldr	r2, [pc, #468]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 800178c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e01d      	b.n	80017d0 <HAL_RCC_OscConfig+0xb0>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x98>
 800179e:	4b70      	ldr	r3, [pc, #448]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a6f      	ldr	r2, [pc, #444]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 80017a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	4b6d      	ldr	r3, [pc, #436]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a6c      	ldr	r2, [pc, #432]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e00b      	b.n	80017d0 <HAL_RCC_OscConfig+0xb0>
 80017b8:	4b69      	ldr	r3, [pc, #420]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a68      	ldr	r2, [pc, #416]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 80017be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b66      	ldr	r3, [pc, #408]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a65      	ldr	r2, [pc, #404]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 80017ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d013      	beq.n	8001800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff fa9e 	bl	8000d18 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e0:	f7ff fa9a 	bl	8000d18 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b64      	cmp	r3, #100	; 0x64
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e207      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	4b5b      	ldr	r3, [pc, #364]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0xc0>
 80017fe:	e014      	b.n	800182a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff fa8a 	bl	8000d18 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff fa86 	bl	8000d18 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	; 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e1f3      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181a:	4b51      	ldr	r3, [pc, #324]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0xe8>
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d063      	beq.n	80018fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001836:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001842:	4b47      	ldr	r3, [pc, #284]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800184a:	2b08      	cmp	r3, #8
 800184c:	d11c      	bne.n	8001888 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800184e:	4b44      	ldr	r3, [pc, #272]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d116      	bne.n	8001888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	4b41      	ldr	r3, [pc, #260]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_RCC_OscConfig+0x152>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e1c7      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	4b3b      	ldr	r3, [pc, #236]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4937      	ldr	r1, [pc, #220]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	e03a      	b.n	80018fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001890:	4b34      	ldr	r3, [pc, #208]	; (8001964 <HAL_RCC_OscConfig+0x244>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001896:	f7ff fa3f 	bl	8000d18 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189e:	f7ff fa3b 	bl	8000d18 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e1a8      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b0:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018bc:	4b28      	ldr	r3, [pc, #160]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4925      	ldr	r1, [pc, #148]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
 80018d0:	e015      	b.n	80018fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d2:	4b24      	ldr	r3, [pc, #144]	; (8001964 <HAL_RCC_OscConfig+0x244>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff fa1e 	bl	8000d18 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e0:	f7ff fa1a 	bl	8000d18 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e187      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d036      	beq.n	8001978 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d016      	beq.n	8001940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_RCC_OscConfig+0x248>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001918:	f7ff f9fe 	bl	8000d18 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001920:	f7ff f9fa 	bl	8000d18 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e167      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_RCC_OscConfig+0x240>)
 8001934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x200>
 800193e:	e01b      	b.n	8001978 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001940:	4b09      	ldr	r3, [pc, #36]	; (8001968 <HAL_RCC_OscConfig+0x248>)
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001946:	f7ff f9e7 	bl	8000d18 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194c:	e00e      	b.n	800196c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800194e:	f7ff f9e3 	bl	8000d18 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d907      	bls.n	800196c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e150      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
 8001960:	40023800 	.word	0x40023800
 8001964:	42470000 	.word	0x42470000
 8001968:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196c:	4b88      	ldr	r3, [pc, #544]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 800196e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1ea      	bne.n	800194e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 8097 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198a:	4b81      	ldr	r3, [pc, #516]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10f      	bne.n	80019b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	4b7d      	ldr	r3, [pc, #500]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	4a7c      	ldr	r2, [pc, #496]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	6413      	str	r3, [r2, #64]	; 0x40
 80019a6:	4b7a      	ldr	r3, [pc, #488]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b2:	2301      	movs	r3, #1
 80019b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b6:	4b77      	ldr	r3, [pc, #476]	; (8001b94 <HAL_RCC_OscConfig+0x474>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d118      	bne.n	80019f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c2:	4b74      	ldr	r3, [pc, #464]	; (8001b94 <HAL_RCC_OscConfig+0x474>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a73      	ldr	r2, [pc, #460]	; (8001b94 <HAL_RCC_OscConfig+0x474>)
 80019c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ce:	f7ff f9a3 	bl	8000d18 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d6:	f7ff f99f 	bl	8000d18 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e10c      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e8:	4b6a      	ldr	r3, [pc, #424]	; (8001b94 <HAL_RCC_OscConfig+0x474>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x2ea>
 80019fc:	4b64      	ldr	r3, [pc, #400]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 80019fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a00:	4a63      	ldr	r2, [pc, #396]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6713      	str	r3, [r2, #112]	; 0x70
 8001a08:	e01c      	b.n	8001a44 <HAL_RCC_OscConfig+0x324>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b05      	cmp	r3, #5
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x30c>
 8001a12:	4b5f      	ldr	r3, [pc, #380]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a16:	4a5e      	ldr	r2, [pc, #376]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1e:	4b5c      	ldr	r3, [pc, #368]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a22:	4a5b      	ldr	r2, [pc, #364]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2a:	e00b      	b.n	8001a44 <HAL_RCC_OscConfig+0x324>
 8001a2c:	4b58      	ldr	r3, [pc, #352]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	4a57      	ldr	r2, [pc, #348]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a32:	f023 0301 	bic.w	r3, r3, #1
 8001a36:	6713      	str	r3, [r2, #112]	; 0x70
 8001a38:	4b55      	ldr	r3, [pc, #340]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3c:	4a54      	ldr	r2, [pc, #336]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a3e:	f023 0304 	bic.w	r3, r3, #4
 8001a42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d015      	beq.n	8001a78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4c:	f7ff f964 	bl	8000d18 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a52:	e00a      	b.n	8001a6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a54:	f7ff f960 	bl	8000d18 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e0cb      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6a:	4b49      	ldr	r3, [pc, #292]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0ee      	beq.n	8001a54 <HAL_RCC_OscConfig+0x334>
 8001a76:	e014      	b.n	8001aa2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a78:	f7ff f94e 	bl	8000d18 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a80:	f7ff f94a 	bl	8000d18 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e0b5      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a96:	4b3e      	ldr	r3, [pc, #248]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1ee      	bne.n	8001a80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aa2:	7dfb      	ldrb	r3, [r7, #23]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d105      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa8:	4b39      	ldr	r3, [pc, #228]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	4a38      	ldr	r2, [pc, #224]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80a1 	beq.w	8001c00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001abe:	4b34      	ldr	r3, [pc, #208]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b08      	cmp	r3, #8
 8001ac8:	d05c      	beq.n	8001b84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d141      	bne.n	8001b56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad2:	4b31      	ldr	r3, [pc, #196]	; (8001b98 <HAL_RCC_OscConfig+0x478>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f91e 	bl	8000d18 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff f91a 	bl	8000d18 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e087      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af2:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69da      	ldr	r2, [r3, #28]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	019b      	lsls	r3, r3, #6
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	085b      	lsrs	r3, r3, #1
 8001b16:	3b01      	subs	r3, #1
 8001b18:	041b      	lsls	r3, r3, #16
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	061b      	lsls	r3, r3, #24
 8001b22:	491b      	ldr	r1, [pc, #108]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <HAL_RCC_OscConfig+0x478>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2e:	f7ff f8f3 	bl	8000d18 <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b36:	f7ff f8ef 	bl	8000d18 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e05c      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0x416>
 8001b54:	e054      	b.n	8001c00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <HAL_RCC_OscConfig+0x478>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff f8dc 	bl	8000d18 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b64:	f7ff f8d8 	bl	8000d18 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e045      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b76:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x444>
 8001b82:	e03d      	b.n	8001c00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d107      	bne.n	8001b9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e038      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40007000 	.word	0x40007000
 8001b98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <HAL_RCC_OscConfig+0x4ec>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d028      	beq.n	8001bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d121      	bne.n	8001bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d11a      	bne.n	8001bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bcc:	4013      	ands	r3, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d111      	bne.n	8001bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be2:	085b      	lsrs	r3, r3, #1
 8001be4:	3b01      	subs	r3, #1
 8001be6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d107      	bne.n	8001bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800

08001c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0cc      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c24:	4b68      	ldr	r3, [pc, #416]	; (8001dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d90c      	bls.n	8001c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	4b65      	ldr	r3, [pc, #404]	; (8001dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b63      	ldr	r3, [pc, #396]	; (8001dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0b8      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d020      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c64:	4b59      	ldr	r3, [pc, #356]	; (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	4a58      	ldr	r2, [pc, #352]	; (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c7c:	4b53      	ldr	r3, [pc, #332]	; (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	4a52      	ldr	r2, [pc, #328]	; (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c88:	4b50      	ldr	r3, [pc, #320]	; (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	494d      	ldr	r1, [pc, #308]	; (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d044      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d107      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d119      	bne.n	8001cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e07f      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d003      	beq.n	8001cce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cce:	4b3f      	ldr	r3, [pc, #252]	; (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d109      	bne.n	8001cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e06f      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cde:	4b3b      	ldr	r3, [pc, #236]	; (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e067      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cee:	4b37      	ldr	r3, [pc, #220]	; (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f023 0203 	bic.w	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4934      	ldr	r1, [pc, #208]	; (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d00:	f7ff f80a 	bl	8000d18 <HAL_GetTick>
 8001d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d08:	f7ff f806 	bl	8000d18 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e04f      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1e:	4b2b      	ldr	r3, [pc, #172]	; (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 020c 	and.w	r2, r3, #12
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d1eb      	bne.n	8001d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d30:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d20c      	bcs.n	8001d58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3e:	4b22      	ldr	r3, [pc, #136]	; (8001dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d46:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e032      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	4916      	ldr	r1, [pc, #88]	; (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	490e      	ldr	r1, [pc, #56]	; (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d96:	f000 f821 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	490a      	ldr	r1, [pc, #40]	; (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	5ccb      	ldrb	r3, [r1, r3]
 8001daa:	fa22 f303 	lsr.w	r3, r2, r3
 8001dae:	4a09      	ldr	r2, [pc, #36]	; (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe ff6a 	bl	8000c90 <HAL_InitTick>

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023c00 	.word	0x40023c00
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	08003668 	.word	0x08003668
 8001dd4:	20000004 	.word	0x20000004
 8001dd8:	20000008 	.word	0x20000008

08001ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de0:	b094      	sub	sp, #80	; 0x50
 8001de2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	647b      	str	r3, [r7, #68]	; 0x44
 8001de8:	2300      	movs	r3, #0
 8001dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dec:	2300      	movs	r3, #0
 8001dee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df4:	4b79      	ldr	r3, [pc, #484]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d00d      	beq.n	8001e1c <HAL_RCC_GetSysClockFreq+0x40>
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	f200 80e1 	bhi.w	8001fc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0x34>
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d003      	beq.n	8001e16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e0e:	e0db      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e10:	4b73      	ldr	r3, [pc, #460]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001e14:	e0db      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e16:	4b73      	ldr	r3, [pc, #460]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e1a:	e0d8      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e1c:	4b6f      	ldr	r3, [pc, #444]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e26:	4b6d      	ldr	r3, [pc, #436]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d063      	beq.n	8001efa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e32:	4b6a      	ldr	r3, [pc, #424]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	099b      	lsrs	r3, r3, #6
 8001e38:	2200      	movs	r2, #0
 8001e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e44:	633b      	str	r3, [r7, #48]	; 0x30
 8001e46:	2300      	movs	r3, #0
 8001e48:	637b      	str	r3, [r7, #52]	; 0x34
 8001e4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e4e:	4622      	mov	r2, r4
 8001e50:	462b      	mov	r3, r5
 8001e52:	f04f 0000 	mov.w	r0, #0
 8001e56:	f04f 0100 	mov.w	r1, #0
 8001e5a:	0159      	lsls	r1, r3, #5
 8001e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e60:	0150      	lsls	r0, r2, #5
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4621      	mov	r1, r4
 8001e68:	1a51      	subs	r1, r2, r1
 8001e6a:	6139      	str	r1, [r7, #16]
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e80:	4659      	mov	r1, fp
 8001e82:	018b      	lsls	r3, r1, #6
 8001e84:	4651      	mov	r1, sl
 8001e86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e8a:	4651      	mov	r1, sl
 8001e8c:	018a      	lsls	r2, r1, #6
 8001e8e:	4651      	mov	r1, sl
 8001e90:	ebb2 0801 	subs.w	r8, r2, r1
 8001e94:	4659      	mov	r1, fp
 8001e96:	eb63 0901 	sbc.w	r9, r3, r1
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eae:	4690      	mov	r8, r2
 8001eb0:	4699      	mov	r9, r3
 8001eb2:	4623      	mov	r3, r4
 8001eb4:	eb18 0303 	adds.w	r3, r8, r3
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	462b      	mov	r3, r5
 8001ebc:	eb49 0303 	adc.w	r3, r9, r3
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ece:	4629      	mov	r1, r5
 8001ed0:	024b      	lsls	r3, r1, #9
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ed8:	4621      	mov	r1, r4
 8001eda:	024a      	lsls	r2, r1, #9
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ee6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ee8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001eec:	f7fe f972 	bl	80001d4 <__aeabi_uldivmod>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ef8:	e058      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001efa:	4b38      	ldr	r3, [pc, #224]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	099b      	lsrs	r3, r3, #6
 8001f00:	2200      	movs	r2, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	4611      	mov	r1, r2
 8001f06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f0a:	623b      	str	r3, [r7, #32]
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f14:	4642      	mov	r2, r8
 8001f16:	464b      	mov	r3, r9
 8001f18:	f04f 0000 	mov.w	r0, #0
 8001f1c:	f04f 0100 	mov.w	r1, #0
 8001f20:	0159      	lsls	r1, r3, #5
 8001f22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f26:	0150      	lsls	r0, r2, #5
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4641      	mov	r1, r8
 8001f2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f32:	4649      	mov	r1, r9
 8001f34:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f4c:	ebb2 040a 	subs.w	r4, r2, sl
 8001f50:	eb63 050b 	sbc.w	r5, r3, fp
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	f04f 0300 	mov.w	r3, #0
 8001f5c:	00eb      	lsls	r3, r5, #3
 8001f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f62:	00e2      	lsls	r2, r4, #3
 8001f64:	4614      	mov	r4, r2
 8001f66:	461d      	mov	r5, r3
 8001f68:	4643      	mov	r3, r8
 8001f6a:	18e3      	adds	r3, r4, r3
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	464b      	mov	r3, r9
 8001f70:	eb45 0303 	adc.w	r3, r5, r3
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f82:	4629      	mov	r1, r5
 8001f84:	028b      	lsls	r3, r1, #10
 8001f86:	4621      	mov	r1, r4
 8001f88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f8c:	4621      	mov	r1, r4
 8001f8e:	028a      	lsls	r2, r1, #10
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f96:	2200      	movs	r2, #0
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	61fa      	str	r2, [r7, #28]
 8001f9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fa0:	f7fe f918 	bl	80001d4 <__aeabi_uldivmod>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4613      	mov	r3, r2
 8001faa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	0c1b      	lsrs	r3, r3, #16
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001fbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fc6:	e002      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3750      	adds	r7, #80	; 0x50
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	00f42400 	.word	0x00f42400
 8001fe4:	007a1200 	.word	0x007a1200

08001fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fec:	4b03      	ldr	r3, [pc, #12]	; (8001ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000004 	.word	0x20000004

08002000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002004:	f7ff fff0 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8002008:	4602      	mov	r2, r0
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	0a9b      	lsrs	r3, r3, #10
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	4903      	ldr	r1, [pc, #12]	; (8002024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002016:	5ccb      	ldrb	r3, [r1, r3]
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800201c:	4618      	mov	r0, r3
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40023800 	.word	0x40023800
 8002024:	08003678 	.word	0x08003678

08002028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800202c:	f7ff ffdc 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8002030:	4602      	mov	r2, r0
 8002032:	4b05      	ldr	r3, [pc, #20]	; (8002048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	0b5b      	lsrs	r3, r3, #13
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	4903      	ldr	r1, [pc, #12]	; (800204c <HAL_RCC_GetPCLK2Freq+0x24>)
 800203e:	5ccb      	ldrb	r3, [r1, r3]
 8002040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002044:	4618      	mov	r0, r3
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40023800 	.word	0x40023800
 800204c:	08003678 	.word	0x08003678

08002050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e041      	b.n	80020e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d106      	bne.n	800207c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe fcd2 	bl	8000a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3304      	adds	r3, #4
 800208c:	4619      	mov	r1, r3
 800208e:	4610      	mov	r0, r2
 8002090:	f000 fca2 	bl	80029d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b01      	cmp	r3, #1
 8002102:	d001      	beq.n	8002108 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e044      	b.n	8002192 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a1e      	ldr	r2, [pc, #120]	; (80021a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d018      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x6c>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002132:	d013      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x6c>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a1a      	ldr	r2, [pc, #104]	; (80021a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00e      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x6c>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a19      	ldr	r2, [pc, #100]	; (80021a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d009      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x6c>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a17      	ldr	r2, [pc, #92]	; (80021ac <HAL_TIM_Base_Start_IT+0xbc>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d004      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x6c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a16      	ldr	r2, [pc, #88]	; (80021b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d111      	bne.n	8002180 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2b06      	cmp	r3, #6
 800216c:	d010      	beq.n	8002190 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0201 	orr.w	r2, r2, #1
 800217c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800217e:	e007      	b.n	8002190 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40010000 	.word	0x40010000
 80021a4:	40000400 	.word	0x40000400
 80021a8:	40000800 	.word	0x40000800
 80021ac:	40000c00 	.word	0x40000c00
 80021b0:	40014000 	.word	0x40014000

080021b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e041      	b.n	800224a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f839 	bl	8002252 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3304      	adds	r3, #4
 80021f0:	4619      	mov	r1, r3
 80021f2:	4610      	mov	r0, r2
 80021f4:	f000 fbf0 	bl	80029d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d109      	bne.n	8002290 <HAL_TIM_PWM_Start_IT+0x28>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b01      	cmp	r3, #1
 8002286:	bf14      	ite	ne
 8002288:	2301      	movne	r3, #1
 800228a:	2300      	moveq	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	e022      	b.n	80022d6 <HAL_TIM_PWM_Start_IT+0x6e>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2b04      	cmp	r3, #4
 8002294:	d109      	bne.n	80022aa <HAL_TIM_PWM_Start_IT+0x42>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	bf14      	ite	ne
 80022a2:	2301      	movne	r3, #1
 80022a4:	2300      	moveq	r3, #0
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	e015      	b.n	80022d6 <HAL_TIM_PWM_Start_IT+0x6e>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d109      	bne.n	80022c4 <HAL_TIM_PWM_Start_IT+0x5c>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	bf14      	ite	ne
 80022bc:	2301      	movne	r3, #1
 80022be:	2300      	moveq	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	e008      	b.n	80022d6 <HAL_TIM_PWM_Start_IT+0x6e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	bf14      	ite	ne
 80022d0:	2301      	movne	r3, #1
 80022d2:	2300      	moveq	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e0b3      	b.n	8002446 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d104      	bne.n	80022ee <HAL_TIM_PWM_Start_IT+0x86>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2202      	movs	r2, #2
 80022e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022ec:	e013      	b.n	8002316 <HAL_TIM_PWM_Start_IT+0xae>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d104      	bne.n	80022fe <HAL_TIM_PWM_Start_IT+0x96>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022fc:	e00b      	b.n	8002316 <HAL_TIM_PWM_Start_IT+0xae>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b08      	cmp	r3, #8
 8002302:	d104      	bne.n	800230e <HAL_TIM_PWM_Start_IT+0xa6>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2202      	movs	r2, #2
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800230c:	e003      	b.n	8002316 <HAL_TIM_PWM_Start_IT+0xae>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2202      	movs	r2, #2
 8002312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b0c      	cmp	r3, #12
 800231a:	d841      	bhi.n	80023a0 <HAL_TIM_PWM_Start_IT+0x138>
 800231c:	a201      	add	r2, pc, #4	; (adr r2, 8002324 <HAL_TIM_PWM_Start_IT+0xbc>)
 800231e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002322:	bf00      	nop
 8002324:	08002359 	.word	0x08002359
 8002328:	080023a1 	.word	0x080023a1
 800232c:	080023a1 	.word	0x080023a1
 8002330:	080023a1 	.word	0x080023a1
 8002334:	0800236b 	.word	0x0800236b
 8002338:	080023a1 	.word	0x080023a1
 800233c:	080023a1 	.word	0x080023a1
 8002340:	080023a1 	.word	0x080023a1
 8002344:	0800237d 	.word	0x0800237d
 8002348:	080023a1 	.word	0x080023a1
 800234c:	080023a1 	.word	0x080023a1
 8002350:	080023a1 	.word	0x080023a1
 8002354:	0800238f 	.word	0x0800238f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f042 0202 	orr.w	r2, r2, #2
 8002366:	60da      	str	r2, [r3, #12]
      break;
 8002368:	e01d      	b.n	80023a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f042 0204 	orr.w	r2, r2, #4
 8002378:	60da      	str	r2, [r3, #12]
      break;
 800237a:	e014      	b.n	80023a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0208 	orr.w	r2, r2, #8
 800238a:	60da      	str	r2, [r3, #12]
      break;
 800238c:	e00b      	b.n	80023a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f042 0210 	orr.w	r2, r2, #16
 800239c:	60da      	str	r2, [r3, #12]
      break;
 800239e:	e002      	b.n	80023a6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
      break;
 80023a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d14b      	bne.n	8002444 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2201      	movs	r2, #1
 80023b2:	6839      	ldr	r1, [r7, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 fdb5 	bl	8002f24 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a24      	ldr	r2, [pc, #144]	; (8002450 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d107      	bne.n	80023d4 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023d2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a1d      	ldr	r2, [pc, #116]	; (8002450 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d018      	beq.n	8002410 <HAL_TIM_PWM_Start_IT+0x1a8>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e6:	d013      	beq.n	8002410 <HAL_TIM_PWM_Start_IT+0x1a8>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a19      	ldr	r2, [pc, #100]	; (8002454 <HAL_TIM_PWM_Start_IT+0x1ec>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d00e      	beq.n	8002410 <HAL_TIM_PWM_Start_IT+0x1a8>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a18      	ldr	r2, [pc, #96]	; (8002458 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d009      	beq.n	8002410 <HAL_TIM_PWM_Start_IT+0x1a8>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a16      	ldr	r2, [pc, #88]	; (800245c <HAL_TIM_PWM_Start_IT+0x1f4>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d004      	beq.n	8002410 <HAL_TIM_PWM_Start_IT+0x1a8>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a15      	ldr	r2, [pc, #84]	; (8002460 <HAL_TIM_PWM_Start_IT+0x1f8>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d111      	bne.n	8002434 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b06      	cmp	r3, #6
 8002420:	d010      	beq.n	8002444 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0201 	orr.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002432:	e007      	b.n	8002444 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002444:	7bfb      	ldrb	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40010000 	.word	0x40010000
 8002454:	40000400 	.word	0x40000400
 8002458:	40000800 	.word	0x40000800
 800245c:	40000c00 	.word	0x40000c00
 8002460:	40014000 	.word	0x40014000

08002464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b02      	cmp	r3, #2
 8002478:	d122      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b02      	cmp	r3, #2
 8002486:	d11b      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f06f 0202 	mvn.w	r2, #2
 8002490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fa77 	bl	800299a <HAL_TIM_IC_CaptureCallback>
 80024ac:	e005      	b.n	80024ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fa69 	bl	8002986 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fa7a 	bl	80029ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d122      	bne.n	8002514 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d11b      	bne.n	8002514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0204 	mvn.w	r2, #4
 80024e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2202      	movs	r2, #2
 80024ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fa4d 	bl	800299a <HAL_TIM_IC_CaptureCallback>
 8002500:	e005      	b.n	800250e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 fa3f 	bl	8002986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 fa50 	bl	80029ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b08      	cmp	r3, #8
 8002520:	d122      	bne.n	8002568 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b08      	cmp	r3, #8
 800252e:	d11b      	bne.n	8002568 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0208 	mvn.w	r2, #8
 8002538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2204      	movs	r2, #4
 800253e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fa23 	bl	800299a <HAL_TIM_IC_CaptureCallback>
 8002554:	e005      	b.n	8002562 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fa15 	bl	8002986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 fa26 	bl	80029ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	2b10      	cmp	r3, #16
 8002574:	d122      	bne.n	80025bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b10      	cmp	r3, #16
 8002582:	d11b      	bne.n	80025bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0210 	mvn.w	r2, #16
 800258c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2208      	movs	r2, #8
 8002592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f9f9 	bl	800299a <HAL_TIM_IC_CaptureCallback>
 80025a8:	e005      	b.n	80025b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f9eb 	bl	8002986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f9fc 	bl	80029ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d10e      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d107      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f06f 0201 	mvn.w	r2, #1
 80025e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fd ff74 	bl	80004d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f2:	2b80      	cmp	r3, #128	; 0x80
 80025f4:	d10e      	bne.n	8002614 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002600:	2b80      	cmp	r3, #128	; 0x80
 8002602:	d107      	bne.n	8002614 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800260c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fd26 	bl	8003060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261e:	2b40      	cmp	r3, #64	; 0x40
 8002620:	d10e      	bne.n	8002640 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262c:	2b40      	cmp	r3, #64	; 0x40
 800262e:	d107      	bne.n	8002640 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f9c1 	bl	80029c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0320 	and.w	r3, r3, #32
 800264a:	2b20      	cmp	r3, #32
 800264c:	d10e      	bne.n	800266c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b20      	cmp	r3, #32
 800265a:	d107      	bne.n	800266c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0220 	mvn.w	r2, #32
 8002664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fcf0 	bl	800304c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800268e:	2302      	movs	r3, #2
 8002690:	e0ae      	b.n	80027f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b0c      	cmp	r3, #12
 800269e:	f200 809f 	bhi.w	80027e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80026a2:	a201      	add	r2, pc, #4	; (adr r2, 80026a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80026a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026a8:	080026dd 	.word	0x080026dd
 80026ac:	080027e1 	.word	0x080027e1
 80026b0:	080027e1 	.word	0x080027e1
 80026b4:	080027e1 	.word	0x080027e1
 80026b8:	0800271d 	.word	0x0800271d
 80026bc:	080027e1 	.word	0x080027e1
 80026c0:	080027e1 	.word	0x080027e1
 80026c4:	080027e1 	.word	0x080027e1
 80026c8:	0800275f 	.word	0x0800275f
 80026cc:	080027e1 	.word	0x080027e1
 80026d0:	080027e1 	.word	0x080027e1
 80026d4:	080027e1 	.word	0x080027e1
 80026d8:	0800279f 	.word	0x0800279f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68b9      	ldr	r1, [r7, #8]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 f9f8 	bl	8002ad8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0208 	orr.w	r2, r2, #8
 80026f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0204 	bic.w	r2, r2, #4
 8002706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6999      	ldr	r1, [r3, #24]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	691a      	ldr	r2, [r3, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	619a      	str	r2, [r3, #24]
      break;
 800271a:	e064      	b.n	80027e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fa3e 	bl	8002ba4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6999      	ldr	r1, [r3, #24]
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	021a      	lsls	r2, r3, #8
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	619a      	str	r2, [r3, #24]
      break;
 800275c:	e043      	b.n	80027e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68b9      	ldr	r1, [r7, #8]
 8002764:	4618      	mov	r0, r3
 8002766:	f000 fa89 	bl	8002c7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0208 	orr.w	r2, r2, #8
 8002778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69da      	ldr	r2, [r3, #28]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0204 	bic.w	r2, r2, #4
 8002788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	69d9      	ldr	r1, [r3, #28]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	61da      	str	r2, [r3, #28]
      break;
 800279c:	e023      	b.n	80027e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68b9      	ldr	r1, [r7, #8]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 fad3 	bl	8002d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69da      	ldr	r2, [r3, #28]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69da      	ldr	r2, [r3, #28]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	69d9      	ldr	r1, [r3, #28]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	021a      	lsls	r2, r3, #8
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	61da      	str	r2, [r3, #28]
      break;
 80027de:	e002      	b.n	80027e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	75fb      	strb	r3, [r7, #23]
      break;
 80027e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80027ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_TIM_ConfigClockSource+0x1c>
 8002810:	2302      	movs	r3, #2
 8002812:	e0b4      	b.n	800297e <HAL_TIM_ConfigClockSource+0x186>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800283a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800284c:	d03e      	beq.n	80028cc <HAL_TIM_ConfigClockSource+0xd4>
 800284e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002852:	f200 8087 	bhi.w	8002964 <HAL_TIM_ConfigClockSource+0x16c>
 8002856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800285a:	f000 8086 	beq.w	800296a <HAL_TIM_ConfigClockSource+0x172>
 800285e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002862:	d87f      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x16c>
 8002864:	2b70      	cmp	r3, #112	; 0x70
 8002866:	d01a      	beq.n	800289e <HAL_TIM_ConfigClockSource+0xa6>
 8002868:	2b70      	cmp	r3, #112	; 0x70
 800286a:	d87b      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x16c>
 800286c:	2b60      	cmp	r3, #96	; 0x60
 800286e:	d050      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0x11a>
 8002870:	2b60      	cmp	r3, #96	; 0x60
 8002872:	d877      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x16c>
 8002874:	2b50      	cmp	r3, #80	; 0x50
 8002876:	d03c      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0xfa>
 8002878:	2b50      	cmp	r3, #80	; 0x50
 800287a:	d873      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x16c>
 800287c:	2b40      	cmp	r3, #64	; 0x40
 800287e:	d058      	beq.n	8002932 <HAL_TIM_ConfigClockSource+0x13a>
 8002880:	2b40      	cmp	r3, #64	; 0x40
 8002882:	d86f      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x16c>
 8002884:	2b30      	cmp	r3, #48	; 0x30
 8002886:	d064      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0x15a>
 8002888:	2b30      	cmp	r3, #48	; 0x30
 800288a:	d86b      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x16c>
 800288c:	2b20      	cmp	r3, #32
 800288e:	d060      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0x15a>
 8002890:	2b20      	cmp	r3, #32
 8002892:	d867      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x16c>
 8002894:	2b00      	cmp	r3, #0
 8002896:	d05c      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0x15a>
 8002898:	2b10      	cmp	r3, #16
 800289a:	d05a      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0x15a>
 800289c:	e062      	b.n	8002964 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6818      	ldr	r0, [r3, #0]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	6899      	ldr	r1, [r3, #8]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f000 fb19 	bl	8002ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	609a      	str	r2, [r3, #8]
      break;
 80028ca:	e04f      	b.n	800296c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	6899      	ldr	r1, [r3, #8]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f000 fb02 	bl	8002ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ee:	609a      	str	r2, [r3, #8]
      break;
 80028f0:	e03c      	b.n	800296c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6859      	ldr	r1, [r3, #4]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	461a      	mov	r2, r3
 8002900:	f000 fa76 	bl	8002df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2150      	movs	r1, #80	; 0x50
 800290a:	4618      	mov	r0, r3
 800290c:	f000 facf 	bl	8002eae <TIM_ITRx_SetConfig>
      break;
 8002910:	e02c      	b.n	800296c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6859      	ldr	r1, [r3, #4]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	461a      	mov	r2, r3
 8002920:	f000 fa95 	bl	8002e4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2160      	movs	r1, #96	; 0x60
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fabf 	bl	8002eae <TIM_ITRx_SetConfig>
      break;
 8002930:	e01c      	b.n	800296c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	6859      	ldr	r1, [r3, #4]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	461a      	mov	r2, r3
 8002940:	f000 fa56 	bl	8002df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2140      	movs	r1, #64	; 0x40
 800294a:	4618      	mov	r0, r3
 800294c:	f000 faaf 	bl	8002eae <TIM_ITRx_SetConfig>
      break;
 8002950:	e00c      	b.n	800296c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4619      	mov	r1, r3
 800295c:	4610      	mov	r0, r2
 800295e:	f000 faa6 	bl	8002eae <TIM_ITRx_SetConfig>
      break;
 8002962:	e003      	b.n	800296c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
      break;
 8002968:	e000      	b.n	800296c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800296a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800297c:	7bfb      	ldrb	r3, [r7, #15]
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
	...

080029d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a34      	ldr	r2, [pc, #208]	; (8002abc <TIM_Base_SetConfig+0xe4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00f      	beq.n	8002a10 <TIM_Base_SetConfig+0x38>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f6:	d00b      	beq.n	8002a10 <TIM_Base_SetConfig+0x38>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a31      	ldr	r2, [pc, #196]	; (8002ac0 <TIM_Base_SetConfig+0xe8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d007      	beq.n	8002a10 <TIM_Base_SetConfig+0x38>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a30      	ldr	r2, [pc, #192]	; (8002ac4 <TIM_Base_SetConfig+0xec>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d003      	beq.n	8002a10 <TIM_Base_SetConfig+0x38>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a2f      	ldr	r2, [pc, #188]	; (8002ac8 <TIM_Base_SetConfig+0xf0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d108      	bne.n	8002a22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a25      	ldr	r2, [pc, #148]	; (8002abc <TIM_Base_SetConfig+0xe4>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d01b      	beq.n	8002a62 <TIM_Base_SetConfig+0x8a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a30:	d017      	beq.n	8002a62 <TIM_Base_SetConfig+0x8a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a22      	ldr	r2, [pc, #136]	; (8002ac0 <TIM_Base_SetConfig+0xe8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d013      	beq.n	8002a62 <TIM_Base_SetConfig+0x8a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a21      	ldr	r2, [pc, #132]	; (8002ac4 <TIM_Base_SetConfig+0xec>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00f      	beq.n	8002a62 <TIM_Base_SetConfig+0x8a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a20      	ldr	r2, [pc, #128]	; (8002ac8 <TIM_Base_SetConfig+0xf0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00b      	beq.n	8002a62 <TIM_Base_SetConfig+0x8a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a1f      	ldr	r2, [pc, #124]	; (8002acc <TIM_Base_SetConfig+0xf4>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d007      	beq.n	8002a62 <TIM_Base_SetConfig+0x8a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a1e      	ldr	r2, [pc, #120]	; (8002ad0 <TIM_Base_SetConfig+0xf8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d003      	beq.n	8002a62 <TIM_Base_SetConfig+0x8a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a1d      	ldr	r2, [pc, #116]	; (8002ad4 <TIM_Base_SetConfig+0xfc>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d108      	bne.n	8002a74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a08      	ldr	r2, [pc, #32]	; (8002abc <TIM_Base_SetConfig+0xe4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d103      	bne.n	8002aa8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	615a      	str	r2, [r3, #20]
}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40010000 	.word	0x40010000
 8002ac0:	40000400 	.word	0x40000400
 8002ac4:	40000800 	.word	0x40000800
 8002ac8:	40000c00 	.word	0x40000c00
 8002acc:	40014000 	.word	0x40014000
 8002ad0:	40014400 	.word	0x40014400
 8002ad4:	40014800 	.word	0x40014800

08002ad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	f023 0201 	bic.w	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f023 0303 	bic.w	r3, r3, #3
 8002b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f023 0302 	bic.w	r3, r3, #2
 8002b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ba0 <TIM_OC1_SetConfig+0xc8>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d10c      	bne.n	8002b4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f023 0308 	bic.w	r3, r3, #8
 8002b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f023 0304 	bic.w	r3, r3, #4
 8002b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a13      	ldr	r2, [pc, #76]	; (8002ba0 <TIM_OC1_SetConfig+0xc8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d111      	bne.n	8002b7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	621a      	str	r2, [r3, #32]
}
 8002b94:	bf00      	nop
 8002b96:	371c      	adds	r7, #28
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	40010000 	.word	0x40010000

08002ba4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	f023 0210 	bic.w	r2, r3, #16
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f023 0320 	bic.w	r3, r3, #32
 8002bee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a1e      	ldr	r2, [pc, #120]	; (8002c78 <TIM_OC2_SetConfig+0xd4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d10d      	bne.n	8002c20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a15      	ldr	r2, [pc, #84]	; (8002c78 <TIM_OC2_SetConfig+0xd4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d113      	bne.n	8002c50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	621a      	str	r2, [r3, #32]
}
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40010000 	.word	0x40010000

08002c7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0303 	bic.w	r3, r3, #3
 8002cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	021b      	lsls	r3, r3, #8
 8002ccc:	697a      	ldr	r2, [r7, #20]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a1d      	ldr	r2, [pc, #116]	; (8002d4c <TIM_OC3_SetConfig+0xd0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d10d      	bne.n	8002cf6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a14      	ldr	r2, [pc, #80]	; (8002d4c <TIM_OC3_SetConfig+0xd0>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d113      	bne.n	8002d26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	621a      	str	r2, [r3, #32]
}
 8002d40:	bf00      	nop
 8002d42:	371c      	adds	r7, #28
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	40010000 	.word	0x40010000

08002d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	031b      	lsls	r3, r3, #12
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a10      	ldr	r2, [pc, #64]	; (8002dec <TIM_OC4_SetConfig+0x9c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d109      	bne.n	8002dc4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002db6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	019b      	lsls	r3, r3, #6
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	621a      	str	r2, [r3, #32]
}
 8002dde:	bf00      	nop
 8002de0:	371c      	adds	r7, #28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40010000 	.word	0x40010000

08002df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	f023 0201 	bic.w	r2, r3, #1
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f023 030a 	bic.w	r3, r3, #10
 8002e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	621a      	str	r2, [r3, #32]
}
 8002e42:	bf00      	nop
 8002e44:	371c      	adds	r7, #28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b087      	sub	sp, #28
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	f023 0210 	bic.w	r2, r3, #16
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	031b      	lsls	r3, r3, #12
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	621a      	str	r2, [r3, #32]
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b085      	sub	sp, #20
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f043 0307 	orr.w	r3, r3, #7
 8002ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	609a      	str	r2, [r3, #8]
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
 8002ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002efe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	021a      	lsls	r2, r3, #8
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	431a      	orrs	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	609a      	str	r2, [r3, #8]
}
 8002f18:	bf00      	nop
 8002f1a:	371c      	adds	r7, #28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f003 031f 	and.w	r3, r3, #31
 8002f36:	2201      	movs	r2, #1
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a1a      	ldr	r2, [r3, #32]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	401a      	ands	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a1a      	ldr	r2, [r3, #32]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	621a      	str	r2, [r3, #32]
}
 8002f62:	bf00      	nop
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
	...

08002f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e050      	b.n	800302a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d018      	beq.n	8002ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd4:	d013      	beq.n	8002ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a18      	ldr	r2, [pc, #96]	; (800303c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d00e      	beq.n	8002ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a16      	ldr	r2, [pc, #88]	; (8003040 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d009      	beq.n	8002ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a15      	ldr	r2, [pc, #84]	; (8003044 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d004      	beq.n	8002ffe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a13      	ldr	r2, [pc, #76]	; (8003048 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d10c      	bne.n	8003018 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003004:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	4313      	orrs	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40010000 	.word	0x40010000
 800303c:	40000400 	.word	0x40000400
 8003040:	40000800 	.word	0x40000800
 8003044:	40000c00 	.word	0x40000c00
 8003048:	40014000 	.word	0x40014000

0800304c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e03f      	b.n	8003106 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fd fd1e 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2224      	movs	r2, #36	; 0x24
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f829 	bl	8003110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695a      	ldr	r2, [r3, #20]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003114:	b0c0      	sub	sp, #256	; 0x100
 8003116:	af00      	add	r7, sp, #0
 8003118:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800312c:	68d9      	ldr	r1, [r3, #12]
 800312e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	ea40 0301 	orr.w	r3, r0, r1
 8003138:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800313a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	431a      	orrs	r2, r3
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	431a      	orrs	r2, r3
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003168:	f021 010c 	bic.w	r1, r1, #12
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003176:	430b      	orrs	r3, r1
 8003178:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800317a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318a:	6999      	ldr	r1, [r3, #24]
 800318c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	ea40 0301 	orr.w	r3, r0, r1
 8003196:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4b8f      	ldr	r3, [pc, #572]	; (80033dc <UART_SetConfig+0x2cc>)
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d005      	beq.n	80031b0 <UART_SetConfig+0xa0>
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4b8d      	ldr	r3, [pc, #564]	; (80033e0 <UART_SetConfig+0x2d0>)
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d104      	bne.n	80031ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031b0:	f7fe ff3a 	bl	8002028 <HAL_RCC_GetPCLK2Freq>
 80031b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80031b8:	e003      	b.n	80031c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031ba:	f7fe ff21 	bl	8002000 <HAL_RCC_GetPCLK1Freq>
 80031be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031cc:	f040 810c 	bne.w	80033e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031d4:	2200      	movs	r2, #0
 80031d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80031de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80031e2:	4622      	mov	r2, r4
 80031e4:	462b      	mov	r3, r5
 80031e6:	1891      	adds	r1, r2, r2
 80031e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80031ea:	415b      	adcs	r3, r3
 80031ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031f2:	4621      	mov	r1, r4
 80031f4:	eb12 0801 	adds.w	r8, r2, r1
 80031f8:	4629      	mov	r1, r5
 80031fa:	eb43 0901 	adc.w	r9, r3, r1
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800320a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800320e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003212:	4690      	mov	r8, r2
 8003214:	4699      	mov	r9, r3
 8003216:	4623      	mov	r3, r4
 8003218:	eb18 0303 	adds.w	r3, r8, r3
 800321c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003220:	462b      	mov	r3, r5
 8003222:	eb49 0303 	adc.w	r3, r9, r3
 8003226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800322a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003236:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800323a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800323e:	460b      	mov	r3, r1
 8003240:	18db      	adds	r3, r3, r3
 8003242:	653b      	str	r3, [r7, #80]	; 0x50
 8003244:	4613      	mov	r3, r2
 8003246:	eb42 0303 	adc.w	r3, r2, r3
 800324a:	657b      	str	r3, [r7, #84]	; 0x54
 800324c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003250:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003254:	f7fc ffbe 	bl	80001d4 <__aeabi_uldivmod>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4b61      	ldr	r3, [pc, #388]	; (80033e4 <UART_SetConfig+0x2d4>)
 800325e:	fba3 2302 	umull	r2, r3, r3, r2
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	011c      	lsls	r4, r3, #4
 8003266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800326a:	2200      	movs	r2, #0
 800326c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003270:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003274:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003278:	4642      	mov	r2, r8
 800327a:	464b      	mov	r3, r9
 800327c:	1891      	adds	r1, r2, r2
 800327e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003280:	415b      	adcs	r3, r3
 8003282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003284:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003288:	4641      	mov	r1, r8
 800328a:	eb12 0a01 	adds.w	sl, r2, r1
 800328e:	4649      	mov	r1, r9
 8003290:	eb43 0b01 	adc.w	fp, r3, r1
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032a8:	4692      	mov	sl, r2
 80032aa:	469b      	mov	fp, r3
 80032ac:	4643      	mov	r3, r8
 80032ae:	eb1a 0303 	adds.w	r3, sl, r3
 80032b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032b6:	464b      	mov	r3, r9
 80032b8:	eb4b 0303 	adc.w	r3, fp, r3
 80032bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80032d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80032d4:	460b      	mov	r3, r1
 80032d6:	18db      	adds	r3, r3, r3
 80032d8:	643b      	str	r3, [r7, #64]	; 0x40
 80032da:	4613      	mov	r3, r2
 80032dc:	eb42 0303 	adc.w	r3, r2, r3
 80032e0:	647b      	str	r3, [r7, #68]	; 0x44
 80032e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80032ea:	f7fc ff73 	bl	80001d4 <__aeabi_uldivmod>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4611      	mov	r1, r2
 80032f4:	4b3b      	ldr	r3, [pc, #236]	; (80033e4 <UART_SetConfig+0x2d4>)
 80032f6:	fba3 2301 	umull	r2, r3, r3, r1
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	2264      	movs	r2, #100	; 0x64
 80032fe:	fb02 f303 	mul.w	r3, r2, r3
 8003302:	1acb      	subs	r3, r1, r3
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800330a:	4b36      	ldr	r3, [pc, #216]	; (80033e4 <UART_SetConfig+0x2d4>)
 800330c:	fba3 2302 	umull	r2, r3, r3, r2
 8003310:	095b      	lsrs	r3, r3, #5
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003318:	441c      	add	r4, r3
 800331a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800331e:	2200      	movs	r2, #0
 8003320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003324:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003328:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800332c:	4642      	mov	r2, r8
 800332e:	464b      	mov	r3, r9
 8003330:	1891      	adds	r1, r2, r2
 8003332:	63b9      	str	r1, [r7, #56]	; 0x38
 8003334:	415b      	adcs	r3, r3
 8003336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003338:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800333c:	4641      	mov	r1, r8
 800333e:	1851      	adds	r1, r2, r1
 8003340:	6339      	str	r1, [r7, #48]	; 0x30
 8003342:	4649      	mov	r1, r9
 8003344:	414b      	adcs	r3, r1
 8003346:	637b      	str	r3, [r7, #52]	; 0x34
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003354:	4659      	mov	r1, fp
 8003356:	00cb      	lsls	r3, r1, #3
 8003358:	4651      	mov	r1, sl
 800335a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800335e:	4651      	mov	r1, sl
 8003360:	00ca      	lsls	r2, r1, #3
 8003362:	4610      	mov	r0, r2
 8003364:	4619      	mov	r1, r3
 8003366:	4603      	mov	r3, r0
 8003368:	4642      	mov	r2, r8
 800336a:	189b      	adds	r3, r3, r2
 800336c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003370:	464b      	mov	r3, r9
 8003372:	460a      	mov	r2, r1
 8003374:	eb42 0303 	adc.w	r3, r2, r3
 8003378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003388:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800338c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003390:	460b      	mov	r3, r1
 8003392:	18db      	adds	r3, r3, r3
 8003394:	62bb      	str	r3, [r7, #40]	; 0x28
 8003396:	4613      	mov	r3, r2
 8003398:	eb42 0303 	adc.w	r3, r2, r3
 800339c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800339e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80033a6:	f7fc ff15 	bl	80001d4 <__aeabi_uldivmod>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4b0d      	ldr	r3, [pc, #52]	; (80033e4 <UART_SetConfig+0x2d4>)
 80033b0:	fba3 1302 	umull	r1, r3, r3, r2
 80033b4:	095b      	lsrs	r3, r3, #5
 80033b6:	2164      	movs	r1, #100	; 0x64
 80033b8:	fb01 f303 	mul.w	r3, r1, r3
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	3332      	adds	r3, #50	; 0x32
 80033c2:	4a08      	ldr	r2, [pc, #32]	; (80033e4 <UART_SetConfig+0x2d4>)
 80033c4:	fba2 2303 	umull	r2, r3, r2, r3
 80033c8:	095b      	lsrs	r3, r3, #5
 80033ca:	f003 0207 	and.w	r2, r3, #7
 80033ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4422      	add	r2, r4
 80033d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033d8:	e106      	b.n	80035e8 <UART_SetConfig+0x4d8>
 80033da:	bf00      	nop
 80033dc:	40011000 	.word	0x40011000
 80033e0:	40011400 	.word	0x40011400
 80033e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033ec:	2200      	movs	r2, #0
 80033ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80033f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80033fa:	4642      	mov	r2, r8
 80033fc:	464b      	mov	r3, r9
 80033fe:	1891      	adds	r1, r2, r2
 8003400:	6239      	str	r1, [r7, #32]
 8003402:	415b      	adcs	r3, r3
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
 8003406:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800340a:	4641      	mov	r1, r8
 800340c:	1854      	adds	r4, r2, r1
 800340e:	4649      	mov	r1, r9
 8003410:	eb43 0501 	adc.w	r5, r3, r1
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	00eb      	lsls	r3, r5, #3
 800341e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003422:	00e2      	lsls	r2, r4, #3
 8003424:	4614      	mov	r4, r2
 8003426:	461d      	mov	r5, r3
 8003428:	4643      	mov	r3, r8
 800342a:	18e3      	adds	r3, r4, r3
 800342c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003430:	464b      	mov	r3, r9
 8003432:	eb45 0303 	adc.w	r3, r5, r3
 8003436:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800343a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003446:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003456:	4629      	mov	r1, r5
 8003458:	008b      	lsls	r3, r1, #2
 800345a:	4621      	mov	r1, r4
 800345c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003460:	4621      	mov	r1, r4
 8003462:	008a      	lsls	r2, r1, #2
 8003464:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003468:	f7fc feb4 	bl	80001d4 <__aeabi_uldivmod>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4b60      	ldr	r3, [pc, #384]	; (80035f4 <UART_SetConfig+0x4e4>)
 8003472:	fba3 2302 	umull	r2, r3, r3, r2
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	011c      	lsls	r4, r3, #4
 800347a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800347e:	2200      	movs	r2, #0
 8003480:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003484:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003488:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800348c:	4642      	mov	r2, r8
 800348e:	464b      	mov	r3, r9
 8003490:	1891      	adds	r1, r2, r2
 8003492:	61b9      	str	r1, [r7, #24]
 8003494:	415b      	adcs	r3, r3
 8003496:	61fb      	str	r3, [r7, #28]
 8003498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800349c:	4641      	mov	r1, r8
 800349e:	1851      	adds	r1, r2, r1
 80034a0:	6139      	str	r1, [r7, #16]
 80034a2:	4649      	mov	r1, r9
 80034a4:	414b      	adcs	r3, r1
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034b4:	4659      	mov	r1, fp
 80034b6:	00cb      	lsls	r3, r1, #3
 80034b8:	4651      	mov	r1, sl
 80034ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034be:	4651      	mov	r1, sl
 80034c0:	00ca      	lsls	r2, r1, #3
 80034c2:	4610      	mov	r0, r2
 80034c4:	4619      	mov	r1, r3
 80034c6:	4603      	mov	r3, r0
 80034c8:	4642      	mov	r2, r8
 80034ca:	189b      	adds	r3, r3, r2
 80034cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034d0:	464b      	mov	r3, r9
 80034d2:	460a      	mov	r2, r1
 80034d4:	eb42 0303 	adc.w	r3, r2, r3
 80034d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80034e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80034f4:	4649      	mov	r1, r9
 80034f6:	008b      	lsls	r3, r1, #2
 80034f8:	4641      	mov	r1, r8
 80034fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034fe:	4641      	mov	r1, r8
 8003500:	008a      	lsls	r2, r1, #2
 8003502:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003506:	f7fc fe65 	bl	80001d4 <__aeabi_uldivmod>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4611      	mov	r1, r2
 8003510:	4b38      	ldr	r3, [pc, #224]	; (80035f4 <UART_SetConfig+0x4e4>)
 8003512:	fba3 2301 	umull	r2, r3, r3, r1
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	2264      	movs	r2, #100	; 0x64
 800351a:	fb02 f303 	mul.w	r3, r2, r3
 800351e:	1acb      	subs	r3, r1, r3
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	3332      	adds	r3, #50	; 0x32
 8003524:	4a33      	ldr	r2, [pc, #204]	; (80035f4 <UART_SetConfig+0x4e4>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003530:	441c      	add	r4, r3
 8003532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003536:	2200      	movs	r2, #0
 8003538:	673b      	str	r3, [r7, #112]	; 0x70
 800353a:	677a      	str	r2, [r7, #116]	; 0x74
 800353c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003540:	4642      	mov	r2, r8
 8003542:	464b      	mov	r3, r9
 8003544:	1891      	adds	r1, r2, r2
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	415b      	adcs	r3, r3
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003550:	4641      	mov	r1, r8
 8003552:	1851      	adds	r1, r2, r1
 8003554:	6039      	str	r1, [r7, #0]
 8003556:	4649      	mov	r1, r9
 8003558:	414b      	adcs	r3, r1
 800355a:	607b      	str	r3, [r7, #4]
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003568:	4659      	mov	r1, fp
 800356a:	00cb      	lsls	r3, r1, #3
 800356c:	4651      	mov	r1, sl
 800356e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003572:	4651      	mov	r1, sl
 8003574:	00ca      	lsls	r2, r1, #3
 8003576:	4610      	mov	r0, r2
 8003578:	4619      	mov	r1, r3
 800357a:	4603      	mov	r3, r0
 800357c:	4642      	mov	r2, r8
 800357e:	189b      	adds	r3, r3, r2
 8003580:	66bb      	str	r3, [r7, #104]	; 0x68
 8003582:	464b      	mov	r3, r9
 8003584:	460a      	mov	r2, r1
 8003586:	eb42 0303 	adc.w	r3, r2, r3
 800358a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800358c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	663b      	str	r3, [r7, #96]	; 0x60
 8003596:	667a      	str	r2, [r7, #100]	; 0x64
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80035a4:	4649      	mov	r1, r9
 80035a6:	008b      	lsls	r3, r1, #2
 80035a8:	4641      	mov	r1, r8
 80035aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035ae:	4641      	mov	r1, r8
 80035b0:	008a      	lsls	r2, r1, #2
 80035b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80035b6:	f7fc fe0d 	bl	80001d4 <__aeabi_uldivmod>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <UART_SetConfig+0x4e4>)
 80035c0:	fba3 1302 	umull	r1, r3, r3, r2
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	2164      	movs	r1, #100	; 0x64
 80035c8:	fb01 f303 	mul.w	r3, r1, r3
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	3332      	adds	r3, #50	; 0x32
 80035d2:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <UART_SetConfig+0x4e4>)
 80035d4:	fba2 2303 	umull	r2, r3, r2, r3
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	f003 020f 	and.w	r2, r3, #15
 80035de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4422      	add	r2, r4
 80035e6:	609a      	str	r2, [r3, #8]
}
 80035e8:	bf00      	nop
 80035ea:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80035ee:	46bd      	mov	sp, r7
 80035f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035f4:	51eb851f 	.word	0x51eb851f

080035f8 <memset>:
 80035f8:	4402      	add	r2, r0
 80035fa:	4603      	mov	r3, r0
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d100      	bne.n	8003602 <memset+0xa>
 8003600:	4770      	bx	lr
 8003602:	f803 1b01 	strb.w	r1, [r3], #1
 8003606:	e7f9      	b.n	80035fc <memset+0x4>

08003608 <__libc_init_array>:
 8003608:	b570      	push	{r4, r5, r6, lr}
 800360a:	4d0d      	ldr	r5, [pc, #52]	; (8003640 <__libc_init_array+0x38>)
 800360c:	4c0d      	ldr	r4, [pc, #52]	; (8003644 <__libc_init_array+0x3c>)
 800360e:	1b64      	subs	r4, r4, r5
 8003610:	10a4      	asrs	r4, r4, #2
 8003612:	2600      	movs	r6, #0
 8003614:	42a6      	cmp	r6, r4
 8003616:	d109      	bne.n	800362c <__libc_init_array+0x24>
 8003618:	4d0b      	ldr	r5, [pc, #44]	; (8003648 <__libc_init_array+0x40>)
 800361a:	4c0c      	ldr	r4, [pc, #48]	; (800364c <__libc_init_array+0x44>)
 800361c:	f000 f818 	bl	8003650 <_init>
 8003620:	1b64      	subs	r4, r4, r5
 8003622:	10a4      	asrs	r4, r4, #2
 8003624:	2600      	movs	r6, #0
 8003626:	42a6      	cmp	r6, r4
 8003628:	d105      	bne.n	8003636 <__libc_init_array+0x2e>
 800362a:	bd70      	pop	{r4, r5, r6, pc}
 800362c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003630:	4798      	blx	r3
 8003632:	3601      	adds	r6, #1
 8003634:	e7ee      	b.n	8003614 <__libc_init_array+0xc>
 8003636:	f855 3b04 	ldr.w	r3, [r5], #4
 800363a:	4798      	blx	r3
 800363c:	3601      	adds	r6, #1
 800363e:	e7f2      	b.n	8003626 <__libc_init_array+0x1e>
 8003640:	08003688 	.word	0x08003688
 8003644:	08003688 	.word	0x08003688
 8003648:	08003688 	.word	0x08003688
 800364c:	0800368c 	.word	0x0800368c

08003650 <_init>:
 8003650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003652:	bf00      	nop
 8003654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003656:	bc08      	pop	{r3}
 8003658:	469e      	mov	lr, r3
 800365a:	4770      	bx	lr

0800365c <_fini>:
 800365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365e:	bf00      	nop
 8003660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003662:	bc08      	pop	{r3}
 8003664:	469e      	mov	lr, r3
 8003666:	4770      	bx	lr
