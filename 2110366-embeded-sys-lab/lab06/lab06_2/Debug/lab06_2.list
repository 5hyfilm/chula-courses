
lab06_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ac8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004c68  08004c68  00014c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d3c  08004d3c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004d3c  08004d3c  00014d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d44  08004d44  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d44  08004d44  00014d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d48  08004d48  00014d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045c0  20000010  08004d5c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045d0  08004d5c  000245d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec12  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027d3  00000000  00000000  0002ec95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d00  00000000  00000000  00031468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f1  00000000  00000000  00032168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000168bb  00000000  00000000  00032b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e5ad  00000000  00000000  00049414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e702  00000000  00000000  000579c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000348c  00000000  00000000  000e60c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000e9550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004c50 	.word	0x08004c50

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004c50 	.word	0x08004c50

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	4a07      	ldr	r2, [pc, #28]	; (8000508 <vApplicationGetIdleTaskMemory+0x2c>)
 80004ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <vApplicationGetIdleTaskMemory+0x30>)
 80004f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2280      	movs	r2, #128	; 0x80
 80004f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004fa:	bf00      	nop
 80004fc:	3714      	adds	r7, #20
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000002c 	.word	0x2000002c
 800050c:	20000080 	.word	0x20000080

08000510 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4a07      	ldr	r2, [pc, #28]	; (800053c <vApplicationGetTimerTaskMemory+0x2c>)
 8000520:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <vApplicationGetTimerTaskMemory+0x30>)
 8000526:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800052e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	20000280 	.word	0x20000280
 8000540:	200002d4 	.word	0x200002d4

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b0a4      	sub	sp, #144	; 0x90
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f000 fb1d 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f8c5 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 f957 	bl	8000804 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000556:	f000 f92b 	bl	80007b0 <MX_USART2_UART_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myTimer01 */
  osTimerDef(myTimer01, Callback01);
 800055a:	4b50      	ldr	r3, [pc, #320]	; (800069c <main+0x158>)
 800055c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000560:	2300      	movs	r3, #0
 8000562:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8000566:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800056a:	2200      	movs	r2, #0
 800056c:	2101      	movs	r1, #1
 800056e:	4618      	mov	r0, r3
 8000570:	f001 fe08 	bl	8002184 <osTimerCreate>
 8000574:	4603      	mov	r3, r0
 8000576:	4a4a      	ldr	r2, [pc, #296]	; (80006a0 <main+0x15c>)
 8000578:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTimer02 */
  osTimerDef(myTimer02, Callback02);
 800057a:	4b4a      	ldr	r3, [pc, #296]	; (80006a4 <main+0x160>)
 800057c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000580:	2300      	movs	r3, #0
 8000582:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  myTimer02Handle = osTimerCreate(osTimer(myTimer02), osTimerPeriodic, NULL);
 8000586:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800058a:	2200      	movs	r2, #0
 800058c:	2101      	movs	r1, #1
 800058e:	4618      	mov	r0, r3
 8000590:	f001 fdf8 	bl	8002184 <osTimerCreate>
 8000594:	4603      	mov	r3, r0
 8000596:	4a44      	ldr	r2, [pc, #272]	; (80006a8 <main+0x164>)
 8000598:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTimer03 */
  osTimerDef(myTimer03, Callback03);
 800059a:	4b44      	ldr	r3, [pc, #272]	; (80006ac <main+0x168>)
 800059c:	67bb      	str	r3, [r7, #120]	; 0x78
 800059e:	2300      	movs	r3, #0
 80005a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  myTimer03Handle = osTimerCreate(osTimer(myTimer03), osTimerPeriodic, NULL);
 80005a2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80005a6:	2200      	movs	r2, #0
 80005a8:	2101      	movs	r1, #1
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 fdea 	bl	8002184 <osTimerCreate>
 80005b0:	4603      	mov	r3, r0
 80005b2:	4a3f      	ldr	r2, [pc, #252]	; (80006b0 <main+0x16c>)
 80005b4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTimer04 */
  osTimerDef(myTimer04, Callback04);
 80005b6:	4b3f      	ldr	r3, [pc, #252]	; (80006b4 <main+0x170>)
 80005b8:	673b      	str	r3, [r7, #112]	; 0x70
 80005ba:	2300      	movs	r3, #0
 80005bc:	677b      	str	r3, [r7, #116]	; 0x74
  myTimer04Handle = osTimerCreate(osTimer(myTimer04), osTimerPeriodic, NULL);
 80005be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005c2:	2200      	movs	r2, #0
 80005c4:	2101      	movs	r1, #1
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fddc 	bl	8002184 <osTimerCreate>
 80005cc:	4603      	mov	r3, r0
 80005ce:	4a3a      	ldr	r2, [pc, #232]	; (80006b8 <main+0x174>)
 80005d0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(myTimer01Handle, 25);
 80005d2:	4b33      	ldr	r3, [pc, #204]	; (80006a0 <main+0x15c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2119      	movs	r1, #25
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 fe07 	bl	80021ec <osTimerStart>
  osTimerStart(myTimer02Handle, 9);
 80005de:	4b32      	ldr	r3, [pc, #200]	; (80006a8 <main+0x164>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2109      	movs	r1, #9
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 fe01 	bl	80021ec <osTimerStart>
  osTimerStart(myTimer03Handle, 64);
 80005ea:	4b31      	ldr	r3, [pc, #196]	; (80006b0 <main+0x16c>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	2140      	movs	r1, #64	; 0x40
 80005f0:	4618      	mov	r0, r3
 80005f2:	f001 fdfb 	bl	80021ec <osTimerStart>
  osTimerStart(myTimer04Handle, 32);
 80005f6:	4b30      	ldr	r3, [pc, #192]	; (80006b8 <main+0x174>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2120      	movs	r1, #32
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 fdf5 	bl	80021ec <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000602:	4b2e      	ldr	r3, [pc, #184]	; (80006bc <main+0x178>)
 8000604:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000608:	461d      	mov	r5, r3
 800060a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000612:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000616:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fd50 	bl	80020c2 <osThreadCreate>
 8000622:	4603      	mov	r3, r0
 8000624:	4a26      	ldr	r2, [pc, #152]	; (80006c0 <main+0x17c>)
 8000626:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityLow, 0, 128);
 8000628:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <main+0x180>)
 800062a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800062e:	461d      	mov	r5, r3
 8000630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000634:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000638:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800063c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f001 fd3d 	bl	80020c2 <osThreadCreate>
 8000648:	4603      	mov	r3, r0
 800064a:	4a1f      	ldr	r2, [pc, #124]	; (80006c8 <main+0x184>)
 800064c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityLow, 0, 128);
 800064e:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <main+0x188>)
 8000650:	f107 041c 	add.w	r4, r7, #28
 8000654:	461d      	mov	r5, r3
 8000656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800065e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fd2a 	bl	80020c2 <osThreadCreate>
 800066e:	4603      	mov	r3, r0
 8000670:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <main+0x18c>)
 8000672:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityLow, 0, 128);
 8000674:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <main+0x190>)
 8000676:	463c      	mov	r4, r7
 8000678:	461d      	mov	r5, r3
 800067a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800067c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000682:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8000686:	463b      	mov	r3, r7
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fd19 	bl	80020c2 <osThreadCreate>
 8000690:	4603      	mov	r3, r0
 8000692:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <main+0x194>)
 8000694:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000696:	f001 fd0d 	bl	80020b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069a:	e7fe      	b.n	800069a <main+0x156>
 800069c:	0800095d 	.word	0x0800095d
 80006a0:	2000072c 	.word	0x2000072c
 80006a4:	08000979 	.word	0x08000979
 80006a8:	20000730 	.word	0x20000730
 80006ac:	08000995 	.word	0x08000995
 80006b0:	20000734 	.word	0x20000734
 80006b4:	080009b5 	.word	0x080009b5
 80006b8:	20000738 	.word	0x20000738
 80006bc:	08004c74 	.word	0x08004c74
 80006c0:	2000071c 	.word	0x2000071c
 80006c4:	08004c9c 	.word	0x08004c9c
 80006c8:	20000720 	.word	0x20000720
 80006cc:	08004cc4 	.word	0x08004cc4
 80006d0:	20000724 	.word	0x20000724
 80006d4:	08004cec 	.word	0x08004cec
 80006d8:	20000728 	.word	0x20000728

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	; 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 fa76 	bl	8004bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <SystemClock_Config+0xcc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a27      	ldr	r2, [pc, #156]	; (80007a8 <SystemClock_Config+0xcc>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <SystemClock_Config+0xcc>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b22      	ldr	r3, [pc, #136]	; (80007ac <SystemClock_Config+0xd0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemClock_Config+0xd0>)
 8000726:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <SystemClock_Config+0xd0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000738:	2302      	movs	r3, #2
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2310      	movs	r3, #16
 8000742:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000744:	2302      	movs	r3, #2
 8000746:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800074c:	2310      	movs	r3, #16
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000750:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000754:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000756:	2304      	movs	r3, #4
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800075a:	2304      	movs	r3, #4
 800075c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fd20 	bl	80011a8 <HAL_RCC_OscConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800076e:	f000 f931 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2302      	movs	r3, #2
 8000778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000782:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2102      	movs	r1, #2
 800078e:	4618      	mov	r0, r3
 8000790:	f000 ff82 	bl	8001698 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800079a:	f000 f91b 	bl	80009d4 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	; 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_USART2_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e8:	f001 f976 	bl	8001ad8 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f000 f8ef 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200006d4 	.word	0x200006d4
 8000800:	40004400 	.word	0x40004400

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b2e      	ldr	r3, [pc, #184]	; (80008d8 <MX_GPIO_Init+0xd4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a2d      	ldr	r2, [pc, #180]	; (80008d8 <MX_GPIO_Init+0xd4>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b2b      	ldr	r3, [pc, #172]	; (80008d8 <MX_GPIO_Init+0xd4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <MX_GPIO_Init+0xd4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a26      	ldr	r2, [pc, #152]	; (80008d8 <MX_GPIO_Init+0xd4>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b24      	ldr	r3, [pc, #144]	; (80008d8 <MX_GPIO_Init+0xd4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <MX_GPIO_Init+0xd4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a1f      	ldr	r2, [pc, #124]	; (80008d8 <MX_GPIO_Init+0xd4>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_GPIO_Init+0xd4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_GPIO_Init+0xd4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <MX_GPIO_Init+0xd4>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_GPIO_Init+0xd4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000890:	4812      	ldr	r0, [pc, #72]	; (80008dc <MX_GPIO_Init+0xd8>)
 8000892:	f000 fc55 	bl	8001140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000896:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <MX_GPIO_Init+0xdc>)
 80008ae:	f000 fac3 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|GPIO_PIN_10;
 80008b2:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_GPIO_Init+0xd8>)
 80008cc:	f000 fab4 	bl	8000e38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d0:	bf00      	nop
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40020800 	.word	0x40020800

080008e4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80008ec:	2140      	movs	r1, #64	; 0x40
 80008ee:	4803      	ldr	r0, [pc, #12]	; (80008fc <StartDefaultTask+0x18>)
 80008f0:	f000 fc3f 	bl	8001172 <HAL_GPIO_TogglePin>
    osDelay(50);
 80008f4:	2032      	movs	r0, #50	; 0x32
 80008f6:	f001 fc30 	bl	800215a <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80008fa:	e7f7      	b.n	80008ec <StartDefaultTask+0x8>
 80008fc:	40020000 	.word	0x40020000

08000900 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000908:	2120      	movs	r1, #32
 800090a:	4803      	ldr	r0, [pc, #12]	; (8000918 <StartTask02+0x18>)
 800090c:	f000 fc31 	bl	8001172 <HAL_GPIO_TogglePin>
    osDelay(18);
 8000910:	2012      	movs	r0, #18
 8000912:	f001 fc22 	bl	800215a <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000916:	e7f7      	b.n	8000908 <StartTask02+0x8>
 8000918:	40020000 	.word	0x40020000

0800091c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000924:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000928:	4803      	ldr	r0, [pc, #12]	; (8000938 <StartTask03+0x1c>)
 800092a:	f000 fc22 	bl	8001172 <HAL_GPIO_TogglePin>
    osDelay(128);
 800092e:	2080      	movs	r0, #128	; 0x80
 8000930:	f001 fc13 	bl	800215a <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8000934:	e7f6      	b.n	8000924 <StartTask03+0x8>
 8000936:	bf00      	nop
 8000938:	40020000 	.word	0x40020000

0800093c <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000944:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <StartTask04+0x1c>)
 800094a:	f000 fc12 	bl	8001172 <HAL_GPIO_TogglePin>
    osDelay(64);
 800094e:	2040      	movs	r0, #64	; 0x40
 8000950:	f001 fc03 	bl	800215a <osDelay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000954:	e7f6      	b.n	8000944 <StartTask04+0x8>
 8000956:	bf00      	nop
 8000958:	40020000 	.word	0x40020000

0800095c <Callback01>:
  /* USER CODE END StartTask04 */
}

/* Callback01 function */
void Callback01(void const * argument)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000964:	2120      	movs	r1, #32
 8000966:	4803      	ldr	r0, [pc, #12]	; (8000974 <Callback01+0x18>)
 8000968:	f000 fc03 	bl	8001172 <HAL_GPIO_TogglePin>
  /* USER CODE END Callback01 */
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40020000 	.word	0x40020000

08000978 <Callback02>:

/* Callback02 function */
void Callback02(void const * argument)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback02 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000980:	2140      	movs	r1, #64	; 0x40
 8000982:	4803      	ldr	r0, [pc, #12]	; (8000990 <Callback02+0x18>)
 8000984:	f000 fbf5 	bl	8001172 <HAL_GPIO_TogglePin>
  /* USER CODE END Callback02 */
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40020000 	.word	0x40020000

08000994 <Callback03>:

/* Callback03 function */
void Callback03(void const * argument)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback03 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 800099c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a0:	4803      	ldr	r0, [pc, #12]	; (80009b0 <Callback03+0x1c>)
 80009a2:	f000 fbe6 	bl	8001172 <HAL_GPIO_TogglePin>
  /* USER CODE END Callback03 */
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40020000 	.word	0x40020000

080009b4 <Callback04>:

/* Callback04 function */
void Callback04(void const * argument)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback04 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 80009bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c0:	4803      	ldr	r0, [pc, #12]	; (80009d0 <Callback04+0x1c>)
 80009c2:	f000 fbd6 	bl	8001172 <HAL_GPIO_TogglePin>
  /* USER CODE END Callback04 */
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40020000 	.word	0x40020000

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_MspInit+0x54>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	4a11      	ldr	r2, [pc, #68]	; (8000a34 <HAL_MspInit+0x54>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f4:	6453      	str	r3, [r2, #68]	; 0x44
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <HAL_MspInit+0x54>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <HAL_MspInit+0x54>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <HAL_MspInit+0x54>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <HAL_MspInit+0x54>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	210f      	movs	r1, #15
 8000a22:	f06f 0001 	mvn.w	r0, #1
 8000a26:	f000 f9de 	bl	8000de6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800

08000a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	; 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a19      	ldr	r2, [pc, #100]	; (8000abc <HAL_UART_MspInit+0x84>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d12b      	bne.n	8000ab2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a92:	230c      	movs	r3, #12
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa2:	2307      	movs	r3, #7
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <HAL_UART_MspInit+0x8c>)
 8000aae:	f000 f9c3 	bl	8000e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40004400 	.word	0x40004400
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000acc:	e7fe      	b.n	8000acc <NMI_Handler+0x4>

08000ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <MemManage_Handler+0x4>

08000ada <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af8:	f000 f898 	bl	8000c2c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000afc:	f002 ff5e 	bl	80039bc <xTaskGetSchedulerState>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d001      	beq.n	8000b0a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b06:	f003 fdef 	bl	80046e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b38:	f7ff ffea 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b3c:	480c      	ldr	r0, [pc, #48]	; (8000b70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b3e:	490d      	ldr	r1, [pc, #52]	; (8000b74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b40:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b54:	4c0a      	ldr	r4, [pc, #40]	; (8000b80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b62:	f004 f843 	bl	8004bec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b66:	f7ff fced 	bl	8000544 <main>
  bx  lr    
 8000b6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b78:	08004d4c 	.word	0x08004d4c
  ldr r2, =_sbss
 8000b7c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b80:	200045d0 	.word	0x200045d0

08000b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC_IRQHandler>
	...

08000b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	; (8000bc8 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <HAL_Init+0x40>)
 8000b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <HAL_Init+0x40>)
 8000b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <HAL_Init+0x40>)
 8000baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f000 f90d 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb6:	200f      	movs	r0, #15
 8000bb8:	f000 f808 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bbc:	f7ff ff10 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023c00 	.word	0x40023c00

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_InitTick+0x54>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_InitTick+0x58>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f917 	bl	8000e1e <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00e      	b.n	8000c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d80a      	bhi.n	8000c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c08:	f000 f8ed 	bl	8000de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <HAL_InitTick+0x5c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	2000073c 	.word	0x2000073c

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	2000073c 	.word	0x2000073c

08000c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d9c:	d301      	bcc.n	8000da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00f      	b.n	8000dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <SysTick_Config+0x40>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000daa:	210f      	movs	r1, #15
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000db0:	f7ff ff8e 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <SysTick_Config+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <SysTick_Config+0x40>)
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	e000e010 	.word	0xe000e010

08000dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff47 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df8:	f7ff ff5c 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	6978      	ldr	r0, [r7, #20]
 8000e04:	f7ff ff8e 	bl	8000d24 <NVIC_EncodePriority>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff5d 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffb0 	bl	8000d8c <SysTick_Config>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
 8000e52:	e159      	b.n	8001108 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e54:	2201      	movs	r2, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	f040 8148 	bne.w	8001102 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d005      	beq.n	8000e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d130      	bne.n	8000eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	091b      	lsrs	r3, r3, #4
 8000ed6:	f003 0201 	and.w	r2, r3, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d017      	beq.n	8000f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d123      	bne.n	8000f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	08da      	lsrs	r2, r3, #3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3208      	adds	r2, #8
 8000f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	08da      	lsrs	r2, r3, #3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3208      	adds	r2, #8
 8000f76:	69b9      	ldr	r1, [r7, #24]
 8000f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0203 	and.w	r2, r3, #3
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 80a2 	beq.w	8001102 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b57      	ldr	r3, [pc, #348]	; (8001120 <HAL_GPIO_Init+0x2e8>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	4a56      	ldr	r2, [pc, #344]	; (8001120 <HAL_GPIO_Init+0x2e8>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fce:	4b54      	ldr	r3, [pc, #336]	; (8001120 <HAL_GPIO_Init+0x2e8>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fda:	4a52      	ldr	r2, [pc, #328]	; (8001124 <HAL_GPIO_Init+0x2ec>)
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	089b      	lsrs	r3, r3, #2
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	220f      	movs	r2, #15
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a49      	ldr	r2, [pc, #292]	; (8001128 <HAL_GPIO_Init+0x2f0>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d019      	beq.n	800103a <HAL_GPIO_Init+0x202>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a48      	ldr	r2, [pc, #288]	; (800112c <HAL_GPIO_Init+0x2f4>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0x1fe>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a47      	ldr	r2, [pc, #284]	; (8001130 <HAL_GPIO_Init+0x2f8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d00d      	beq.n	8001032 <HAL_GPIO_Init+0x1fa>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a46      	ldr	r2, [pc, #280]	; (8001134 <HAL_GPIO_Init+0x2fc>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d007      	beq.n	800102e <HAL_GPIO_Init+0x1f6>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a45      	ldr	r2, [pc, #276]	; (8001138 <HAL_GPIO_Init+0x300>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_GPIO_Init+0x1f2>
 8001026:	2304      	movs	r3, #4
 8001028:	e008      	b.n	800103c <HAL_GPIO_Init+0x204>
 800102a:	2307      	movs	r3, #7
 800102c:	e006      	b.n	800103c <HAL_GPIO_Init+0x204>
 800102e:	2303      	movs	r3, #3
 8001030:	e004      	b.n	800103c <HAL_GPIO_Init+0x204>
 8001032:	2302      	movs	r3, #2
 8001034:	e002      	b.n	800103c <HAL_GPIO_Init+0x204>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <HAL_GPIO_Init+0x204>
 800103a:	2300      	movs	r3, #0
 800103c:	69fa      	ldr	r2, [r7, #28]
 800103e:	f002 0203 	and.w	r2, r2, #3
 8001042:	0092      	lsls	r2, r2, #2
 8001044:	4093      	lsls	r3, r2
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800104c:	4935      	ldr	r1, [pc, #212]	; (8001124 <HAL_GPIO_Init+0x2ec>)
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	3302      	adds	r3, #2
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800105a:	4b38      	ldr	r3, [pc, #224]	; (800113c <HAL_GPIO_Init+0x304>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	43db      	mvns	r3, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4013      	ands	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800107e:	4a2f      	ldr	r2, [pc, #188]	; (800113c <HAL_GPIO_Init+0x304>)
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001084:	4b2d      	ldr	r3, [pc, #180]	; (800113c <HAL_GPIO_Init+0x304>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a8:	4a24      	ldr	r2, [pc, #144]	; (800113c <HAL_GPIO_Init+0x304>)
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010ae:	4b23      	ldr	r3, [pc, #140]	; (800113c <HAL_GPIO_Init+0x304>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d2:	4a1a      	ldr	r2, [pc, #104]	; (800113c <HAL_GPIO_Init+0x304>)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <HAL_GPIO_Init+0x304>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010fc:	4a0f      	ldr	r2, [pc, #60]	; (800113c <HAL_GPIO_Init+0x304>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3301      	adds	r3, #1
 8001106:	61fb      	str	r3, [r7, #28]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	2b0f      	cmp	r3, #15
 800110c:	f67f aea2 	bls.w	8000e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3724      	adds	r7, #36	; 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800
 8001124:	40013800 	.word	0x40013800
 8001128:	40020000 	.word	0x40020000
 800112c:	40020400 	.word	0x40020400
 8001130:	40020800 	.word	0x40020800
 8001134:	40020c00 	.word	0x40020c00
 8001138:	40021000 	.word	0x40021000
 800113c:	40013c00 	.word	0x40013c00

08001140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	807b      	strh	r3, [r7, #2]
 800114c:	4613      	mov	r3, r2
 800114e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001150:	787b      	ldrb	r3, [r7, #1]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001156:	887a      	ldrh	r2, [r7, #2]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800115c:	e003      	b.n	8001166 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800115e:	887b      	ldrh	r3, [r7, #2]
 8001160:	041a      	lsls	r2, r3, #16
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	619a      	str	r2, [r3, #24]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001172:	b480      	push	{r7}
 8001174:	b085      	sub	sp, #20
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	460b      	mov	r3, r1
 800117c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001184:	887a      	ldrh	r2, [r7, #2]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4013      	ands	r3, r2
 800118a:	041a      	lsls	r2, r3, #16
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	43d9      	mvns	r1, r3
 8001190:	887b      	ldrh	r3, [r7, #2]
 8001192:	400b      	ands	r3, r1
 8001194:	431a      	orrs	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	619a      	str	r2, [r3, #24]
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e267      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d075      	beq.n	80012b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011c6:	4b88      	ldr	r3, [pc, #544]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	d00c      	beq.n	80011ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011d2:	4b85      	ldr	r3, [pc, #532]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011da:	2b08      	cmp	r3, #8
 80011dc:	d112      	bne.n	8001204 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011de:	4b82      	ldr	r3, [pc, #520]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011ea:	d10b      	bne.n	8001204 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ec:	4b7e      	ldr	r3, [pc, #504]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d05b      	beq.n	80012b0 <HAL_RCC_OscConfig+0x108>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d157      	bne.n	80012b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e242      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800120c:	d106      	bne.n	800121c <HAL_RCC_OscConfig+0x74>
 800120e:	4b76      	ldr	r3, [pc, #472]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a75      	ldr	r2, [pc, #468]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e01d      	b.n	8001258 <HAL_RCC_OscConfig+0xb0>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001224:	d10c      	bne.n	8001240 <HAL_RCC_OscConfig+0x98>
 8001226:	4b70      	ldr	r3, [pc, #448]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a6f      	ldr	r2, [pc, #444]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 800122c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	4b6d      	ldr	r3, [pc, #436]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a6c      	ldr	r2, [pc, #432]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e00b      	b.n	8001258 <HAL_RCC_OscConfig+0xb0>
 8001240:	4b69      	ldr	r3, [pc, #420]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a68      	ldr	r2, [pc, #416]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	4b66      	ldr	r3, [pc, #408]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a65      	ldr	r2, [pc, #404]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d013      	beq.n	8001288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fcf8 	bl	8000c54 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001268:	f7ff fcf4 	bl	8000c54 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b64      	cmp	r3, #100	; 0x64
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e207      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127a:	4b5b      	ldr	r3, [pc, #364]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f0      	beq.n	8001268 <HAL_RCC_OscConfig+0xc0>
 8001286:	e014      	b.n	80012b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001288:	f7ff fce4 	bl	8000c54 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001290:	f7ff fce0 	bl	8000c54 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b64      	cmp	r3, #100	; 0x64
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e1f3      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a2:	4b51      	ldr	r3, [pc, #324]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f0      	bne.n	8001290 <HAL_RCC_OscConfig+0xe8>
 80012ae:	e000      	b.n	80012b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d063      	beq.n	8001386 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012be:	4b4a      	ldr	r3, [pc, #296]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00b      	beq.n	80012e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ca:	4b47      	ldr	r3, [pc, #284]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d11c      	bne.n	8001310 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012d6:	4b44      	ldr	r3, [pc, #272]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d116      	bne.n	8001310 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e2:	4b41      	ldr	r3, [pc, #260]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <HAL_RCC_OscConfig+0x152>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d001      	beq.n	80012fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e1c7      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fa:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	4937      	ldr	r1, [pc, #220]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 800130a:	4313      	orrs	r3, r2
 800130c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130e:	e03a      	b.n	8001386 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d020      	beq.n	800135a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001318:	4b34      	ldr	r3, [pc, #208]	; (80013ec <HAL_RCC_OscConfig+0x244>)
 800131a:	2201      	movs	r2, #1
 800131c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131e:	f7ff fc99 	bl	8000c54 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001326:	f7ff fc95 	bl	8000c54 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e1a8      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001338:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f0      	beq.n	8001326 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001344:	4b28      	ldr	r3, [pc, #160]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	4925      	ldr	r1, [pc, #148]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 8001354:	4313      	orrs	r3, r2
 8001356:	600b      	str	r3, [r1, #0]
 8001358:	e015      	b.n	8001386 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800135a:	4b24      	ldr	r3, [pc, #144]	; (80013ec <HAL_RCC_OscConfig+0x244>)
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001360:	f7ff fc78 	bl	8000c54 <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001368:	f7ff fc74 	bl	8000c54 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e187      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f0      	bne.n	8001368 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b00      	cmp	r3, #0
 8001390:	d036      	beq.n	8001400 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d016      	beq.n	80013c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_RCC_OscConfig+0x248>)
 800139c:	2201      	movs	r2, #1
 800139e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a0:	f7ff fc58 	bl	8000c54 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a8:	f7ff fc54 	bl	8000c54 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e167      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <HAL_RCC_OscConfig+0x240>)
 80013bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0x200>
 80013c6:	e01b      	b.n	8001400 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_RCC_OscConfig+0x248>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ce:	f7ff fc41 	bl	8000c54 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d4:	e00e      	b.n	80013f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d6:	f7ff fc3d 	bl	8000c54 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d907      	bls.n	80013f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e150      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
 80013e8:	40023800 	.word	0x40023800
 80013ec:	42470000 	.word	0x42470000
 80013f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f4:	4b88      	ldr	r3, [pc, #544]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80013f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1ea      	bne.n	80013d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 8097 	beq.w	800153c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001412:	4b81      	ldr	r3, [pc, #516]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10f      	bne.n	800143e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	4b7d      	ldr	r3, [pc, #500]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a7c      	ldr	r2, [pc, #496]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b7a      	ldr	r3, [pc, #488]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800143a:	2301      	movs	r3, #1
 800143c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800143e:	4b77      	ldr	r3, [pc, #476]	; (800161c <HAL_RCC_OscConfig+0x474>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001446:	2b00      	cmp	r3, #0
 8001448:	d118      	bne.n	800147c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800144a:	4b74      	ldr	r3, [pc, #464]	; (800161c <HAL_RCC_OscConfig+0x474>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a73      	ldr	r2, [pc, #460]	; (800161c <HAL_RCC_OscConfig+0x474>)
 8001450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001456:	f7ff fbfd 	bl	8000c54 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800145e:	f7ff fbf9 	bl	8000c54 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e10c      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001470:	4b6a      	ldr	r3, [pc, #424]	; (800161c <HAL_RCC_OscConfig+0x474>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d106      	bne.n	8001492 <HAL_RCC_OscConfig+0x2ea>
 8001484:	4b64      	ldr	r3, [pc, #400]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 8001486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001488:	4a63      	ldr	r2, [pc, #396]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6713      	str	r3, [r2, #112]	; 0x70
 8001490:	e01c      	b.n	80014cc <HAL_RCC_OscConfig+0x324>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b05      	cmp	r3, #5
 8001498:	d10c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x30c>
 800149a:	4b5f      	ldr	r3, [pc, #380]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 800149c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149e:	4a5e      	ldr	r2, [pc, #376]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	6713      	str	r3, [r2, #112]	; 0x70
 80014a6:	4b5c      	ldr	r3, [pc, #368]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80014a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014aa:	4a5b      	ldr	r2, [pc, #364]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6713      	str	r3, [r2, #112]	; 0x70
 80014b2:	e00b      	b.n	80014cc <HAL_RCC_OscConfig+0x324>
 80014b4:	4b58      	ldr	r3, [pc, #352]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80014b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b8:	4a57      	ldr	r2, [pc, #348]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80014ba:	f023 0301 	bic.w	r3, r3, #1
 80014be:	6713      	str	r3, [r2, #112]	; 0x70
 80014c0:	4b55      	ldr	r3, [pc, #340]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80014c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c4:	4a54      	ldr	r2, [pc, #336]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80014c6:	f023 0304 	bic.w	r3, r3, #4
 80014ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d015      	beq.n	8001500 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d4:	f7ff fbbe 	bl	8000c54 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014da:	e00a      	b.n	80014f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014dc:	f7ff fbba 	bl	8000c54 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e0cb      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f2:	4b49      	ldr	r3, [pc, #292]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0ee      	beq.n	80014dc <HAL_RCC_OscConfig+0x334>
 80014fe:	e014      	b.n	800152a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001500:	f7ff fba8 	bl	8000c54 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001506:	e00a      	b.n	800151e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001508:	f7ff fba4 	bl	8000c54 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	f241 3288 	movw	r2, #5000	; 0x1388
 8001516:	4293      	cmp	r3, r2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e0b5      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800151e:	4b3e      	ldr	r3, [pc, #248]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 8001520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1ee      	bne.n	8001508 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800152a:	7dfb      	ldrb	r3, [r7, #23]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d105      	bne.n	800153c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001530:	4b39      	ldr	r3, [pc, #228]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	4a38      	ldr	r2, [pc, #224]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 8001536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800153a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 80a1 	beq.w	8001688 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001546:	4b34      	ldr	r3, [pc, #208]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	2b08      	cmp	r3, #8
 8001550:	d05c      	beq.n	800160c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	2b02      	cmp	r3, #2
 8001558:	d141      	bne.n	80015de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155a:	4b31      	ldr	r3, [pc, #196]	; (8001620 <HAL_RCC_OscConfig+0x478>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7ff fb78 	bl	8000c54 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001568:	f7ff fb74 	bl	8000c54 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e087      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157a:	4b27      	ldr	r3, [pc, #156]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69da      	ldr	r2, [r3, #28]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001594:	019b      	lsls	r3, r3, #6
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159c:	085b      	lsrs	r3, r3, #1
 800159e:	3b01      	subs	r3, #1
 80015a0:	041b      	lsls	r3, r3, #16
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a8:	061b      	lsls	r3, r3, #24
 80015aa:	491b      	ldr	r1, [pc, #108]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <HAL_RCC_OscConfig+0x478>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b6:	f7ff fb4d 	bl	8000c54 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015be:	f7ff fb49 	bl	8000c54 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e05c      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x416>
 80015dc:	e054      	b.n	8001688 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <HAL_RCC_OscConfig+0x478>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fb36 	bl	8000c54 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ec:	f7ff fb32 	bl	8000c54 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e045      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_RCC_OscConfig+0x470>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x444>
 800160a:	e03d      	b.n	8001688 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d107      	bne.n	8001624 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e038      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
 8001618:	40023800 	.word	0x40023800
 800161c:	40007000 	.word	0x40007000
 8001620:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_RCC_OscConfig+0x4ec>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d028      	beq.n	8001684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800163c:	429a      	cmp	r2, r3
 800163e:	d121      	bne.n	8001684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164a:	429a      	cmp	r2, r3
 800164c:	d11a      	bne.n	8001684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001654:	4013      	ands	r3, r2
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800165a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800165c:	4293      	cmp	r3, r2
 800165e:	d111      	bne.n	8001684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166a:	085b      	lsrs	r3, r3, #1
 800166c:	3b01      	subs	r3, #1
 800166e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001670:	429a      	cmp	r2, r3
 8001672:	d107      	bne.n	8001684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001680:	429a      	cmp	r2, r3
 8001682:	d001      	beq.n	8001688 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800

08001698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e0cc      	b.n	8001846 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016ac:	4b68      	ldr	r3, [pc, #416]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d90c      	bls.n	80016d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ba:	4b65      	ldr	r3, [pc, #404]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b63      	ldr	r3, [pc, #396]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0b8      	b.n	8001846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d020      	beq.n	8001722 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016ec:	4b59      	ldr	r3, [pc, #356]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4a58      	ldr	r2, [pc, #352]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001704:	4b53      	ldr	r3, [pc, #332]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4a52      	ldr	r2, [pc, #328]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800170e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001710:	4b50      	ldr	r3, [pc, #320]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	494d      	ldr	r1, [pc, #308]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	4313      	orrs	r3, r2
 8001720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d044      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	4b47      	ldr	r3, [pc, #284]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d119      	bne.n	8001776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e07f      	b.n	8001846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d003      	beq.n	8001756 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001752:	2b03      	cmp	r3, #3
 8001754:	d107      	bne.n	8001766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001756:	4b3f      	ldr	r3, [pc, #252]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d109      	bne.n	8001776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e06f      	b.n	8001846 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001766:	4b3b      	ldr	r3, [pc, #236]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e067      	b.n	8001846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001776:	4b37      	ldr	r3, [pc, #220]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f023 0203 	bic.w	r2, r3, #3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4934      	ldr	r1, [pc, #208]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	4313      	orrs	r3, r2
 8001786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001788:	f7ff fa64 	bl	8000c54 <HAL_GetTick>
 800178c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178e:	e00a      	b.n	80017a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001790:	f7ff fa60 	bl	8000c54 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	; 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e04f      	b.n	8001846 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a6:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 020c 	and.w	r2, r3, #12
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d1eb      	bne.n	8001790 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017b8:	4b25      	ldr	r3, [pc, #148]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d20c      	bcs.n	80017e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b22      	ldr	r3, [pc, #136]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ce:	4b20      	ldr	r3, [pc, #128]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e032      	b.n	8001846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d008      	beq.n	80017fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4916      	ldr	r1, [pc, #88]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d009      	beq.n	800181e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	490e      	ldr	r1, [pc, #56]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	4313      	orrs	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800181e:	f000 f821 	bl	8001864 <HAL_RCC_GetSysClockFreq>
 8001822:	4602      	mov	r2, r0
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	490a      	ldr	r1, [pc, #40]	; (8001858 <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	5ccb      	ldrb	r3, [r1, r3]
 8001832:	fa22 f303 	lsr.w	r3, r2, r3
 8001836:	4a09      	ldr	r2, [pc, #36]	; (800185c <HAL_RCC_ClockConfig+0x1c4>)
 8001838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_RCC_ClockConfig+0x1c8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff f9c4 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023c00 	.word	0x40023c00
 8001854:	40023800 	.word	0x40023800
 8001858:	08004d24 	.word	0x08004d24
 800185c:	20000000 	.word	0x20000000
 8001860:	20000004 	.word	0x20000004

08001864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001868:	b094      	sub	sp, #80	; 0x50
 800186a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	647b      	str	r3, [r7, #68]	; 0x44
 8001870:	2300      	movs	r3, #0
 8001872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001874:	2300      	movs	r3, #0
 8001876:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800187c:	4b79      	ldr	r3, [pc, #484]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x200>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b08      	cmp	r3, #8
 8001886:	d00d      	beq.n	80018a4 <HAL_RCC_GetSysClockFreq+0x40>
 8001888:	2b08      	cmp	r3, #8
 800188a:	f200 80e1 	bhi.w	8001a50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <HAL_RCC_GetSysClockFreq+0x34>
 8001892:	2b04      	cmp	r3, #4
 8001894:	d003      	beq.n	800189e <HAL_RCC_GetSysClockFreq+0x3a>
 8001896:	e0db      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001898:	4b73      	ldr	r3, [pc, #460]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x204>)
 800189a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800189c:	e0db      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800189e:	4b73      	ldr	r3, [pc, #460]	; (8001a6c <HAL_RCC_GetSysClockFreq+0x208>)
 80018a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018a2:	e0d8      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018a4:	4b6f      	ldr	r3, [pc, #444]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ae:	4b6d      	ldr	r3, [pc, #436]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d063      	beq.n	8001982 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ba:	4b6a      	ldr	r3, [pc, #424]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	099b      	lsrs	r3, r3, #6
 80018c0:	2200      	movs	r2, #0
 80018c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80018c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
 80018ce:	2300      	movs	r3, #0
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
 80018d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018d6:	4622      	mov	r2, r4
 80018d8:	462b      	mov	r3, r5
 80018da:	f04f 0000 	mov.w	r0, #0
 80018de:	f04f 0100 	mov.w	r1, #0
 80018e2:	0159      	lsls	r1, r3, #5
 80018e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018e8:	0150      	lsls	r0, r2, #5
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4621      	mov	r1, r4
 80018f0:	1a51      	subs	r1, r2, r1
 80018f2:	6139      	str	r1, [r7, #16]
 80018f4:	4629      	mov	r1, r5
 80018f6:	eb63 0301 	sbc.w	r3, r3, r1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001908:	4659      	mov	r1, fp
 800190a:	018b      	lsls	r3, r1, #6
 800190c:	4651      	mov	r1, sl
 800190e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001912:	4651      	mov	r1, sl
 8001914:	018a      	lsls	r2, r1, #6
 8001916:	4651      	mov	r1, sl
 8001918:	ebb2 0801 	subs.w	r8, r2, r1
 800191c:	4659      	mov	r1, fp
 800191e:	eb63 0901 	sbc.w	r9, r3, r1
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	f04f 0300 	mov.w	r3, #0
 800192a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800192e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001932:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001936:	4690      	mov	r8, r2
 8001938:	4699      	mov	r9, r3
 800193a:	4623      	mov	r3, r4
 800193c:	eb18 0303 	adds.w	r3, r8, r3
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	462b      	mov	r3, r5
 8001944:	eb49 0303 	adc.w	r3, r9, r3
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001956:	4629      	mov	r1, r5
 8001958:	024b      	lsls	r3, r1, #9
 800195a:	4621      	mov	r1, r4
 800195c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001960:	4621      	mov	r1, r4
 8001962:	024a      	lsls	r2, r1, #9
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800196a:	2200      	movs	r2, #0
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
 800196e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001970:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001974:	f7fe fc34 	bl	80001e0 <__aeabi_uldivmod>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4613      	mov	r3, r2
 800197e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001980:	e058      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001982:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	099b      	lsrs	r3, r3, #6
 8001988:	2200      	movs	r2, #0
 800198a:	4618      	mov	r0, r3
 800198c:	4611      	mov	r1, r2
 800198e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001992:	623b      	str	r3, [r7, #32]
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
 8001998:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800199c:	4642      	mov	r2, r8
 800199e:	464b      	mov	r3, r9
 80019a0:	f04f 0000 	mov.w	r0, #0
 80019a4:	f04f 0100 	mov.w	r1, #0
 80019a8:	0159      	lsls	r1, r3, #5
 80019aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019ae:	0150      	lsls	r0, r2, #5
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4641      	mov	r1, r8
 80019b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80019ba:	4649      	mov	r1, r9
 80019bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019d4:	ebb2 040a 	subs.w	r4, r2, sl
 80019d8:	eb63 050b 	sbc.w	r5, r3, fp
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	00eb      	lsls	r3, r5, #3
 80019e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019ea:	00e2      	lsls	r2, r4, #3
 80019ec:	4614      	mov	r4, r2
 80019ee:	461d      	mov	r5, r3
 80019f0:	4643      	mov	r3, r8
 80019f2:	18e3      	adds	r3, r4, r3
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	464b      	mov	r3, r9
 80019f8:	eb45 0303 	adc.w	r3, r5, r3
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	028b      	lsls	r3, r1, #10
 8001a0e:	4621      	mov	r1, r4
 8001a10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a14:	4621      	mov	r1, r4
 8001a16:	028a      	lsls	r2, r1, #10
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a1e:	2200      	movs	r2, #0
 8001a20:	61bb      	str	r3, [r7, #24]
 8001a22:	61fa      	str	r2, [r7, #28]
 8001a24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a28:	f7fe fbda 	bl	80001e0 <__aeabi_uldivmod>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4613      	mov	r3, r2
 8001a32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	0c1b      	lsrs	r3, r3, #16
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	3301      	adds	r3, #1
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a4e:	e002      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3750      	adds	r7, #80	; 0x50
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	00f42400 	.word	0x00f42400
 8001a6c:	007a1200 	.word	0x007a1200

08001a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000000 	.word	0x20000000

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a8c:	f7ff fff0 	bl	8001a70 <HAL_RCC_GetHCLKFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	0a9b      	lsrs	r3, r3, #10
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4903      	ldr	r1, [pc, #12]	; (8001aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	08004d34 	.word	0x08004d34

08001ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ab4:	f7ff ffdc 	bl	8001a70 <HAL_RCC_GetHCLKFreq>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	0b5b      	lsrs	r3, r3, #13
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	4903      	ldr	r1, [pc, #12]	; (8001ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ac6:	5ccb      	ldrb	r3, [r1, r3]
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	08004d34 	.word	0x08004d34

08001ad8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e042      	b.n	8001b70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d106      	bne.n	8001b04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7fe ff9a 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2224      	movs	r2, #36	; 0x24
 8001b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f82b 	bl	8001b78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	691a      	ldr	r2, [r3, #16]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695a      	ldr	r2, [r3, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2220      	movs	r2, #32
 8001b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b7c:	b0c0      	sub	sp, #256	; 0x100
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b94:	68d9      	ldr	r1, [r3, #12]
 8001b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	ea40 0301 	orr.w	r3, r0, r1
 8001ba0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001bd0:	f021 010c 	bic.w	r1, r1, #12
 8001bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001bde:	430b      	orrs	r3, r1
 8001be0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bf2:	6999      	ldr	r1, [r3, #24]
 8001bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	ea40 0301 	orr.w	r3, r0, r1
 8001bfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4b8f      	ldr	r3, [pc, #572]	; (8001e44 <UART_SetConfig+0x2cc>)
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d005      	beq.n	8001c18 <UART_SetConfig+0xa0>
 8001c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4b8d      	ldr	r3, [pc, #564]	; (8001e48 <UART_SetConfig+0x2d0>)
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d104      	bne.n	8001c22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c18:	f7ff ff4a 	bl	8001ab0 <HAL_RCC_GetPCLK2Freq>
 8001c1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001c20:	e003      	b.n	8001c2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001c22:	f7ff ff31 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 8001c26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c34:	f040 810c 	bne.w	8001e50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001c46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001c4a:	4622      	mov	r2, r4
 8001c4c:	462b      	mov	r3, r5
 8001c4e:	1891      	adds	r1, r2, r2
 8001c50:	65b9      	str	r1, [r7, #88]	; 0x58
 8001c52:	415b      	adcs	r3, r3
 8001c54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	eb12 0801 	adds.w	r8, r2, r1
 8001c60:	4629      	mov	r1, r5
 8001c62:	eb43 0901 	adc.w	r9, r3, r1
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c7a:	4690      	mov	r8, r2
 8001c7c:	4699      	mov	r9, r3
 8001c7e:	4623      	mov	r3, r4
 8001c80:	eb18 0303 	adds.w	r3, r8, r3
 8001c84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001c88:	462b      	mov	r3, r5
 8001c8a:	eb49 0303 	adc.w	r3, r9, r3
 8001c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001ca2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	18db      	adds	r3, r3, r3
 8001caa:	653b      	str	r3, [r7, #80]	; 0x50
 8001cac:	4613      	mov	r3, r2
 8001cae:	eb42 0303 	adc.w	r3, r2, r3
 8001cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8001cb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001cb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001cbc:	f7fe fa90 	bl	80001e0 <__aeabi_uldivmod>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4b61      	ldr	r3, [pc, #388]	; (8001e4c <UART_SetConfig+0x2d4>)
 8001cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	011c      	lsls	r4, r3, #4
 8001cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001cd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001cdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001ce0:	4642      	mov	r2, r8
 8001ce2:	464b      	mov	r3, r9
 8001ce4:	1891      	adds	r1, r2, r2
 8001ce6:	64b9      	str	r1, [r7, #72]	; 0x48
 8001ce8:	415b      	adcs	r3, r3
 8001cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001cf0:	4641      	mov	r1, r8
 8001cf2:	eb12 0a01 	adds.w	sl, r2, r1
 8001cf6:	4649      	mov	r1, r9
 8001cf8:	eb43 0b01 	adc.w	fp, r3, r1
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d10:	4692      	mov	sl, r2
 8001d12:	469b      	mov	fp, r3
 8001d14:	4643      	mov	r3, r8
 8001d16:	eb1a 0303 	adds.w	r3, sl, r3
 8001d1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001d1e:	464b      	mov	r3, r9
 8001d20:	eb4b 0303 	adc.w	r3, fp, r3
 8001d24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001d34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001d38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	18db      	adds	r3, r3, r3
 8001d40:	643b      	str	r3, [r7, #64]	; 0x40
 8001d42:	4613      	mov	r3, r2
 8001d44:	eb42 0303 	adc.w	r3, r2, r3
 8001d48:	647b      	str	r3, [r7, #68]	; 0x44
 8001d4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d52:	f7fe fa45 	bl	80001e0 <__aeabi_uldivmod>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4b3b      	ldr	r3, [pc, #236]	; (8001e4c <UART_SetConfig+0x2d4>)
 8001d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8001d62:	095b      	lsrs	r3, r3, #5
 8001d64:	2264      	movs	r2, #100	; 0x64
 8001d66:	fb02 f303 	mul.w	r3, r2, r3
 8001d6a:	1acb      	subs	r3, r1, r3
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001d72:	4b36      	ldr	r3, [pc, #216]	; (8001e4c <UART_SetConfig+0x2d4>)
 8001d74:	fba3 2302 	umull	r2, r3, r3, r2
 8001d78:	095b      	lsrs	r3, r3, #5
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d80:	441c      	add	r4, r3
 8001d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d86:	2200      	movs	r2, #0
 8001d88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001d90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001d94:	4642      	mov	r2, r8
 8001d96:	464b      	mov	r3, r9
 8001d98:	1891      	adds	r1, r2, r2
 8001d9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d9c:	415b      	adcs	r3, r3
 8001d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001da0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001da4:	4641      	mov	r1, r8
 8001da6:	1851      	adds	r1, r2, r1
 8001da8:	6339      	str	r1, [r7, #48]	; 0x30
 8001daa:	4649      	mov	r1, r9
 8001dac:	414b      	adcs	r3, r1
 8001dae:	637b      	str	r3, [r7, #52]	; 0x34
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001dbc:	4659      	mov	r1, fp
 8001dbe:	00cb      	lsls	r3, r1, #3
 8001dc0:	4651      	mov	r1, sl
 8001dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dc6:	4651      	mov	r1, sl
 8001dc8:	00ca      	lsls	r2, r1, #3
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4642      	mov	r2, r8
 8001dd2:	189b      	adds	r3, r3, r2
 8001dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001dd8:	464b      	mov	r3, r9
 8001dda:	460a      	mov	r2, r1
 8001ddc:	eb42 0303 	adc.w	r3, r2, r3
 8001de0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001df0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001df4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001df8:	460b      	mov	r3, r1
 8001dfa:	18db      	adds	r3, r3, r3
 8001dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dfe:	4613      	mov	r3, r2
 8001e00:	eb42 0303 	adc.w	r3, r2, r3
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001e0e:	f7fe f9e7 	bl	80001e0 <__aeabi_uldivmod>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <UART_SetConfig+0x2d4>)
 8001e18:	fba3 1302 	umull	r1, r3, r3, r2
 8001e1c:	095b      	lsrs	r3, r3, #5
 8001e1e:	2164      	movs	r1, #100	; 0x64
 8001e20:	fb01 f303 	mul.w	r3, r1, r3
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	3332      	adds	r3, #50	; 0x32
 8001e2a:	4a08      	ldr	r2, [pc, #32]	; (8001e4c <UART_SetConfig+0x2d4>)
 8001e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e30:	095b      	lsrs	r3, r3, #5
 8001e32:	f003 0207 	and.w	r2, r3, #7
 8001e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4422      	add	r2, r4
 8001e3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e40:	e106      	b.n	8002050 <UART_SetConfig+0x4d8>
 8001e42:	bf00      	nop
 8001e44:	40011000 	.word	0x40011000
 8001e48:	40011400 	.word	0x40011400
 8001e4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e54:	2200      	movs	r2, #0
 8001e56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001e5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001e5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001e62:	4642      	mov	r2, r8
 8001e64:	464b      	mov	r3, r9
 8001e66:	1891      	adds	r1, r2, r2
 8001e68:	6239      	str	r1, [r7, #32]
 8001e6a:	415b      	adcs	r3, r3
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e72:	4641      	mov	r1, r8
 8001e74:	1854      	adds	r4, r2, r1
 8001e76:	4649      	mov	r1, r9
 8001e78:	eb43 0501 	adc.w	r5, r3, r1
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	00eb      	lsls	r3, r5, #3
 8001e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e8a:	00e2      	lsls	r2, r4, #3
 8001e8c:	4614      	mov	r4, r2
 8001e8e:	461d      	mov	r5, r3
 8001e90:	4643      	mov	r3, r8
 8001e92:	18e3      	adds	r3, r4, r3
 8001e94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e98:	464b      	mov	r3, r9
 8001e9a:	eb45 0303 	adc.w	r3, r5, r3
 8001e9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001eae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	008b      	lsls	r3, r1, #2
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ec8:	4621      	mov	r1, r4
 8001eca:	008a      	lsls	r2, r1, #2
 8001ecc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001ed0:	f7fe f986 	bl	80001e0 <__aeabi_uldivmod>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4b60      	ldr	r3, [pc, #384]	; (800205c <UART_SetConfig+0x4e4>)
 8001eda:	fba3 2302 	umull	r2, r3, r3, r2
 8001ede:	095b      	lsrs	r3, r3, #5
 8001ee0:	011c      	lsls	r4, r3, #4
 8001ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001eec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001ef0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001ef4:	4642      	mov	r2, r8
 8001ef6:	464b      	mov	r3, r9
 8001ef8:	1891      	adds	r1, r2, r2
 8001efa:	61b9      	str	r1, [r7, #24]
 8001efc:	415b      	adcs	r3, r3
 8001efe:	61fb      	str	r3, [r7, #28]
 8001f00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f04:	4641      	mov	r1, r8
 8001f06:	1851      	adds	r1, r2, r1
 8001f08:	6139      	str	r1, [r7, #16]
 8001f0a:	4649      	mov	r1, r9
 8001f0c:	414b      	adcs	r3, r1
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f1c:	4659      	mov	r1, fp
 8001f1e:	00cb      	lsls	r3, r1, #3
 8001f20:	4651      	mov	r1, sl
 8001f22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f26:	4651      	mov	r1, sl
 8001f28:	00ca      	lsls	r2, r1, #3
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4642      	mov	r2, r8
 8001f32:	189b      	adds	r3, r3, r2
 8001f34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f38:	464b      	mov	r3, r9
 8001f3a:	460a      	mov	r2, r1
 8001f3c:	eb42 0303 	adc.w	r3, r2, r3
 8001f40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001f50:	f04f 0200 	mov.w	r2, #0
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001f5c:	4649      	mov	r1, r9
 8001f5e:	008b      	lsls	r3, r1, #2
 8001f60:	4641      	mov	r1, r8
 8001f62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f66:	4641      	mov	r1, r8
 8001f68:	008a      	lsls	r2, r1, #2
 8001f6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001f6e:	f7fe f937 	bl	80001e0 <__aeabi_uldivmod>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4611      	mov	r1, r2
 8001f78:	4b38      	ldr	r3, [pc, #224]	; (800205c <UART_SetConfig+0x4e4>)
 8001f7a:	fba3 2301 	umull	r2, r3, r3, r1
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	2264      	movs	r2, #100	; 0x64
 8001f82:	fb02 f303 	mul.w	r3, r2, r3
 8001f86:	1acb      	subs	r3, r1, r3
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	3332      	adds	r3, #50	; 0x32
 8001f8c:	4a33      	ldr	r2, [pc, #204]	; (800205c <UART_SetConfig+0x4e4>)
 8001f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f98:	441c      	add	r4, r3
 8001f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	673b      	str	r3, [r7, #112]	; 0x70
 8001fa2:	677a      	str	r2, [r7, #116]	; 0x74
 8001fa4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001fa8:	4642      	mov	r2, r8
 8001faa:	464b      	mov	r3, r9
 8001fac:	1891      	adds	r1, r2, r2
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	415b      	adcs	r3, r3
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fb8:	4641      	mov	r1, r8
 8001fba:	1851      	adds	r1, r2, r1
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	4649      	mov	r1, r9
 8001fc0:	414b      	adcs	r3, r1
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001fd0:	4659      	mov	r1, fp
 8001fd2:	00cb      	lsls	r3, r1, #3
 8001fd4:	4651      	mov	r1, sl
 8001fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fda:	4651      	mov	r1, sl
 8001fdc:	00ca      	lsls	r2, r1, #3
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4642      	mov	r2, r8
 8001fe6:	189b      	adds	r3, r3, r2
 8001fe8:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fea:	464b      	mov	r3, r9
 8001fec:	460a      	mov	r2, r1
 8001fee:	eb42 0303 	adc.w	r3, r2, r3
 8001ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	663b      	str	r3, [r7, #96]	; 0x60
 8001ffe:	667a      	str	r2, [r7, #100]	; 0x64
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	f04f 0300 	mov.w	r3, #0
 8002008:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800200c:	4649      	mov	r1, r9
 800200e:	008b      	lsls	r3, r1, #2
 8002010:	4641      	mov	r1, r8
 8002012:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002016:	4641      	mov	r1, r8
 8002018:	008a      	lsls	r2, r1, #2
 800201a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800201e:	f7fe f8df 	bl	80001e0 <__aeabi_uldivmod>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <UART_SetConfig+0x4e4>)
 8002028:	fba3 1302 	umull	r1, r3, r3, r2
 800202c:	095b      	lsrs	r3, r3, #5
 800202e:	2164      	movs	r1, #100	; 0x64
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	3332      	adds	r3, #50	; 0x32
 800203a:	4a08      	ldr	r2, [pc, #32]	; (800205c <UART_SetConfig+0x4e4>)
 800203c:	fba2 2303 	umull	r2, r3, r2, r3
 8002040:	095b      	lsrs	r3, r3, #5
 8002042:	f003 020f 	and.w	r2, r3, #15
 8002046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4422      	add	r2, r4
 800204e:	609a      	str	r2, [r3, #8]
}
 8002050:	bf00      	nop
 8002052:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002056:	46bd      	mov	sp, r7
 8002058:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800205c:	51eb851f 	.word	0x51eb851f

08002060 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800206e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002072:	2b84      	cmp	r3, #132	; 0x84
 8002074:	d005      	beq.n	8002082 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002076:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4413      	add	r3, r2
 800207e:	3303      	adds	r3, #3
 8002080:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002082:	68fb      	ldr	r3, [r7, #12]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002096:	f3ef 8305 	mrs	r3, IPSR
 800209a:	607b      	str	r3, [r7, #4]
  return(result);
 800209c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800209e:	2b00      	cmp	r3, #0
 80020a0:	bf14      	ite	ne
 80020a2:	2301      	movne	r3, #1
 80020a4:	2300      	moveq	r3, #0
 80020a6:	b2db      	uxtb	r3, r3
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80020b8:	f001 f840 	bl	800313c <vTaskStartScheduler>
  
  return osOK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80020c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c4:	b089      	sub	sp, #36	; 0x24
 80020c6:	af04      	add	r7, sp, #16
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d020      	beq.n	8002116 <osThreadCreate+0x54>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d01c      	beq.n	8002116 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685c      	ldr	r4, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691e      	ldr	r6, [r3, #16]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ffb6 	bl	8002060 <makeFreeRtosPriority>
 80020f4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80020fe:	9202      	str	r2, [sp, #8]
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	9100      	str	r1, [sp, #0]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	4632      	mov	r2, r6
 8002108:	4629      	mov	r1, r5
 800210a:	4620      	mov	r0, r4
 800210c:	f000 fe4e 	bl	8002dac <xTaskCreateStatic>
 8002110:	4603      	mov	r3, r0
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	e01c      	b.n	8002150 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685c      	ldr	r4, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002122:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ff98 	bl	8002060 <makeFreeRtosPriority>
 8002130:	4602      	mov	r2, r0
 8002132:	f107 030c 	add.w	r3, r7, #12
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	9200      	str	r2, [sp, #0]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	4632      	mov	r2, r6
 800213e:	4629      	mov	r1, r5
 8002140:	4620      	mov	r0, r4
 8002142:	f000 fe90 	bl	8002e66 <xTaskCreate>
 8002146:	4603      	mov	r3, r0
 8002148:	2b01      	cmp	r3, #1
 800214a:	d001      	beq.n	8002150 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800214c:	2300      	movs	r3, #0
 800214e:	e000      	b.n	8002152 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002150:	68fb      	ldr	r3, [r7, #12]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800215a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <osDelay+0x16>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	e000      	b.n	8002172 <osDelay+0x18>
 8002170:	2301      	movs	r3, #1
 8002172:	4618      	mov	r0, r3
 8002174:	f000 ffae 	bl	80030d4 <vTaskDelay>
  
  return osOK;
 8002178:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af02      	add	r7, sp, #8
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	460b      	mov	r3, r1
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d013      	beq.n	80021c2 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800219a:	7afb      	ldrb	r3, [r7, #11]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <osTimerCreate+0x20>
 80021a0:	2101      	movs	r1, #1
 80021a2:	e000      	b.n	80021a6 <osTimerCreate+0x22>
 80021a4:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80021ae:	9201      	str	r2, [sp, #4]
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	460a      	mov	r2, r1
 80021b6:	2101      	movs	r1, #1
 80021b8:	480b      	ldr	r0, [pc, #44]	; (80021e8 <osTimerCreate+0x64>)
 80021ba:	f001 fd72 	bl	8003ca2 <xTimerCreateStatic>
 80021be:	4603      	mov	r3, r0
 80021c0:	e00e      	b.n	80021e0 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80021c2:	7afb      	ldrb	r3, [r7, #11]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <osTimerCreate+0x48>
 80021c8:	2201      	movs	r2, #1
 80021ca:	e000      	b.n	80021ce <osTimerCreate+0x4a>
 80021cc:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2101      	movs	r1, #1
 80021d8:	4803      	ldr	r0, [pc, #12]	; (80021e8 <osTimerCreate+0x64>)
 80021da:	f001 fd41 	bl	8003c60 <xTimerCreate>
 80021de:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	08004d08 	.word	0x08004d08

080021ec <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <osTimerStart+0x20>
    ticks = 1;
 8002208:	2301      	movs	r3, #1
 800220a:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800220c:	f7ff ff40 	bl	8002090 <inHandlerMode>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d01a      	beq.n	800224c <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8002216:	f107 030c 	add.w	r3, r7, #12
 800221a:	2200      	movs	r2, #0
 800221c:	9200      	str	r2, [sp, #0]
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	2109      	movs	r1, #9
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f001 fdb6 	bl	8003d94 <xTimerGenericCommand>
 8002228:	4603      	mov	r3, r0
 800222a:	2b01      	cmp	r3, #1
 800222c:	d002      	beq.n	8002234 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800222e:	23ff      	movs	r3, #255	; 0xff
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	e018      	b.n	8002266 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d015      	beq.n	8002266 <osTimerStart+0x7a>
 800223a:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <osTimerStart+0x84>)
 800223c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	f3bf 8f4f 	dsb	sy
 8002246:	f3bf 8f6f 	isb	sy
 800224a:	e00c      	b.n	8002266 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800224c:	2300      	movs	r3, #0
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	2300      	movs	r3, #0
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	2104      	movs	r1, #4
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f001 fd9c 	bl	8003d94 <xTimerGenericCommand>
 800225c:	4603      	mov	r3, r0
 800225e:	2b01      	cmp	r3, #1
 8002260:	d001      	beq.n	8002266 <osTimerStart+0x7a>
      result = osErrorOS;
 8002262:	23ff      	movs	r3, #255	; 0xff
 8002264:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8002266:	697b      	ldr	r3, [r7, #20]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	e000ed04 	.word	0xe000ed04

08002274 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f103 0208 	add.w	r2, r3, #8
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800228c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f103 0208 	add.w	r2, r3, #8
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f103 0208 	add.w	r2, r3, #8
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022ce:	b480      	push	{r7}
 80022d0:	b085      	sub	sp, #20
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	601a      	str	r2, [r3, #0]
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002316:	b480      	push	{r7}
 8002318:	b085      	sub	sp, #20
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800232c:	d103      	bne.n	8002336 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	e00c      	b.n	8002350 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3308      	adds	r3, #8
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	e002      	b.n	8002344 <vListInsert+0x2e>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	429a      	cmp	r2, r3
 800234e:	d2f6      	bcs.n	800233e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	1c5a      	adds	r2, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	601a      	str	r2, [r3, #0]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6892      	ldr	r2, [r2, #8]
 800239e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6852      	ldr	r2, [r2, #4]
 80023a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d103      	bne.n	80023bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	1e5a      	subs	r2, r3, #1
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10a      	bne.n	8002406 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80023f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002402:	bf00      	nop
 8002404:	e7fe      	b.n	8002404 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002406:	f002 f8dd 	bl	80045c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002412:	68f9      	ldr	r1, [r7, #12]
 8002414:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	441a      	add	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002436:	3b01      	subs	r3, #1
 8002438:	68f9      	ldr	r1, [r7, #12]
 800243a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	441a      	add	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	22ff      	movs	r2, #255	; 0xff
 800244a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	22ff      	movs	r2, #255	; 0xff
 8002452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d114      	bne.n	8002486 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d01a      	beq.n	800249a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	3310      	adds	r3, #16
 8002468:	4618      	mov	r0, r3
 800246a:	f001 f8eb 	bl	8003644 <xTaskRemoveFromEventList>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d012      	beq.n	800249a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <xQueueGenericReset+0xcc>)
 8002476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	f3bf 8f4f 	dsb	sy
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	e009      	b.n	800249a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	3310      	adds	r3, #16
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fef2 	bl	8002274 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	3324      	adds	r3, #36	; 0x24
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff feed 	bl	8002274 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800249a:	f002 f8c3 	bl	8004624 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800249e:	2301      	movs	r3, #1
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	e000ed04 	.word	0xe000ed04

080024ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08e      	sub	sp, #56	; 0x38
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10a      	bne.n	80024d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80024c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c4:	f383 8811 	msr	BASEPRI, r3
 80024c8:	f3bf 8f6f 	isb	sy
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80024d2:	bf00      	nop
 80024d4:	e7fe      	b.n	80024d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10a      	bne.n	80024f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80024dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e0:	f383 8811 	msr	BASEPRI, r3
 80024e4:	f3bf 8f6f 	isb	sy
 80024e8:	f3bf 8f4f 	dsb	sy
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80024ee:	bf00      	nop
 80024f0:	e7fe      	b.n	80024f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <xQueueGenericCreateStatic+0x52>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <xQueueGenericCreateStatic+0x56>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <xQueueGenericCreateStatic+0x58>
 8002502:	2300      	movs	r3, #0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10a      	bne.n	800251e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	623b      	str	r3, [r7, #32]
}
 800251a:	bf00      	nop
 800251c:	e7fe      	b.n	800251c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <xQueueGenericCreateStatic+0x7e>
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <xQueueGenericCreateStatic+0x82>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <xQueueGenericCreateStatic+0x84>
 800252e:	2300      	movs	r3, #0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10a      	bne.n	800254a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002538:	f383 8811 	msr	BASEPRI, r3
 800253c:	f3bf 8f6f 	isb	sy
 8002540:	f3bf 8f4f 	dsb	sy
 8002544:	61fb      	str	r3, [r7, #28]
}
 8002546:	bf00      	nop
 8002548:	e7fe      	b.n	8002548 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800254a:	2348      	movs	r3, #72	; 0x48
 800254c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2b48      	cmp	r3, #72	; 0x48
 8002552:	d00a      	beq.n	800256a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002558:	f383 8811 	msr	BASEPRI, r3
 800255c:	f3bf 8f6f 	isb	sy
 8002560:	f3bf 8f4f 	dsb	sy
 8002564:	61bb      	str	r3, [r7, #24]
}
 8002566:	bf00      	nop
 8002568:	e7fe      	b.n	8002568 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800256a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00d      	beq.n	8002592 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800257e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	4613      	mov	r3, r2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f805 	bl	800259c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002594:	4618      	mov	r0, r3
 8002596:	3730      	adds	r7, #48	; 0x30
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d103      	bne.n	80025b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e002      	b.n	80025be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025ca:	2101      	movs	r1, #1
 80025cc:	69b8      	ldr	r0, [r7, #24]
 80025ce:	f7ff ff05 	bl	80023dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08e      	sub	sp, #56	; 0x38
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
 80025e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80025ea:	2300      	movs	r3, #0
 80025ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80025f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10a      	bne.n	800260e <xQueueGenericSend+0x32>
	__asm volatile
 80025f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800260a:	bf00      	nop
 800260c:	e7fe      	b.n	800260c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d103      	bne.n	800261c <xQueueGenericSend+0x40>
 8002614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <xQueueGenericSend+0x44>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <xQueueGenericSend+0x46>
 8002620:	2300      	movs	r3, #0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10a      	bne.n	800263c <xQueueGenericSend+0x60>
	__asm volatile
 8002626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262a:	f383 8811 	msr	BASEPRI, r3
 800262e:	f3bf 8f6f 	isb	sy
 8002632:	f3bf 8f4f 	dsb	sy
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002638:	bf00      	nop
 800263a:	e7fe      	b.n	800263a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d103      	bne.n	800264a <xQueueGenericSend+0x6e>
 8002642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002646:	2b01      	cmp	r3, #1
 8002648:	d101      	bne.n	800264e <xQueueGenericSend+0x72>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <xQueueGenericSend+0x74>
 800264e:	2300      	movs	r3, #0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10a      	bne.n	800266a <xQueueGenericSend+0x8e>
	__asm volatile
 8002654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002658:	f383 8811 	msr	BASEPRI, r3
 800265c:	f3bf 8f6f 	isb	sy
 8002660:	f3bf 8f4f 	dsb	sy
 8002664:	623b      	str	r3, [r7, #32]
}
 8002666:	bf00      	nop
 8002668:	e7fe      	b.n	8002668 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800266a:	f001 f9a7 	bl	80039bc <xTaskGetSchedulerState>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d102      	bne.n	800267a <xQueueGenericSend+0x9e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <xQueueGenericSend+0xa2>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <xQueueGenericSend+0xa4>
 800267e:	2300      	movs	r3, #0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10a      	bne.n	800269a <xQueueGenericSend+0xbe>
	__asm volatile
 8002684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002688:	f383 8811 	msr	BASEPRI, r3
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	f3bf 8f4f 	dsb	sy
 8002694:	61fb      	str	r3, [r7, #28]
}
 8002696:	bf00      	nop
 8002698:	e7fe      	b.n	8002698 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800269a:	f001 ff93 	bl	80045c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d302      	bcc.n	80026b0 <xQueueGenericSend+0xd4>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d129      	bne.n	8002704 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	68b9      	ldr	r1, [r7, #8]
 80026b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026b6:	f000 fa0b 	bl	8002ad0 <prvCopyDataToQueue>
 80026ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d010      	beq.n	80026e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c6:	3324      	adds	r3, #36	; 0x24
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 ffbb 	bl	8003644 <xTaskRemoveFromEventList>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d013      	beq.n	80026fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80026d4:	4b3f      	ldr	r3, [pc, #252]	; (80027d4 <xQueueGenericSend+0x1f8>)
 80026d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	f3bf 8f6f 	isb	sy
 80026e4:	e00a      	b.n	80026fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80026e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d007      	beq.n	80026fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80026ec:	4b39      	ldr	r3, [pc, #228]	; (80027d4 <xQueueGenericSend+0x1f8>)
 80026ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80026fc:	f001 ff92 	bl	8004624 <vPortExitCritical>
				return pdPASS;
 8002700:	2301      	movs	r3, #1
 8002702:	e063      	b.n	80027cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d103      	bne.n	8002712 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800270a:	f001 ff8b 	bl	8004624 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800270e:	2300      	movs	r3, #0
 8002710:	e05c      	b.n	80027cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002714:	2b00      	cmp	r3, #0
 8002716:	d106      	bne.n	8002726 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fff3 	bl	8003708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002722:	2301      	movs	r3, #1
 8002724:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002726:	f001 ff7d 	bl	8004624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800272a:	f000 fd6d 	bl	8003208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800272e:	f001 ff49 	bl	80045c4 <vPortEnterCritical>
 8002732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002734:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002738:	b25b      	sxtb	r3, r3
 800273a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800273e:	d103      	bne.n	8002748 <xQueueGenericSend+0x16c>
 8002740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800274e:	b25b      	sxtb	r3, r3
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002754:	d103      	bne.n	800275e <xQueueGenericSend+0x182>
 8002756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800275e:	f001 ff61 	bl	8004624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002762:	1d3a      	adds	r2, r7, #4
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	4611      	mov	r1, r2
 800276a:	4618      	mov	r0, r3
 800276c:	f000 ffe2 	bl	8003734 <xTaskCheckForTimeOut>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d124      	bne.n	80027c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002776:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002778:	f000 faa2 	bl	8002cc0 <prvIsQueueFull>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d018      	beq.n	80027b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002784:	3310      	adds	r3, #16
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f000 ff0a 	bl	80035a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002792:	f000 fa2d 	bl	8002bf0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002796:	f000 fd45 	bl	8003224 <xTaskResumeAll>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	f47f af7c 	bne.w	800269a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80027a2:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <xQueueGenericSend+0x1f8>)
 80027a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	e772      	b.n	800269a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80027b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027b6:	f000 fa1b 	bl	8002bf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027ba:	f000 fd33 	bl	8003224 <xTaskResumeAll>
 80027be:	e76c      	b.n	800269a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80027c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027c2:	f000 fa15 	bl	8002bf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80027c6:	f000 fd2d 	bl	8003224 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80027ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3738      	adds	r7, #56	; 0x38
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	e000ed04 	.word	0xe000ed04

080027d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b090      	sub	sp, #64	; 0x40
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
 80027e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80027ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80027f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f4:	f383 8811 	msr	BASEPRI, r3
 80027f8:	f3bf 8f6f 	isb	sy
 80027fc:	f3bf 8f4f 	dsb	sy
 8002800:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002802:	bf00      	nop
 8002804:	e7fe      	b.n	8002804 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d103      	bne.n	8002814 <xQueueGenericSendFromISR+0x3c>
 800280c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <xQueueGenericSendFromISR+0x40>
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <xQueueGenericSendFromISR+0x42>
 8002818:	2300      	movs	r3, #0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10a      	bne.n	8002834 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800281e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002822:	f383 8811 	msr	BASEPRI, r3
 8002826:	f3bf 8f6f 	isb	sy
 800282a:	f3bf 8f4f 	dsb	sy
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002830:	bf00      	nop
 8002832:	e7fe      	b.n	8002832 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d103      	bne.n	8002842 <xQueueGenericSendFromISR+0x6a>
 800283a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <xQueueGenericSendFromISR+0x6e>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <xQueueGenericSendFromISR+0x70>
 8002846:	2300      	movs	r3, #0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10a      	bne.n	8002862 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800284c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002850:	f383 8811 	msr	BASEPRI, r3
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	623b      	str	r3, [r7, #32]
}
 800285e:	bf00      	nop
 8002860:	e7fe      	b.n	8002860 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002862:	f001 ff91 	bl	8004788 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002866:	f3ef 8211 	mrs	r2, BASEPRI
 800286a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	61fa      	str	r2, [r7, #28]
 800287c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800287e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002880:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288a:	429a      	cmp	r2, r3
 800288c:	d302      	bcc.n	8002894 <xQueueGenericSendFromISR+0xbc>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d12f      	bne.n	80028f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002896:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800289a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80028aa:	f000 f911 	bl	8002ad0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80028ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80028b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028b6:	d112      	bne.n	80028de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d016      	beq.n	80028ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c2:	3324      	adds	r3, #36	; 0x24
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 febd 	bl	8003644 <xTaskRemoveFromEventList>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00e      	beq.n	80028ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00b      	beq.n	80028ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	e007      	b.n	80028ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80028de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80028e2:	3301      	adds	r3, #1
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	b25a      	sxtb	r2, r3
 80028e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80028ee:	2301      	movs	r3, #1
 80028f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80028f2:	e001      	b.n	80028f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002902:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002906:	4618      	mov	r0, r3
 8002908:	3740      	adds	r7, #64	; 0x40
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08c      	sub	sp, #48	; 0x30
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800291c:	2300      	movs	r3, #0
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10a      	bne.n	8002940 <xQueueReceive+0x30>
	__asm volatile
 800292a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292e:	f383 8811 	msr	BASEPRI, r3
 8002932:	f3bf 8f6f 	isb	sy
 8002936:	f3bf 8f4f 	dsb	sy
 800293a:	623b      	str	r3, [r7, #32]
}
 800293c:	bf00      	nop
 800293e:	e7fe      	b.n	800293e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d103      	bne.n	800294e <xQueueReceive+0x3e>
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <xQueueReceive+0x42>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <xQueueReceive+0x44>
 8002952:	2300      	movs	r3, #0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10a      	bne.n	800296e <xQueueReceive+0x5e>
	__asm volatile
 8002958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295c:	f383 8811 	msr	BASEPRI, r3
 8002960:	f3bf 8f6f 	isb	sy
 8002964:	f3bf 8f4f 	dsb	sy
 8002968:	61fb      	str	r3, [r7, #28]
}
 800296a:	bf00      	nop
 800296c:	e7fe      	b.n	800296c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800296e:	f001 f825 	bl	80039bc <xTaskGetSchedulerState>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d102      	bne.n	800297e <xQueueReceive+0x6e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <xQueueReceive+0x72>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <xQueueReceive+0x74>
 8002982:	2300      	movs	r3, #0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10a      	bne.n	800299e <xQueueReceive+0x8e>
	__asm volatile
 8002988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298c:	f383 8811 	msr	BASEPRI, r3
 8002990:	f3bf 8f6f 	isb	sy
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	61bb      	str	r3, [r7, #24]
}
 800299a:	bf00      	nop
 800299c:	e7fe      	b.n	800299c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800299e:	f001 fe11 	bl	80045c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d01f      	beq.n	80029ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029b2:	f000 f8f7 	bl	8002ba4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	1e5a      	subs	r2, r3, #1
 80029ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00f      	beq.n	80029e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c8:	3310      	adds	r3, #16
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fe3a 	bl	8003644 <xTaskRemoveFromEventList>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d007      	beq.n	80029e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80029d6:	4b3d      	ldr	r3, [pc, #244]	; (8002acc <xQueueReceive+0x1bc>)
 80029d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	f3bf 8f4f 	dsb	sy
 80029e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80029e6:	f001 fe1d 	bl	8004624 <vPortExitCritical>
				return pdPASS;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e069      	b.n	8002ac2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d103      	bne.n	80029fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029f4:	f001 fe16 	bl	8004624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80029f8:	2300      	movs	r3, #0
 80029fa:	e062      	b.n	8002ac2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a02:	f107 0310 	add.w	r3, r7, #16
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fe7e 	bl	8003708 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a10:	f001 fe08 	bl	8004624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a14:	f000 fbf8 	bl	8003208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a18:	f001 fdd4 	bl	80045c4 <vPortEnterCritical>
 8002a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a22:	b25b      	sxtb	r3, r3
 8002a24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a28:	d103      	bne.n	8002a32 <xQueueReceive+0x122>
 8002a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a38:	b25b      	sxtb	r3, r3
 8002a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a3e:	d103      	bne.n	8002a48 <xQueueReceive+0x138>
 8002a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a48:	f001 fdec 	bl	8004624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a4c:	1d3a      	adds	r2, r7, #4
 8002a4e:	f107 0310 	add.w	r3, r7, #16
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 fe6d 	bl	8003734 <xTaskCheckForTimeOut>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d123      	bne.n	8002aa8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a62:	f000 f917 	bl	8002c94 <prvIsQueueEmpty>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d017      	beq.n	8002a9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6e:	3324      	adds	r3, #36	; 0x24
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 fd95 	bl	80035a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a7c:	f000 f8b8 	bl	8002bf0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a80:	f000 fbd0 	bl	8003224 <xTaskResumeAll>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d189      	bne.n	800299e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002a8a:	4b10      	ldr	r3, [pc, #64]	; (8002acc <xQueueReceive+0x1bc>)
 8002a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	f3bf 8f4f 	dsb	sy
 8002a96:	f3bf 8f6f 	isb	sy
 8002a9a:	e780      	b.n	800299e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002a9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a9e:	f000 f8a7 	bl	8002bf0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002aa2:	f000 fbbf 	bl	8003224 <xTaskResumeAll>
 8002aa6:	e77a      	b.n	800299e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002aaa:	f000 f8a1 	bl	8002bf0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002aae:	f000 fbb9 	bl	8003224 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ab4:	f000 f8ee 	bl	8002c94 <prvIsQueueEmpty>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f43f af6f 	beq.w	800299e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ac0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3730      	adds	r7, #48	; 0x30
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	e000ed04 	.word	0xe000ed04

08002ad0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10d      	bne.n	8002b0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d14d      	bne.n	8002b92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 ff7c 	bl	80039f8 <xTaskPriorityDisinherit>
 8002b00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	e043      	b.n	8002b92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d119      	bne.n	8002b44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6858      	ldr	r0, [r3, #4]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	f002 f88a 	bl	8004c34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	441a      	add	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d32b      	bcc.n	8002b92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	e026      	b.n	8002b92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	68d8      	ldr	r0, [r3, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	f002 f870 	bl	8004c34 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	425b      	negs	r3, r3
 8002b5e:	441a      	add	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d207      	bcs.n	8002b80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	425b      	negs	r3, r3
 8002b7a:	441a      	add	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d105      	bne.n	8002b92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002b9a:	697b      	ldr	r3, [r7, #20]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d018      	beq.n	8002be8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	441a      	add	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d303      	bcc.n	8002bd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68d9      	ldr	r1, [r3, #12]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	461a      	mov	r2, r3
 8002be2:	6838      	ldr	r0, [r7, #0]
 8002be4:	f002 f826 	bl	8004c34 <memcpy>
	}
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002bf8:	f001 fce4 	bl	80045c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c04:	e011      	b.n	8002c2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d012      	beq.n	8002c34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3324      	adds	r3, #36	; 0x24
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fd16 	bl	8003644 <xTaskRemoveFromEventList>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c1e:	f000 fdeb 	bl	80037f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	dce9      	bgt.n	8002c06 <prvUnlockQueue+0x16>
 8002c32:	e000      	b.n	8002c36 <prvUnlockQueue+0x46>
					break;
 8002c34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	22ff      	movs	r2, #255	; 0xff
 8002c3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002c3e:	f001 fcf1 	bl	8004624 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c42:	f001 fcbf 	bl	80045c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c4e:	e011      	b.n	8002c74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d012      	beq.n	8002c7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3310      	adds	r3, #16
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 fcf1 	bl	8003644 <xTaskRemoveFromEventList>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c68:	f000 fdc6 	bl	80037f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c6c:	7bbb      	ldrb	r3, [r7, #14]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	dce9      	bgt.n	8002c50 <prvUnlockQueue+0x60>
 8002c7c:	e000      	b.n	8002c80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	22ff      	movs	r2, #255	; 0xff
 8002c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002c88:	f001 fccc 	bl	8004624 <vPortExitCritical>
}
 8002c8c:	bf00      	nop
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c9c:	f001 fc92 	bl	80045c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d102      	bne.n	8002cae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	e001      	b.n	8002cb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cb2:	f001 fcb7 	bl	8004624 <vPortExitCritical>

	return xReturn;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002cc8:	f001 fc7c 	bl	80045c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d102      	bne.n	8002cde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	e001      	b.n	8002ce2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ce2:	f001 fc9f 	bl	8004624 <vPortExitCritical>

	return xReturn;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	e014      	b.n	8002d2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002d00:	4a0f      	ldr	r2, [pc, #60]	; (8002d40 <vQueueAddToRegistry+0x50>)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10b      	bne.n	8002d24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002d0c:	490c      	ldr	r1, [pc, #48]	; (8002d40 <vQueueAddToRegistry+0x50>)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002d16:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <vQueueAddToRegistry+0x50>)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002d22:	e006      	b.n	8002d32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	3301      	adds	r3, #1
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2b07      	cmp	r3, #7
 8002d2e:	d9e7      	bls.n	8002d00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	20000740 	.word	0x20000740

08002d44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002d54:	f001 fc36 	bl	80045c4 <vPortEnterCritical>
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d5e:	b25b      	sxtb	r3, r3
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d64:	d103      	bne.n	8002d6e <vQueueWaitForMessageRestricted+0x2a>
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d74:	b25b      	sxtb	r3, r3
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d7a:	d103      	bne.n	8002d84 <vQueueWaitForMessageRestricted+0x40>
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d84:	f001 fc4e 	bl	8004624 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d106      	bne.n	8002d9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	3324      	adds	r3, #36	; 0x24
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fc27 	bl	80035ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002d9e:	6978      	ldr	r0, [r7, #20]
 8002da0:	f7ff ff26 	bl	8002bf0 <prvUnlockQueue>
	}
 8002da4:	bf00      	nop
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08e      	sub	sp, #56	; 0x38
 8002db0:	af04      	add	r7, sp, #16
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10a      	bne.n	8002dd6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	623b      	str	r3, [r7, #32]
}
 8002dd2:	bf00      	nop
 8002dd4:	e7fe      	b.n	8002dd4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <xTaskCreateStatic+0x46>
	__asm volatile
 8002ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	61fb      	str	r3, [r7, #28]
}
 8002dee:	bf00      	nop
 8002df0:	e7fe      	b.n	8002df0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002df2:	2354      	movs	r3, #84	; 0x54
 8002df4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	2b54      	cmp	r3, #84	; 0x54
 8002dfa:	d00a      	beq.n	8002e12 <xTaskCreateStatic+0x66>
	__asm volatile
 8002dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e00:	f383 8811 	msr	BASEPRI, r3
 8002e04:	f3bf 8f6f 	isb	sy
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	61bb      	str	r3, [r7, #24]
}
 8002e0e:	bf00      	nop
 8002e10:	e7fe      	b.n	8002e10 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002e12:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01e      	beq.n	8002e58 <xTaskCreateStatic+0xac>
 8002e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d01b      	beq.n	8002e58 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e28:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e32:	2300      	movs	r3, #0
 8002e34:	9303      	str	r3, [sp, #12]
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	9302      	str	r3, [sp, #8]
 8002e3a:	f107 0314 	add.w	r3, r7, #20
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f850 	bl	8002ef0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e52:	f000 f8d5 	bl	8003000 <prvAddNewTaskToReadyList>
 8002e56:	e001      	b.n	8002e5c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e5c:	697b      	ldr	r3, [r7, #20]
	}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3728      	adds	r7, #40	; 0x28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b08c      	sub	sp, #48	; 0x30
 8002e6a:	af04      	add	r7, sp, #16
 8002e6c:	60f8      	str	r0, [r7, #12]
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	603b      	str	r3, [r7, #0]
 8002e72:	4613      	mov	r3, r2
 8002e74:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f001 fcc4 	bl	8004808 <pvPortMalloc>
 8002e80:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00e      	beq.n	8002ea6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e88:	2054      	movs	r0, #84	; 0x54
 8002e8a:	f001 fcbd 	bl	8004808 <pvPortMalloc>
 8002e8e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e9c:	e005      	b.n	8002eaa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e9e:	6978      	ldr	r0, [r7, #20]
 8002ea0:	f001 fd7e 	bl	80049a0 <vPortFree>
 8002ea4:	e001      	b.n	8002eaa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d017      	beq.n	8002ee0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002eb8:	88fa      	ldrh	r2, [r7, #6]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	9303      	str	r3, [sp, #12]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	9302      	str	r3, [sp, #8]
 8002ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec4:	9301      	str	r3, [sp, #4]
 8002ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f80e 	bl	8002ef0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ed4:	69f8      	ldr	r0, [r7, #28]
 8002ed6:	f000 f893 	bl	8003000 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002eda:	2301      	movs	r3, #1
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	e002      	b.n	8002ee6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ee4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ee6:	69bb      	ldr	r3, [r7, #24]
	}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3720      	adds	r7, #32
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	f023 0307 	bic.w	r3, r3, #7
 8002f16:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	617b      	str	r3, [r7, #20]
}
 8002f34:	bf00      	nop
 8002f36:	e7fe      	b.n	8002f36 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d01f      	beq.n	8002f7e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	e012      	b.n	8002f6a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	4413      	add	r3, r2
 8002f4a:	7819      	ldrb	r1, [r3, #0]
 8002f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	4413      	add	r3, r2
 8002f52:	3334      	adds	r3, #52	; 0x34
 8002f54:	460a      	mov	r2, r1
 8002f56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d006      	beq.n	8002f72 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	3301      	adds	r3, #1
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	2b0f      	cmp	r3, #15
 8002f6e:	d9e9      	bls.n	8002f44 <prvInitialiseNewTask+0x54>
 8002f70:	e000      	b.n	8002f74 <prvInitialiseNewTask+0x84>
			{
				break;
 8002f72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f7c:	e003      	b.n	8002f86 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f88:	2b06      	cmp	r3, #6
 8002f8a:	d901      	bls.n	8002f90 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f8c:	2306      	movs	r3, #6
 8002f8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f9a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff f984 	bl	80022b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fae:	3318      	adds	r3, #24
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff f97f 	bl	80022b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbe:	f1c3 0207 	rsb	r2, r3, #7
 8002fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fce:	2200      	movs	r2, #0
 8002fd0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	68f9      	ldr	r1, [r7, #12]
 8002fde:	69b8      	ldr	r0, [r7, #24]
 8002fe0:	f001 f9c2 	bl	8004368 <pxPortInitialiseStack>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ff6:	bf00      	nop
 8002ff8:	3720      	adds	r7, #32
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003008:	f001 fadc 	bl	80045c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800300c:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <prvAddNewTaskToReadyList+0xb8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3301      	adds	r3, #1
 8003012:	4a29      	ldr	r2, [pc, #164]	; (80030b8 <prvAddNewTaskToReadyList+0xb8>)
 8003014:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003016:	4b29      	ldr	r3, [pc, #164]	; (80030bc <prvAddNewTaskToReadyList+0xbc>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800301e:	4a27      	ldr	r2, [pc, #156]	; (80030bc <prvAddNewTaskToReadyList+0xbc>)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003024:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <prvAddNewTaskToReadyList+0xb8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d110      	bne.n	800304e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800302c:	f000 fc08 	bl	8003840 <prvInitialiseTaskLists>
 8003030:	e00d      	b.n	800304e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003032:	4b23      	ldr	r3, [pc, #140]	; (80030c0 <prvAddNewTaskToReadyList+0xc0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d109      	bne.n	800304e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800303a:	4b20      	ldr	r3, [pc, #128]	; (80030bc <prvAddNewTaskToReadyList+0xbc>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	429a      	cmp	r2, r3
 8003046:	d802      	bhi.n	800304e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003048:	4a1c      	ldr	r2, [pc, #112]	; (80030bc <prvAddNewTaskToReadyList+0xbc>)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800304e:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <prvAddNewTaskToReadyList+0xc4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	3301      	adds	r3, #1
 8003054:	4a1b      	ldr	r2, [pc, #108]	; (80030c4 <prvAddNewTaskToReadyList+0xc4>)
 8003056:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305c:	2201      	movs	r2, #1
 800305e:	409a      	lsls	r2, r3
 8003060:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <prvAddNewTaskToReadyList+0xc8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4313      	orrs	r3, r2
 8003066:	4a18      	ldr	r2, [pc, #96]	; (80030c8 <prvAddNewTaskToReadyList+0xc8>)
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4a15      	ldr	r2, [pc, #84]	; (80030cc <prvAddNewTaskToReadyList+0xcc>)
 8003078:	441a      	add	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3304      	adds	r3, #4
 800307e:	4619      	mov	r1, r3
 8003080:	4610      	mov	r0, r2
 8003082:	f7ff f924 	bl	80022ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003086:	f001 facd 	bl	8004624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800308a:	4b0d      	ldr	r3, [pc, #52]	; (80030c0 <prvAddNewTaskToReadyList+0xc0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00e      	beq.n	80030b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <prvAddNewTaskToReadyList+0xbc>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	429a      	cmp	r2, r3
 800309e:	d207      	bcs.n	80030b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80030a0:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <prvAddNewTaskToReadyList+0xd0>)
 80030a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030b0:	bf00      	nop
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000880 	.word	0x20000880
 80030bc:	20000780 	.word	0x20000780
 80030c0:	2000088c 	.word	0x2000088c
 80030c4:	2000089c 	.word	0x2000089c
 80030c8:	20000888 	.word	0x20000888
 80030cc:	20000784 	.word	0x20000784
 80030d0:	e000ed04 	.word	0xe000ed04

080030d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80030dc:	2300      	movs	r3, #0
 80030de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d017      	beq.n	8003116 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80030e6:	4b13      	ldr	r3, [pc, #76]	; (8003134 <vTaskDelay+0x60>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <vTaskDelay+0x30>
	__asm volatile
 80030ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	60bb      	str	r3, [r7, #8]
}
 8003100:	bf00      	nop
 8003102:	e7fe      	b.n	8003102 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003104:	f000 f880 	bl	8003208 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003108:	2100      	movs	r1, #0
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fcfa 	bl	8003b04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003110:	f000 f888 	bl	8003224 <xTaskResumeAll>
 8003114:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d107      	bne.n	800312c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <vTaskDelay+0x64>)
 800311e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800312c:	bf00      	nop
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	200008a8 	.word	0x200008a8
 8003138:	e000ed04 	.word	0xe000ed04

0800313c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	; 0x28
 8003140:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003142:	2300      	movs	r3, #0
 8003144:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003146:	2300      	movs	r3, #0
 8003148:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800314a:	463a      	mov	r2, r7
 800314c:	1d39      	adds	r1, r7, #4
 800314e:	f107 0308 	add.w	r3, r7, #8
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd f9c2 	bl	80004dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003158:	6839      	ldr	r1, [r7, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	9202      	str	r2, [sp, #8]
 8003160:	9301      	str	r3, [sp, #4]
 8003162:	2300      	movs	r3, #0
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	2300      	movs	r3, #0
 8003168:	460a      	mov	r2, r1
 800316a:	4921      	ldr	r1, [pc, #132]	; (80031f0 <vTaskStartScheduler+0xb4>)
 800316c:	4821      	ldr	r0, [pc, #132]	; (80031f4 <vTaskStartScheduler+0xb8>)
 800316e:	f7ff fe1d 	bl	8002dac <xTaskCreateStatic>
 8003172:	4603      	mov	r3, r0
 8003174:	4a20      	ldr	r2, [pc, #128]	; (80031f8 <vTaskStartScheduler+0xbc>)
 8003176:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003178:	4b1f      	ldr	r3, [pc, #124]	; (80031f8 <vTaskStartScheduler+0xbc>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003180:	2301      	movs	r3, #1
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	e001      	b.n	800318a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d102      	bne.n	8003196 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003190:	f000 fd1e 	bl	8003bd0 <xTimerCreateTimerTask>
 8003194:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d116      	bne.n	80031ca <vTaskStartScheduler+0x8e>
	__asm volatile
 800319c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a0:	f383 8811 	msr	BASEPRI, r3
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	f3bf 8f4f 	dsb	sy
 80031ac:	613b      	str	r3, [r7, #16]
}
 80031ae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80031b0:	4b12      	ldr	r3, [pc, #72]	; (80031fc <vTaskStartScheduler+0xc0>)
 80031b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80031b8:	4b11      	ldr	r3, [pc, #68]	; (8003200 <vTaskStartScheduler+0xc4>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <vTaskStartScheduler+0xc8>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80031c4:	f001 f95c 	bl	8004480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80031c8:	e00e      	b.n	80031e8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031d0:	d10a      	bne.n	80031e8 <vTaskStartScheduler+0xac>
	__asm volatile
 80031d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	60fb      	str	r3, [r7, #12]
}
 80031e4:	bf00      	nop
 80031e6:	e7fe      	b.n	80031e6 <vTaskStartScheduler+0xaa>
}
 80031e8:	bf00      	nop
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	08004d0c 	.word	0x08004d0c
 80031f4:	08003811 	.word	0x08003811
 80031f8:	200008a4 	.word	0x200008a4
 80031fc:	200008a0 	.word	0x200008a0
 8003200:	2000088c 	.word	0x2000088c
 8003204:	20000884 	.word	0x20000884

08003208 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800320c:	4b04      	ldr	r3, [pc, #16]	; (8003220 <vTaskSuspendAll+0x18>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3301      	adds	r3, #1
 8003212:	4a03      	ldr	r2, [pc, #12]	; (8003220 <vTaskSuspendAll+0x18>)
 8003214:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003216:	bf00      	nop
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	200008a8 	.word	0x200008a8

08003224 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800322e:	2300      	movs	r3, #0
 8003230:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003232:	4b41      	ldr	r3, [pc, #260]	; (8003338 <xTaskResumeAll+0x114>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10a      	bne.n	8003250 <xTaskResumeAll+0x2c>
	__asm volatile
 800323a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	603b      	str	r3, [r7, #0]
}
 800324c:	bf00      	nop
 800324e:	e7fe      	b.n	800324e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003250:	f001 f9b8 	bl	80045c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003254:	4b38      	ldr	r3, [pc, #224]	; (8003338 <xTaskResumeAll+0x114>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3b01      	subs	r3, #1
 800325a:	4a37      	ldr	r2, [pc, #220]	; (8003338 <xTaskResumeAll+0x114>)
 800325c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800325e:	4b36      	ldr	r3, [pc, #216]	; (8003338 <xTaskResumeAll+0x114>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d161      	bne.n	800332a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003266:	4b35      	ldr	r3, [pc, #212]	; (800333c <xTaskResumeAll+0x118>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d05d      	beq.n	800332a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800326e:	e02e      	b.n	80032ce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003270:	4b33      	ldr	r3, [pc, #204]	; (8003340 <xTaskResumeAll+0x11c>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	3318      	adds	r3, #24
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff f883 	bl	8002388 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	3304      	adds	r3, #4
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff f87e 	bl	8002388 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	2201      	movs	r2, #1
 8003292:	409a      	lsls	r2, r3
 8003294:	4b2b      	ldr	r3, [pc, #172]	; (8003344 <xTaskResumeAll+0x120>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4313      	orrs	r3, r2
 800329a:	4a2a      	ldr	r2, [pc, #168]	; (8003344 <xTaskResumeAll+0x120>)
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4a27      	ldr	r2, [pc, #156]	; (8003348 <xTaskResumeAll+0x124>)
 80032ac:	441a      	add	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	3304      	adds	r3, #4
 80032b2:	4619      	mov	r1, r3
 80032b4:	4610      	mov	r0, r2
 80032b6:	f7ff f80a 	bl	80022ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032be:	4b23      	ldr	r3, [pc, #140]	; (800334c <xTaskResumeAll+0x128>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d302      	bcc.n	80032ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80032c8:	4b21      	ldr	r3, [pc, #132]	; (8003350 <xTaskResumeAll+0x12c>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032ce:	4b1c      	ldr	r3, [pc, #112]	; (8003340 <xTaskResumeAll+0x11c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1cc      	bne.n	8003270 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80032dc:	f000 fb4e 	bl	800397c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80032e0:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <xTaskResumeAll+0x130>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d010      	beq.n	800330e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80032ec:	f000 f846 	bl	800337c <xTaskIncrementTick>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80032f6:	4b16      	ldr	r3, [pc, #88]	; (8003350 <xTaskResumeAll+0x12c>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3b01      	subs	r3, #1
 8003300:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1f1      	bne.n	80032ec <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003308:	4b12      	ldr	r3, [pc, #72]	; (8003354 <xTaskResumeAll+0x130>)
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800330e:	4b10      	ldr	r3, [pc, #64]	; (8003350 <xTaskResumeAll+0x12c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d009      	beq.n	800332a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003316:	2301      	movs	r3, #1
 8003318:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800331a:	4b0f      	ldr	r3, [pc, #60]	; (8003358 <xTaskResumeAll+0x134>)
 800331c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800332a:	f001 f97b 	bl	8004624 <vPortExitCritical>

	return xAlreadyYielded;
 800332e:	68bb      	ldr	r3, [r7, #8]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	200008a8 	.word	0x200008a8
 800333c:	20000880 	.word	0x20000880
 8003340:	20000840 	.word	0x20000840
 8003344:	20000888 	.word	0x20000888
 8003348:	20000784 	.word	0x20000784
 800334c:	20000780 	.word	0x20000780
 8003350:	20000894 	.word	0x20000894
 8003354:	20000890 	.word	0x20000890
 8003358:	e000ed04 	.word	0xe000ed04

0800335c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <xTaskGetTickCount+0x1c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003368:	687b      	ldr	r3, [r7, #4]
}
 800336a:	4618      	mov	r0, r3
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	20000884 	.word	0x20000884

0800337c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003386:	4b4e      	ldr	r3, [pc, #312]	; (80034c0 <xTaskIncrementTick+0x144>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	f040 808e 	bne.w	80034ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003390:	4b4c      	ldr	r3, [pc, #304]	; (80034c4 <xTaskIncrementTick+0x148>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3301      	adds	r3, #1
 8003396:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003398:	4a4a      	ldr	r2, [pc, #296]	; (80034c4 <xTaskIncrementTick+0x148>)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d120      	bne.n	80033e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80033a4:	4b48      	ldr	r3, [pc, #288]	; (80034c8 <xTaskIncrementTick+0x14c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80033ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b2:	f383 8811 	msr	BASEPRI, r3
 80033b6:	f3bf 8f6f 	isb	sy
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	603b      	str	r3, [r7, #0]
}
 80033c0:	bf00      	nop
 80033c2:	e7fe      	b.n	80033c2 <xTaskIncrementTick+0x46>
 80033c4:	4b40      	ldr	r3, [pc, #256]	; (80034c8 <xTaskIncrementTick+0x14c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	4b40      	ldr	r3, [pc, #256]	; (80034cc <xTaskIncrementTick+0x150>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a3e      	ldr	r2, [pc, #248]	; (80034c8 <xTaskIncrementTick+0x14c>)
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4a3e      	ldr	r2, [pc, #248]	; (80034cc <xTaskIncrementTick+0x150>)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	4b3d      	ldr	r3, [pc, #244]	; (80034d0 <xTaskIncrementTick+0x154>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3301      	adds	r3, #1
 80033de:	4a3c      	ldr	r2, [pc, #240]	; (80034d0 <xTaskIncrementTick+0x154>)
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	f000 facb 	bl	800397c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80033e6:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <xTaskIncrementTick+0x158>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d348      	bcc.n	8003482 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033f0:	4b35      	ldr	r3, [pc, #212]	; (80034c8 <xTaskIncrementTick+0x14c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d104      	bne.n	8003404 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033fa:	4b36      	ldr	r3, [pc, #216]	; (80034d4 <xTaskIncrementTick+0x158>)
 80033fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003400:	601a      	str	r2, [r3, #0]
					break;
 8003402:	e03e      	b.n	8003482 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003404:	4b30      	ldr	r3, [pc, #192]	; (80034c8 <xTaskIncrementTick+0x14c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	429a      	cmp	r2, r3
 800341a:	d203      	bcs.n	8003424 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800341c:	4a2d      	ldr	r2, [pc, #180]	; (80034d4 <xTaskIncrementTick+0x158>)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003422:	e02e      	b.n	8003482 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	3304      	adds	r3, #4
 8003428:	4618      	mov	r0, r3
 800342a:	f7fe ffad 	bl	8002388 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	2b00      	cmp	r3, #0
 8003434:	d004      	beq.n	8003440 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	3318      	adds	r3, #24
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe ffa4 	bl	8002388 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	2201      	movs	r2, #1
 8003446:	409a      	lsls	r2, r3
 8003448:	4b23      	ldr	r3, [pc, #140]	; (80034d8 <xTaskIncrementTick+0x15c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4313      	orrs	r3, r2
 800344e:	4a22      	ldr	r2, [pc, #136]	; (80034d8 <xTaskIncrementTick+0x15c>)
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4a1f      	ldr	r2, [pc, #124]	; (80034dc <xTaskIncrementTick+0x160>)
 8003460:	441a      	add	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	3304      	adds	r3, #4
 8003466:	4619      	mov	r1, r3
 8003468:	4610      	mov	r0, r2
 800346a:	f7fe ff30 	bl	80022ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003472:	4b1b      	ldr	r3, [pc, #108]	; (80034e0 <xTaskIncrementTick+0x164>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003478:	429a      	cmp	r2, r3
 800347a:	d3b9      	bcc.n	80033f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800347c:	2301      	movs	r3, #1
 800347e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003480:	e7b6      	b.n	80033f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003482:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <xTaskIncrementTick+0x164>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003488:	4914      	ldr	r1, [pc, #80]	; (80034dc <xTaskIncrementTick+0x160>)
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d901      	bls.n	800349e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800349a:	2301      	movs	r3, #1
 800349c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800349e:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <xTaskIncrementTick+0x168>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d007      	beq.n	80034b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80034a6:	2301      	movs	r3, #1
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	e004      	b.n	80034b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80034ac:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <xTaskIncrementTick+0x16c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3301      	adds	r3, #1
 80034b2:	4a0d      	ldr	r2, [pc, #52]	; (80034e8 <xTaskIncrementTick+0x16c>)
 80034b4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80034b6:	697b      	ldr	r3, [r7, #20]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	200008a8 	.word	0x200008a8
 80034c4:	20000884 	.word	0x20000884
 80034c8:	20000838 	.word	0x20000838
 80034cc:	2000083c 	.word	0x2000083c
 80034d0:	20000898 	.word	0x20000898
 80034d4:	200008a0 	.word	0x200008a0
 80034d8:	20000888 	.word	0x20000888
 80034dc:	20000784 	.word	0x20000784
 80034e0:	20000780 	.word	0x20000780
 80034e4:	20000894 	.word	0x20000894
 80034e8:	20000890 	.word	0x20000890

080034ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034f2:	4b27      	ldr	r3, [pc, #156]	; (8003590 <vTaskSwitchContext+0xa4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80034fa:	4b26      	ldr	r3, [pc, #152]	; (8003594 <vTaskSwitchContext+0xa8>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003500:	e03f      	b.n	8003582 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003502:	4b24      	ldr	r3, [pc, #144]	; (8003594 <vTaskSwitchContext+0xa8>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003508:	4b23      	ldr	r3, [pc, #140]	; (8003598 <vTaskSwitchContext+0xac>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	fab3 f383 	clz	r3, r3
 8003514:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003516:	7afb      	ldrb	r3, [r7, #11]
 8003518:	f1c3 031f 	rsb	r3, r3, #31
 800351c:	617b      	str	r3, [r7, #20]
 800351e:	491f      	ldr	r1, [pc, #124]	; (800359c <vTaskSwitchContext+0xb0>)
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10a      	bne.n	8003548 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003536:	f383 8811 	msr	BASEPRI, r3
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	607b      	str	r3, [r7, #4]
}
 8003544:	bf00      	nop
 8003546:	e7fe      	b.n	8003546 <vTaskSwitchContext+0x5a>
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4a12      	ldr	r2, [pc, #72]	; (800359c <vTaskSwitchContext+0xb0>)
 8003554:	4413      	add	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	3308      	adds	r3, #8
 800356a:	429a      	cmp	r2, r3
 800356c:	d104      	bne.n	8003578 <vTaskSwitchContext+0x8c>
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	605a      	str	r2, [r3, #4]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	4a08      	ldr	r2, [pc, #32]	; (80035a0 <vTaskSwitchContext+0xb4>)
 8003580:	6013      	str	r3, [r2, #0]
}
 8003582:	bf00      	nop
 8003584:	371c      	adds	r7, #28
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	200008a8 	.word	0x200008a8
 8003594:	20000894 	.word	0x20000894
 8003598:	20000888 	.word	0x20000888
 800359c:	20000784 	.word	0x20000784
 80035a0:	20000780 	.word	0x20000780

080035a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10a      	bne.n	80035ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80035b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	60fb      	str	r3, [r7, #12]
}
 80035c6:	bf00      	nop
 80035c8:	e7fe      	b.n	80035c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035ca:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <vTaskPlaceOnEventList+0x44>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3318      	adds	r3, #24
 80035d0:	4619      	mov	r1, r3
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fe fe9f 	bl	8002316 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035d8:	2101      	movs	r1, #1
 80035da:	6838      	ldr	r0, [r7, #0]
 80035dc:	f000 fa92 	bl	8003b04 <prvAddCurrentTaskToDelayedList>
}
 80035e0:	bf00      	nop
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000780 	.word	0x20000780

080035ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10a      	bne.n	8003614 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80035fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003602:	f383 8811 	msr	BASEPRI, r3
 8003606:	f3bf 8f6f 	isb	sy
 800360a:	f3bf 8f4f 	dsb	sy
 800360e:	617b      	str	r3, [r7, #20]
}
 8003610:	bf00      	nop
 8003612:	e7fe      	b.n	8003612 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003614:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <vTaskPlaceOnEventListRestricted+0x54>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	3318      	adds	r3, #24
 800361a:	4619      	mov	r1, r3
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f7fe fe56 	bl	80022ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800362c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	68b8      	ldr	r0, [r7, #8]
 8003632:	f000 fa67 	bl	8003b04 <prvAddCurrentTaskToDelayedList>
	}
 8003636:	bf00      	nop
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20000780 	.word	0x20000780

08003644 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10a      	bne.n	8003670 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800365a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365e:	f383 8811 	msr	BASEPRI, r3
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	60fb      	str	r3, [r7, #12]
}
 800366c:	bf00      	nop
 800366e:	e7fe      	b.n	800366e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	3318      	adds	r3, #24
 8003674:	4618      	mov	r0, r3
 8003676:	f7fe fe87 	bl	8002388 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800367a:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <xTaskRemoveFromEventList+0xac>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d11c      	bne.n	80036bc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	3304      	adds	r3, #4
 8003686:	4618      	mov	r0, r3
 8003688:	f7fe fe7e 	bl	8002388 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	2201      	movs	r2, #1
 8003692:	409a      	lsls	r2, r3
 8003694:	4b17      	ldr	r3, [pc, #92]	; (80036f4 <xTaskRemoveFromEventList+0xb0>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4313      	orrs	r3, r2
 800369a:	4a16      	ldr	r2, [pc, #88]	; (80036f4 <xTaskRemoveFromEventList+0xb0>)
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4a13      	ldr	r2, [pc, #76]	; (80036f8 <xTaskRemoveFromEventList+0xb4>)
 80036ac:	441a      	add	r2, r3
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	3304      	adds	r3, #4
 80036b2:	4619      	mov	r1, r3
 80036b4:	4610      	mov	r0, r2
 80036b6:	f7fe fe0a 	bl	80022ce <vListInsertEnd>
 80036ba:	e005      	b.n	80036c8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	3318      	adds	r3, #24
 80036c0:	4619      	mov	r1, r3
 80036c2:	480e      	ldr	r0, [pc, #56]	; (80036fc <xTaskRemoveFromEventList+0xb8>)
 80036c4:	f7fe fe03 	bl	80022ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <xTaskRemoveFromEventList+0xbc>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d905      	bls.n	80036e2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80036d6:	2301      	movs	r3, #1
 80036d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <xTaskRemoveFromEventList+0xc0>)
 80036dc:	2201      	movs	r2, #1
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	e001      	b.n	80036e6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80036e6:	697b      	ldr	r3, [r7, #20]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	200008a8 	.word	0x200008a8
 80036f4:	20000888 	.word	0x20000888
 80036f8:	20000784 	.word	0x20000784
 80036fc:	20000840 	.word	0x20000840
 8003700:	20000780 	.word	0x20000780
 8003704:	20000894 	.word	0x20000894

08003708 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003710:	4b06      	ldr	r3, [pc, #24]	; (800372c <vTaskInternalSetTimeOutState+0x24>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <vTaskInternalSetTimeOutState+0x28>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	605a      	str	r2, [r3, #4]
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	20000898 	.word	0x20000898
 8003730:	20000884 	.word	0x20000884

08003734 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10a      	bne.n	800375a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003748:	f383 8811 	msr	BASEPRI, r3
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	613b      	str	r3, [r7, #16]
}
 8003756:	bf00      	nop
 8003758:	e7fe      	b.n	8003758 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10a      	bne.n	8003776 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003764:	f383 8811 	msr	BASEPRI, r3
 8003768:	f3bf 8f6f 	isb	sy
 800376c:	f3bf 8f4f 	dsb	sy
 8003770:	60fb      	str	r3, [r7, #12]
}
 8003772:	bf00      	nop
 8003774:	e7fe      	b.n	8003774 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003776:	f000 ff25 	bl	80045c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800377a:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <xTaskCheckForTimeOut+0xbc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003792:	d102      	bne.n	800379a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]
 8003798:	e023      	b.n	80037e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <xTaskCheckForTimeOut+0xc0>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d007      	beq.n	80037b6 <xTaskCheckForTimeOut+0x82>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d302      	bcc.n	80037b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80037b0:	2301      	movs	r3, #1
 80037b2:	61fb      	str	r3, [r7, #28]
 80037b4:	e015      	b.n	80037e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d20b      	bcs.n	80037d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	1ad2      	subs	r2, r2, r3
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff ff9b 	bl	8003708 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61fb      	str	r3, [r7, #28]
 80037d6:	e004      	b.n	80037e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80037de:	2301      	movs	r3, #1
 80037e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80037e2:	f000 ff1f 	bl	8004624 <vPortExitCritical>

	return xReturn;
 80037e6:	69fb      	ldr	r3, [r7, #28]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3720      	adds	r7, #32
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	20000884 	.word	0x20000884
 80037f4:	20000898 	.word	0x20000898

080037f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80037fc:	4b03      	ldr	r3, [pc, #12]	; (800380c <vTaskMissedYield+0x14>)
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]
}
 8003802:	bf00      	nop
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	20000894 	.word	0x20000894

08003810 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003818:	f000 f852 	bl	80038c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <prvIdleTask+0x28>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d9f9      	bls.n	8003818 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <prvIdleTask+0x2c>)
 8003826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	f3bf 8f4f 	dsb	sy
 8003830:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003834:	e7f0      	b.n	8003818 <prvIdleTask+0x8>
 8003836:	bf00      	nop
 8003838:	20000784 	.word	0x20000784
 800383c:	e000ed04 	.word	0xe000ed04

08003840 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003846:	2300      	movs	r3, #0
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	e00c      	b.n	8003866 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4a12      	ldr	r2, [pc, #72]	; (80038a0 <prvInitialiseTaskLists+0x60>)
 8003858:	4413      	add	r3, r2
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe fd0a 	bl	8002274 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3301      	adds	r3, #1
 8003864:	607b      	str	r3, [r7, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2b06      	cmp	r3, #6
 800386a:	d9ef      	bls.n	800384c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800386c:	480d      	ldr	r0, [pc, #52]	; (80038a4 <prvInitialiseTaskLists+0x64>)
 800386e:	f7fe fd01 	bl	8002274 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003872:	480d      	ldr	r0, [pc, #52]	; (80038a8 <prvInitialiseTaskLists+0x68>)
 8003874:	f7fe fcfe 	bl	8002274 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003878:	480c      	ldr	r0, [pc, #48]	; (80038ac <prvInitialiseTaskLists+0x6c>)
 800387a:	f7fe fcfb 	bl	8002274 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800387e:	480c      	ldr	r0, [pc, #48]	; (80038b0 <prvInitialiseTaskLists+0x70>)
 8003880:	f7fe fcf8 	bl	8002274 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003884:	480b      	ldr	r0, [pc, #44]	; (80038b4 <prvInitialiseTaskLists+0x74>)
 8003886:	f7fe fcf5 	bl	8002274 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800388a:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <prvInitialiseTaskLists+0x78>)
 800388c:	4a05      	ldr	r2, [pc, #20]	; (80038a4 <prvInitialiseTaskLists+0x64>)
 800388e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <prvInitialiseTaskLists+0x7c>)
 8003892:	4a05      	ldr	r2, [pc, #20]	; (80038a8 <prvInitialiseTaskLists+0x68>)
 8003894:	601a      	str	r2, [r3, #0]
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000784 	.word	0x20000784
 80038a4:	20000810 	.word	0x20000810
 80038a8:	20000824 	.word	0x20000824
 80038ac:	20000840 	.word	0x20000840
 80038b0:	20000854 	.word	0x20000854
 80038b4:	2000086c 	.word	0x2000086c
 80038b8:	20000838 	.word	0x20000838
 80038bc:	2000083c 	.word	0x2000083c

080038c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038c6:	e019      	b.n	80038fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80038c8:	f000 fe7c 	bl	80045c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038cc:	4b10      	ldr	r3, [pc, #64]	; (8003910 <prvCheckTasksWaitingTermination+0x50>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3304      	adds	r3, #4
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fe fd55 	bl	8002388 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80038de:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <prvCheckTasksWaitingTermination+0x54>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	4a0b      	ldr	r2, [pc, #44]	; (8003914 <prvCheckTasksWaitingTermination+0x54>)
 80038e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <prvCheckTasksWaitingTermination+0x58>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <prvCheckTasksWaitingTermination+0x58>)
 80038f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80038f2:	f000 fe97 	bl	8004624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f810 	bl	800391c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <prvCheckTasksWaitingTermination+0x58>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e1      	bne.n	80038c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003904:	bf00      	nop
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000854 	.word	0x20000854
 8003914:	20000880 	.word	0x20000880
 8003918:	20000868 	.word	0x20000868

0800391c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800392a:	2b00      	cmp	r3, #0
 800392c:	d108      	bne.n	8003940 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	4618      	mov	r0, r3
 8003934:	f001 f834 	bl	80049a0 <vPortFree>
				vPortFree( pxTCB );
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f001 f831 	bl	80049a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800393e:	e018      	b.n	8003972 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003946:	2b01      	cmp	r3, #1
 8003948:	d103      	bne.n	8003952 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f001 f828 	bl	80049a0 <vPortFree>
	}
 8003950:	e00f      	b.n	8003972 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003958:	2b02      	cmp	r3, #2
 800395a:	d00a      	beq.n	8003972 <prvDeleteTCB+0x56>
	__asm volatile
 800395c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	60fb      	str	r3, [r7, #12]
}
 800396e:	bf00      	nop
 8003970:	e7fe      	b.n	8003970 <prvDeleteTCB+0x54>
	}
 8003972:	bf00      	nop
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003982:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <prvResetNextTaskUnblockTime+0x38>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d104      	bne.n	8003996 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800398c:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <prvResetNextTaskUnblockTime+0x3c>)
 800398e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003992:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003994:	e008      	b.n	80039a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003996:	4b07      	ldr	r3, [pc, #28]	; (80039b4 <prvResetNextTaskUnblockTime+0x38>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	4a04      	ldr	r2, [pc, #16]	; (80039b8 <prvResetNextTaskUnblockTime+0x3c>)
 80039a6:	6013      	str	r3, [r2, #0]
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	20000838 	.word	0x20000838
 80039b8:	200008a0 	.word	0x200008a0

080039bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80039c2:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <xTaskGetSchedulerState+0x34>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80039ca:	2301      	movs	r3, #1
 80039cc:	607b      	str	r3, [r7, #4]
 80039ce:	e008      	b.n	80039e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039d0:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <xTaskGetSchedulerState+0x38>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d102      	bne.n	80039de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80039d8:	2302      	movs	r3, #2
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	e001      	b.n	80039e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80039de:	2300      	movs	r3, #0
 80039e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80039e2:	687b      	ldr	r3, [r7, #4]
	}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	2000088c 	.word	0x2000088c
 80039f4:	200008a8 	.word	0x200008a8

080039f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d06e      	beq.n	8003aec <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003a0e:	4b3a      	ldr	r3, [pc, #232]	; (8003af8 <xTaskPriorityDisinherit+0x100>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d00a      	beq.n	8003a2e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	60fb      	str	r3, [r7, #12]
}
 8003a2a:	bf00      	nop
 8003a2c:	e7fe      	b.n	8003a2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10a      	bne.n	8003a4c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	60bb      	str	r3, [r7, #8]
}
 8003a48:	bf00      	nop
 8003a4a:	e7fe      	b.n	8003a4a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a50:	1e5a      	subs	r2, r3, #1
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d044      	beq.n	8003aec <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d140      	bne.n	8003aec <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe fc8a 	bl	8002388 <uxListRemove>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d115      	bne.n	8003aa6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7e:	491f      	ldr	r1, [pc, #124]	; (8003afc <xTaskPriorityDisinherit+0x104>)
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <xTaskPriorityDisinherit+0xae>
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	2201      	movs	r2, #1
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43da      	mvns	r2, r3
 8003a9c:	4b18      	ldr	r3, [pc, #96]	; (8003b00 <xTaskPriorityDisinherit+0x108>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	4a17      	ldr	r2, [pc, #92]	; (8003b00 <xTaskPriorityDisinherit+0x108>)
 8003aa4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	f1c3 0207 	rsb	r2, r3, #7
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abe:	2201      	movs	r2, #1
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <xTaskPriorityDisinherit+0x108>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	4a0d      	ldr	r2, [pc, #52]	; (8003b00 <xTaskPriorityDisinherit+0x108>)
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4a08      	ldr	r2, [pc, #32]	; (8003afc <xTaskPriorityDisinherit+0x104>)
 8003ada:	441a      	add	r2, r3
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f7fe fbf3 	bl	80022ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003aec:	697b      	ldr	r3, [r7, #20]
	}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000780 	.word	0x20000780
 8003afc:	20000784 	.word	0x20000784
 8003b00:	20000888 	.word	0x20000888

08003b04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b0e:	4b29      	ldr	r3, [pc, #164]	; (8003bb4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b14:	4b28      	ldr	r3, [pc, #160]	; (8003bb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fe fc34 	bl	8002388 <uxListRemove>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10b      	bne.n	8003b3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b26:	4b24      	ldr	r3, [pc, #144]	; (8003bb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43da      	mvns	r2, r3
 8003b34:	4b21      	ldr	r3, [pc, #132]	; (8003bbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	4a20      	ldr	r2, [pc, #128]	; (8003bbc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b44:	d10a      	bne.n	8003b5c <prvAddCurrentTaskToDelayedList+0x58>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b4c:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3304      	adds	r3, #4
 8003b52:	4619      	mov	r1, r3
 8003b54:	481a      	ldr	r0, [pc, #104]	; (8003bc0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003b56:	f7fe fbba 	bl	80022ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b5a:	e026      	b.n	8003baa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4413      	add	r3, r2
 8003b62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b64:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d209      	bcs.n	8003b88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b74:	4b13      	ldr	r3, [pc, #76]	; (8003bc4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	4b0f      	ldr	r3, [pc, #60]	; (8003bb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4610      	mov	r0, r2
 8003b82:	f7fe fbc8 	bl	8002316 <vListInsert>
}
 8003b86:	e010      	b.n	8003baa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b88:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3304      	adds	r3, #4
 8003b92:	4619      	mov	r1, r3
 8003b94:	4610      	mov	r0, r2
 8003b96:	f7fe fbbe 	bl	8002316 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d202      	bcs.n	8003baa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003ba4:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	6013      	str	r3, [r2, #0]
}
 8003baa:	bf00      	nop
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000884 	.word	0x20000884
 8003bb8:	20000780 	.word	0x20000780
 8003bbc:	20000888 	.word	0x20000888
 8003bc0:	2000086c 	.word	0x2000086c
 8003bc4:	2000083c 	.word	0x2000083c
 8003bc8:	20000838 	.word	0x20000838
 8003bcc:	200008a0 	.word	0x200008a0

08003bd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08a      	sub	sp, #40	; 0x28
 8003bd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003bda:	f000 fb85 	bl	80042e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003bde:	4b1c      	ldr	r3, [pc, #112]	; (8003c50 <xTimerCreateTimerTask+0x80>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d021      	beq.n	8003c2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003bee:	1d3a      	adds	r2, r7, #4
 8003bf0:	f107 0108 	add.w	r1, r7, #8
 8003bf4:	f107 030c 	add.w	r3, r7, #12
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fc fc89 	bl	8000510 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	9202      	str	r2, [sp, #8]
 8003c06:	9301      	str	r3, [sp, #4]
 8003c08:	2302      	movs	r3, #2
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	460a      	mov	r2, r1
 8003c10:	4910      	ldr	r1, [pc, #64]	; (8003c54 <xTimerCreateTimerTask+0x84>)
 8003c12:	4811      	ldr	r0, [pc, #68]	; (8003c58 <xTimerCreateTimerTask+0x88>)
 8003c14:	f7ff f8ca 	bl	8002dac <xTaskCreateStatic>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	4a10      	ldr	r2, [pc, #64]	; (8003c5c <xTimerCreateTimerTask+0x8c>)
 8003c1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003c1e:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <xTimerCreateTimerTask+0x8c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003c26:	2301      	movs	r3, #1
 8003c28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	613b      	str	r3, [r7, #16]
}
 8003c42:	bf00      	nop
 8003c44:	e7fe      	b.n	8003c44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003c46:	697b      	ldr	r3, [r7, #20]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	200008dc 	.word	0x200008dc
 8003c54:	08004d14 	.word	0x08004d14
 8003c58:	08003ec9 	.word	0x08003ec9
 8003c5c:	200008e0 	.word	0x200008e0

08003c60 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8003c6e:	2028      	movs	r0, #40	; 0x28
 8003c70:	f000 fdca 	bl	8004808 <pvPortMalloc>
 8003c74:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00d      	beq.n	8003c98 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	9301      	str	r3, [sp, #4]
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 f843 	bl	8003d1e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8003c98:	697b      	ldr	r3, [r7, #20]
	}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b08a      	sub	sp, #40	; 0x28
 8003ca6:	af02      	add	r7, sp, #8
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	607a      	str	r2, [r7, #4]
 8003cae:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8003cb0:	2328      	movs	r3, #40	; 0x28
 8003cb2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	2b28      	cmp	r3, #40	; 0x28
 8003cb8:	d00a      	beq.n	8003cd0 <xTimerCreateStatic+0x2e>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	61bb      	str	r3, [r7, #24]
}
 8003ccc:	bf00      	nop
 8003cce:	e7fe      	b.n	8003cce <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003cd0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8003cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10a      	bne.n	8003cee <xTimerCreateStatic+0x4c>
	__asm volatile
 8003cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cdc:	f383 8811 	msr	BASEPRI, r3
 8003ce0:	f3bf 8f6f 	isb	sy
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	617b      	str	r3, [r7, #20]
}
 8003cea:	bf00      	nop
 8003cec:	e7fe      	b.n	8003cec <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8003cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00d      	beq.n	8003d14 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	9301      	str	r3, [sp, #4]
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 f805 	bl	8003d1e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8003d14:	69fb      	ldr	r3, [r7, #28]
	}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3720      	adds	r7, #32
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b086      	sub	sp, #24
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	607a      	str	r2, [r7, #4]
 8003d2a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10a      	bne.n	8003d48 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8003d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	617b      	str	r3, [r7, #20]
}
 8003d44:	bf00      	nop
 8003d46:	e7fe      	b.n	8003d46 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d01e      	beq.n	8003d8c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8003d4e:	f000 facb 	bl	80042e8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	6a3a      	ldr	r2, [r7, #32]
 8003d68:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fe faa0 	bl	80022b4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d80:	f043 0304 	orr.w	r3, r3, #4
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8003d8c:	bf00      	nop
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08a      	sub	sp, #40	; 0x28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10a      	bne.n	8003dc2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	623b      	str	r3, [r7, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	e7fe      	b.n	8003dc0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003dc2:	4b1a      	ldr	r3, [pc, #104]	; (8003e2c <xTimerGenericCommand+0x98>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d02a      	beq.n	8003e20 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b05      	cmp	r3, #5
 8003dda:	dc18      	bgt.n	8003e0e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ddc:	f7ff fdee 	bl	80039bc <xTaskGetSchedulerState>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d109      	bne.n	8003dfa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003de6:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <xTimerGenericCommand+0x98>)
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	f107 0114 	add.w	r1, r7, #20
 8003dee:	2300      	movs	r3, #0
 8003df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003df2:	f7fe fbf3 	bl	80025dc <xQueueGenericSend>
 8003df6:	6278      	str	r0, [r7, #36]	; 0x24
 8003df8:	e012      	b.n	8003e20 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003dfa:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <xTimerGenericCommand+0x98>)
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	f107 0114 	add.w	r1, r7, #20
 8003e02:	2300      	movs	r3, #0
 8003e04:	2200      	movs	r2, #0
 8003e06:	f7fe fbe9 	bl	80025dc <xQueueGenericSend>
 8003e0a:	6278      	str	r0, [r7, #36]	; 0x24
 8003e0c:	e008      	b.n	8003e20 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e0e:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <xTimerGenericCommand+0x98>)
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	f107 0114 	add.w	r1, r7, #20
 8003e16:	2300      	movs	r3, #0
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	f7fe fcdd 	bl	80027d8 <xQueueGenericSendFromISR>
 8003e1e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3728      	adds	r7, #40	; 0x28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	200008dc 	.word	0x200008dc

08003e30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e3a:	4b22      	ldr	r3, [pc, #136]	; (8003ec4 <prvProcessExpiredTimer+0x94>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	3304      	adds	r3, #4
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fe fa9d 	bl	8002388 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d022      	beq.n	8003ea2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	699a      	ldr	r2, [r3, #24]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	18d1      	adds	r1, r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	6978      	ldr	r0, [r7, #20]
 8003e6a:	f000 f8d1 	bl	8004010 <prvInsertTimerInActiveList>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d01f      	beq.n	8003eb4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003e74:	2300      	movs	r3, #0
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	2300      	movs	r3, #0
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	6978      	ldr	r0, [r7, #20]
 8003e80:	f7ff ff88 	bl	8003d94 <xTimerGenericCommand>
 8003e84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d113      	bne.n	8003eb4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	60fb      	str	r3, [r7, #12]
}
 8003e9e:	bf00      	nop
 8003ea0:	e7fe      	b.n	8003ea0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ea8:	f023 0301 	bic.w	r3, r3, #1
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	6978      	ldr	r0, [r7, #20]
 8003eba:	4798      	blx	r3
}
 8003ebc:	bf00      	nop
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	200008d4 	.word	0x200008d4

08003ec8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ed0:	f107 0308 	add.w	r3, r7, #8
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 f857 	bl	8003f88 <prvGetNextExpireTime>
 8003eda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4619      	mov	r1, r3
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f803 	bl	8003eec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003ee6:	f000 f8d5 	bl	8004094 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003eea:	e7f1      	b.n	8003ed0 <prvTimerTask+0x8>

08003eec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003ef6:	f7ff f987 	bl	8003208 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003efa:	f107 0308 	add.w	r3, r7, #8
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 f866 	bl	8003fd0 <prvSampleTimeNow>
 8003f04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d130      	bne.n	8003f6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <prvProcessTimerOrBlockTask+0x3c>
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d806      	bhi.n	8003f28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003f1a:	f7ff f983 	bl	8003224 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f1e:	68f9      	ldr	r1, [r7, #12]
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f7ff ff85 	bl	8003e30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003f26:	e024      	b.n	8003f72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d008      	beq.n	8003f40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f2e:	4b13      	ldr	r3, [pc, #76]	; (8003f7c <prvProcessTimerOrBlockTask+0x90>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <prvProcessTimerOrBlockTask+0x50>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <prvProcessTimerOrBlockTask+0x52>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f40:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <prvProcessTimerOrBlockTask+0x94>)
 8003f42:	6818      	ldr	r0, [r3, #0]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	f7fe fef9 	bl	8002d44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003f52:	f7ff f967 	bl	8003224 <xTaskResumeAll>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10a      	bne.n	8003f72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003f5c:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <prvProcessTimerOrBlockTask+0x98>)
 8003f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	f3bf 8f6f 	isb	sy
}
 8003f6c:	e001      	b.n	8003f72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003f6e:	f7ff f959 	bl	8003224 <xTaskResumeAll>
}
 8003f72:	bf00      	nop
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	200008d8 	.word	0x200008d8
 8003f80:	200008dc 	.word	0x200008dc
 8003f84:	e000ed04 	.word	0xe000ed04

08003f88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003f90:	4b0e      	ldr	r3, [pc, #56]	; (8003fcc <prvGetNextExpireTime+0x44>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <prvGetNextExpireTime+0x16>
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	e000      	b.n	8003fa0 <prvGetNextExpireTime+0x18>
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d105      	bne.n	8003fb8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fac:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <prvGetNextExpireTime+0x44>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60fb      	str	r3, [r7, #12]
 8003fb6:	e001      	b.n	8003fbc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	200008d4 	.word	0x200008d4

08003fd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003fd8:	f7ff f9c0 	bl	800335c <xTaskGetTickCount>
 8003fdc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003fde:	4b0b      	ldr	r3, [pc, #44]	; (800400c <prvSampleTimeNow+0x3c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d205      	bcs.n	8003ff4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003fe8:	f000 f91a 	bl	8004220 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	e002      	b.n	8003ffa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003ffa:	4a04      	ldr	r2, [pc, #16]	; (800400c <prvSampleTimeNow+0x3c>)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004000:	68fb      	ldr	r3, [r7, #12]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	200008e4 	.word	0x200008e4

08004010 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	429a      	cmp	r2, r3
 8004034:	d812      	bhi.n	800405c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	1ad2      	subs	r2, r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	429a      	cmp	r2, r3
 8004042:	d302      	bcc.n	800404a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004044:	2301      	movs	r3, #1
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	e01b      	b.n	8004082 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800404a:	4b10      	ldr	r3, [pc, #64]	; (800408c <prvInsertTimerInActiveList+0x7c>)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3304      	adds	r3, #4
 8004052:	4619      	mov	r1, r3
 8004054:	4610      	mov	r0, r2
 8004056:	f7fe f95e 	bl	8002316 <vListInsert>
 800405a:	e012      	b.n	8004082 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d206      	bcs.n	8004072 <prvInsertTimerInActiveList+0x62>
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d302      	bcc.n	8004072 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800406c:	2301      	movs	r3, #1
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	e007      	b.n	8004082 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004072:	4b07      	ldr	r3, [pc, #28]	; (8004090 <prvInsertTimerInActiveList+0x80>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3304      	adds	r3, #4
 800407a:	4619      	mov	r1, r3
 800407c:	4610      	mov	r0, r2
 800407e:	f7fe f94a 	bl	8002316 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004082:	697b      	ldr	r3, [r7, #20]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	200008d8 	.word	0x200008d8
 8004090:	200008d4 	.word	0x200008d4

08004094 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08c      	sub	sp, #48	; 0x30
 8004098:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800409a:	e0ae      	b.n	80041fa <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f2c0 80ab 	blt.w	80041fa <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80040a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d004      	beq.n	80040ba <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b2:	3304      	adds	r3, #4
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fe f967 	bl	8002388 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040ba:	1d3b      	adds	r3, r7, #4
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff ff87 	bl	8003fd0 <prvSampleTimeNow>
 80040c2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b09      	cmp	r3, #9
 80040c8:	f200 8096 	bhi.w	80041f8 <prvProcessReceivedCommands+0x164>
 80040cc:	a201      	add	r2, pc, #4	; (adr r2, 80040d4 <prvProcessReceivedCommands+0x40>)
 80040ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d2:	bf00      	nop
 80040d4:	080040fd 	.word	0x080040fd
 80040d8:	080040fd 	.word	0x080040fd
 80040dc:	080040fd 	.word	0x080040fd
 80040e0:	08004171 	.word	0x08004171
 80040e4:	08004185 	.word	0x08004185
 80040e8:	080041cf 	.word	0x080041cf
 80040ec:	080040fd 	.word	0x080040fd
 80040f0:	080040fd 	.word	0x080040fd
 80040f4:	08004171 	.word	0x08004171
 80040f8:	08004185 	.word	0x08004185
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	b2da      	uxtb	r2, r3
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	18d1      	adds	r1, r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6a3a      	ldr	r2, [r7, #32]
 800411a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800411c:	f7ff ff78 	bl	8004010 <prvInsertTimerInActiveList>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d069      	beq.n	80041fa <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800412c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d05e      	beq.n	80041fa <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	441a      	add	r2, r3
 8004144:	2300      	movs	r3, #0
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	2300      	movs	r3, #0
 800414a:	2100      	movs	r1, #0
 800414c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800414e:	f7ff fe21 	bl	8003d94 <xTimerGenericCommand>
 8004152:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d14f      	bne.n	80041fa <prvProcessReceivedCommands+0x166>
	__asm volatile
 800415a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415e:	f383 8811 	msr	BASEPRI, r3
 8004162:	f3bf 8f6f 	isb	sy
 8004166:	f3bf 8f4f 	dsb	sy
 800416a:	61bb      	str	r3, [r7, #24]
}
 800416c:	bf00      	nop
 800416e:	e7fe      	b.n	800416e <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	b2da      	uxtb	r2, r3
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8004182:	e03a      	b.n	80041fa <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	b2da      	uxtb	r2, r3
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <prvProcessReceivedCommands+0x126>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	617b      	str	r3, [r7, #20]
}
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	699a      	ldr	r2, [r3, #24]
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	18d1      	adds	r1, r2, r3
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	6a3a      	ldr	r2, [r7, #32]
 80041c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041c8:	f7ff ff22 	bl	8004010 <prvInsertTimerInActiveList>
					break;
 80041cc:	e015      	b.n	80041fa <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d103      	bne.n	80041e4 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80041dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041de:	f000 fbdf 	bl	80049a0 <vPortFree>
 80041e2:	e00a      	b.n	80041fa <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80041f6:	e000      	b.n	80041fa <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 80041f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041fa:	4b08      	ldr	r3, [pc, #32]	; (800421c <prvProcessReceivedCommands+0x188>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f107 0108 	add.w	r1, r7, #8
 8004202:	2200      	movs	r2, #0
 8004204:	4618      	mov	r0, r3
 8004206:	f7fe fb83 	bl	8002910 <xQueueReceive>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	f47f af45 	bne.w	800409c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004212:	bf00      	nop
 8004214:	bf00      	nop
 8004216:	3728      	adds	r7, #40	; 0x28
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	200008dc 	.word	0x200008dc

08004220 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004226:	e048      	b.n	80042ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004228:	4b2d      	ldr	r3, [pc, #180]	; (80042e0 <prvSwitchTimerLists+0xc0>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004232:	4b2b      	ldr	r3, [pc, #172]	; (80042e0 <prvSwitchTimerLists+0xc0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3304      	adds	r3, #4
 8004240:	4618      	mov	r0, r3
 8004242:	f7fe f8a1 	bl	8002388 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d02e      	beq.n	80042ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4413      	add	r3, r2
 8004264:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	429a      	cmp	r2, r3
 800426c:	d90e      	bls.n	800428c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800427a:	4b19      	ldr	r3, [pc, #100]	; (80042e0 <prvSwitchTimerLists+0xc0>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3304      	adds	r3, #4
 8004282:	4619      	mov	r1, r3
 8004284:	4610      	mov	r0, r2
 8004286:	f7fe f846 	bl	8002316 <vListInsert>
 800428a:	e016      	b.n	80042ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800428c:	2300      	movs	r3, #0
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	2300      	movs	r3, #0
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	2100      	movs	r1, #0
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f7ff fd7c 	bl	8003d94 <xTimerGenericCommand>
 800429c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10a      	bne.n	80042ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	603b      	str	r3, [r7, #0]
}
 80042b6:	bf00      	nop
 80042b8:	e7fe      	b.n	80042b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042ba:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <prvSwitchTimerLists+0xc0>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1b1      	bne.n	8004228 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80042c4:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <prvSwitchTimerLists+0xc0>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80042ca:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <prvSwitchTimerLists+0xc4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a04      	ldr	r2, [pc, #16]	; (80042e0 <prvSwitchTimerLists+0xc0>)
 80042d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80042d2:	4a04      	ldr	r2, [pc, #16]	; (80042e4 <prvSwitchTimerLists+0xc4>)
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	6013      	str	r3, [r2, #0]
}
 80042d8:	bf00      	nop
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	200008d4 	.word	0x200008d4
 80042e4:	200008d8 	.word	0x200008d8

080042e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80042ee:	f000 f969 	bl	80045c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80042f2:	4b15      	ldr	r3, [pc, #84]	; (8004348 <prvCheckForValidListAndQueue+0x60>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d120      	bne.n	800433c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80042fa:	4814      	ldr	r0, [pc, #80]	; (800434c <prvCheckForValidListAndQueue+0x64>)
 80042fc:	f7fd ffba 	bl	8002274 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004300:	4813      	ldr	r0, [pc, #76]	; (8004350 <prvCheckForValidListAndQueue+0x68>)
 8004302:	f7fd ffb7 	bl	8002274 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004306:	4b13      	ldr	r3, [pc, #76]	; (8004354 <prvCheckForValidListAndQueue+0x6c>)
 8004308:	4a10      	ldr	r2, [pc, #64]	; (800434c <prvCheckForValidListAndQueue+0x64>)
 800430a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800430c:	4b12      	ldr	r3, [pc, #72]	; (8004358 <prvCheckForValidListAndQueue+0x70>)
 800430e:	4a10      	ldr	r2, [pc, #64]	; (8004350 <prvCheckForValidListAndQueue+0x68>)
 8004310:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004312:	2300      	movs	r3, #0
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	4b11      	ldr	r3, [pc, #68]	; (800435c <prvCheckForValidListAndQueue+0x74>)
 8004318:	4a11      	ldr	r2, [pc, #68]	; (8004360 <prvCheckForValidListAndQueue+0x78>)
 800431a:	210c      	movs	r1, #12
 800431c:	200a      	movs	r0, #10
 800431e:	f7fe f8c5 	bl	80024ac <xQueueGenericCreateStatic>
 8004322:	4603      	mov	r3, r0
 8004324:	4a08      	ldr	r2, [pc, #32]	; (8004348 <prvCheckForValidListAndQueue+0x60>)
 8004326:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004328:	4b07      	ldr	r3, [pc, #28]	; (8004348 <prvCheckForValidListAndQueue+0x60>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d005      	beq.n	800433c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004330:	4b05      	ldr	r3, [pc, #20]	; (8004348 <prvCheckForValidListAndQueue+0x60>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	490b      	ldr	r1, [pc, #44]	; (8004364 <prvCheckForValidListAndQueue+0x7c>)
 8004336:	4618      	mov	r0, r3
 8004338:	f7fe fcda 	bl	8002cf0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800433c:	f000 f972 	bl	8004624 <vPortExitCritical>
}
 8004340:	bf00      	nop
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	200008dc 	.word	0x200008dc
 800434c:	200008ac 	.word	0x200008ac
 8004350:	200008c0 	.word	0x200008c0
 8004354:	200008d4 	.word	0x200008d4
 8004358:	200008d8 	.word	0x200008d8
 800435c:	20000960 	.word	0x20000960
 8004360:	200008e8 	.word	0x200008e8
 8004364:	08004d1c 	.word	0x08004d1c

08004368 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3b04      	subs	r3, #4
 8004378:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	3b04      	subs	r3, #4
 8004386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f023 0201 	bic.w	r2, r3, #1
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3b04      	subs	r3, #4
 8004396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004398:	4a0c      	ldr	r2, [pc, #48]	; (80043cc <pxPortInitialiseStack+0x64>)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	3b14      	subs	r3, #20
 80043a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3b04      	subs	r3, #4
 80043ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f06f 0202 	mvn.w	r2, #2
 80043b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3b20      	subs	r3, #32
 80043bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80043be:	68fb      	ldr	r3, [r7, #12]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	080043d1 	.word	0x080043d1

080043d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80043d6:	2300      	movs	r3, #0
 80043d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80043da:	4b12      	ldr	r3, [pc, #72]	; (8004424 <prvTaskExitError+0x54>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043e2:	d00a      	beq.n	80043fa <prvTaskExitError+0x2a>
	__asm volatile
 80043e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	60fb      	str	r3, [r7, #12]
}
 80043f6:	bf00      	nop
 80043f8:	e7fe      	b.n	80043f8 <prvTaskExitError+0x28>
	__asm volatile
 80043fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	60bb      	str	r3, [r7, #8]
}
 800440c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800440e:	bf00      	nop
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0fc      	beq.n	8004410 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004416:	bf00      	nop
 8004418:	bf00      	nop
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	2000000c 	.word	0x2000000c
	...

08004430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004430:	4b07      	ldr	r3, [pc, #28]	; (8004450 <pxCurrentTCBConst2>)
 8004432:	6819      	ldr	r1, [r3, #0]
 8004434:	6808      	ldr	r0, [r1, #0]
 8004436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443a:	f380 8809 	msr	PSP, r0
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f380 8811 	msr	BASEPRI, r0
 800444a:	4770      	bx	lr
 800444c:	f3af 8000 	nop.w

08004450 <pxCurrentTCBConst2>:
 8004450:	20000780 	.word	0x20000780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004454:	bf00      	nop
 8004456:	bf00      	nop

08004458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004458:	4808      	ldr	r0, [pc, #32]	; (800447c <prvPortStartFirstTask+0x24>)
 800445a:	6800      	ldr	r0, [r0, #0]
 800445c:	6800      	ldr	r0, [r0, #0]
 800445e:	f380 8808 	msr	MSP, r0
 8004462:	f04f 0000 	mov.w	r0, #0
 8004466:	f380 8814 	msr	CONTROL, r0
 800446a:	b662      	cpsie	i
 800446c:	b661      	cpsie	f
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	df00      	svc	0
 8004478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800447a:	bf00      	nop
 800447c:	e000ed08 	.word	0xe000ed08

08004480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004486:	4b46      	ldr	r3, [pc, #280]	; (80045a0 <xPortStartScheduler+0x120>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a46      	ldr	r2, [pc, #280]	; (80045a4 <xPortStartScheduler+0x124>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d10a      	bne.n	80044a6 <xPortStartScheduler+0x26>
	__asm volatile
 8004490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	613b      	str	r3, [r7, #16]
}
 80044a2:	bf00      	nop
 80044a4:	e7fe      	b.n	80044a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044a6:	4b3e      	ldr	r3, [pc, #248]	; (80045a0 <xPortStartScheduler+0x120>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a3f      	ldr	r2, [pc, #252]	; (80045a8 <xPortStartScheduler+0x128>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d10a      	bne.n	80044c6 <xPortStartScheduler+0x46>
	__asm volatile
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	60fb      	str	r3, [r7, #12]
}
 80044c2:	bf00      	nop
 80044c4:	e7fe      	b.n	80044c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044c6:	4b39      	ldr	r3, [pc, #228]	; (80045ac <xPortStartScheduler+0x12c>)
 80044c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	22ff      	movs	r2, #255	; 0xff
 80044d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	4b31      	ldr	r3, [pc, #196]	; (80045b0 <xPortStartScheduler+0x130>)
 80044ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80044ee:	4b31      	ldr	r3, [pc, #196]	; (80045b4 <xPortStartScheduler+0x134>)
 80044f0:	2207      	movs	r2, #7
 80044f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044f4:	e009      	b.n	800450a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80044f6:	4b2f      	ldr	r3, [pc, #188]	; (80045b4 <xPortStartScheduler+0x134>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	4a2d      	ldr	r2, [pc, #180]	; (80045b4 <xPortStartScheduler+0x134>)
 80044fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004500:	78fb      	ldrb	r3, [r7, #3]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	b2db      	uxtb	r3, r3
 8004508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800450a:	78fb      	ldrb	r3, [r7, #3]
 800450c:	b2db      	uxtb	r3, r3
 800450e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004512:	2b80      	cmp	r3, #128	; 0x80
 8004514:	d0ef      	beq.n	80044f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004516:	4b27      	ldr	r3, [pc, #156]	; (80045b4 <xPortStartScheduler+0x134>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f1c3 0307 	rsb	r3, r3, #7
 800451e:	2b04      	cmp	r3, #4
 8004520:	d00a      	beq.n	8004538 <xPortStartScheduler+0xb8>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	60bb      	str	r3, [r7, #8]
}
 8004534:	bf00      	nop
 8004536:	e7fe      	b.n	8004536 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004538:	4b1e      	ldr	r3, [pc, #120]	; (80045b4 <xPortStartScheduler+0x134>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	021b      	lsls	r3, r3, #8
 800453e:	4a1d      	ldr	r2, [pc, #116]	; (80045b4 <xPortStartScheduler+0x134>)
 8004540:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004542:	4b1c      	ldr	r3, [pc, #112]	; (80045b4 <xPortStartScheduler+0x134>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800454a:	4a1a      	ldr	r2, [pc, #104]	; (80045b4 <xPortStartScheduler+0x134>)
 800454c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004556:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <xPortStartScheduler+0x138>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a17      	ldr	r2, [pc, #92]	; (80045b8 <xPortStartScheduler+0x138>)
 800455c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004560:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004562:	4b15      	ldr	r3, [pc, #84]	; (80045b8 <xPortStartScheduler+0x138>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a14      	ldr	r2, [pc, #80]	; (80045b8 <xPortStartScheduler+0x138>)
 8004568:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800456c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800456e:	f000 f8dd 	bl	800472c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004572:	4b12      	ldr	r3, [pc, #72]	; (80045bc <xPortStartScheduler+0x13c>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004578:	f000 f8fc 	bl	8004774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800457c:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <xPortStartScheduler+0x140>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a0f      	ldr	r2, [pc, #60]	; (80045c0 <xPortStartScheduler+0x140>)
 8004582:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004586:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004588:	f7ff ff66 	bl	8004458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800458c:	f7fe ffae 	bl	80034ec <vTaskSwitchContext>
	prvTaskExitError();
 8004590:	f7ff ff1e 	bl	80043d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3718      	adds	r7, #24
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	e000ed00 	.word	0xe000ed00
 80045a4:	410fc271 	.word	0x410fc271
 80045a8:	410fc270 	.word	0x410fc270
 80045ac:	e000e400 	.word	0xe000e400
 80045b0:	200009a8 	.word	0x200009a8
 80045b4:	200009ac 	.word	0x200009ac
 80045b8:	e000ed20 	.word	0xe000ed20
 80045bc:	2000000c 	.word	0x2000000c
 80045c0:	e000ef34 	.word	0xe000ef34

080045c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
	__asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	607b      	str	r3, [r7, #4]
}
 80045dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80045de:	4b0f      	ldr	r3, [pc, #60]	; (800461c <vPortEnterCritical+0x58>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3301      	adds	r3, #1
 80045e4:	4a0d      	ldr	r2, [pc, #52]	; (800461c <vPortEnterCritical+0x58>)
 80045e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80045e8:	4b0c      	ldr	r3, [pc, #48]	; (800461c <vPortEnterCritical+0x58>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d10f      	bne.n	8004610 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <vPortEnterCritical+0x5c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <vPortEnterCritical+0x4c>
	__asm volatile
 80045fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	603b      	str	r3, [r7, #0]
}
 800460c:	bf00      	nop
 800460e:	e7fe      	b.n	800460e <vPortEnterCritical+0x4a>
	}
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	2000000c 	.word	0x2000000c
 8004620:	e000ed04 	.word	0xe000ed04

08004624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800462a:	4b12      	ldr	r3, [pc, #72]	; (8004674 <vPortExitCritical+0x50>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <vPortExitCritical+0x24>
	__asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	607b      	str	r3, [r7, #4]
}
 8004644:	bf00      	nop
 8004646:	e7fe      	b.n	8004646 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004648:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <vPortExitCritical+0x50>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3b01      	subs	r3, #1
 800464e:	4a09      	ldr	r2, [pc, #36]	; (8004674 <vPortExitCritical+0x50>)
 8004650:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004652:	4b08      	ldr	r3, [pc, #32]	; (8004674 <vPortExitCritical+0x50>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d105      	bne.n	8004666 <vPortExitCritical+0x42>
 800465a:	2300      	movs	r3, #0
 800465c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	f383 8811 	msr	BASEPRI, r3
}
 8004664:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	2000000c 	.word	0x2000000c
	...

08004680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004680:	f3ef 8009 	mrs	r0, PSP
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	4b15      	ldr	r3, [pc, #84]	; (80046e0 <pxCurrentTCBConst>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	f01e 0f10 	tst.w	lr, #16
 8004690:	bf08      	it	eq
 8004692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469a:	6010      	str	r0, [r2, #0]
 800469c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80046a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80046a4:	f380 8811 	msr	BASEPRI, r0
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f7fe ff1c 	bl	80034ec <vTaskSwitchContext>
 80046b4:	f04f 0000 	mov.w	r0, #0
 80046b8:	f380 8811 	msr	BASEPRI, r0
 80046bc:	bc09      	pop	{r0, r3}
 80046be:	6819      	ldr	r1, [r3, #0]
 80046c0:	6808      	ldr	r0, [r1, #0]
 80046c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c6:	f01e 0f10 	tst.w	lr, #16
 80046ca:	bf08      	it	eq
 80046cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80046d0:	f380 8809 	msr	PSP, r0
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	f3af 8000 	nop.w

080046e0 <pxCurrentTCBConst>:
 80046e0:	20000780 	.word	0x20000780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop

080046e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	607b      	str	r3, [r7, #4]
}
 8004700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004702:	f7fe fe3b 	bl	800337c <xTaskIncrementTick>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800470c:	4b06      	ldr	r3, [pc, #24]	; (8004728 <xPortSysTickHandler+0x40>)
 800470e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	2300      	movs	r3, #0
 8004716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	f383 8811 	msr	BASEPRI, r3
}
 800471e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004720:	bf00      	nop
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	e000ed04 	.word	0xe000ed04

0800472c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <vPortSetupTimerInterrupt+0x34>)
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004736:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <vPortSetupTimerInterrupt+0x38>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800473c:	4b0a      	ldr	r3, [pc, #40]	; (8004768 <vPortSetupTimerInterrupt+0x3c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a0a      	ldr	r2, [pc, #40]	; (800476c <vPortSetupTimerInterrupt+0x40>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	099b      	lsrs	r3, r3, #6
 8004748:	4a09      	ldr	r2, [pc, #36]	; (8004770 <vPortSetupTimerInterrupt+0x44>)
 800474a:	3b01      	subs	r3, #1
 800474c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800474e:	4b04      	ldr	r3, [pc, #16]	; (8004760 <vPortSetupTimerInterrupt+0x34>)
 8004750:	2207      	movs	r2, #7
 8004752:	601a      	str	r2, [r3, #0]
}
 8004754:	bf00      	nop
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	e000e010 	.word	0xe000e010
 8004764:	e000e018 	.word	0xe000e018
 8004768:	20000000 	.word	0x20000000
 800476c:	10624dd3 	.word	0x10624dd3
 8004770:	e000e014 	.word	0xe000e014

08004774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004774:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004784 <vPortEnableVFP+0x10>
 8004778:	6801      	ldr	r1, [r0, #0]
 800477a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800477e:	6001      	str	r1, [r0, #0]
 8004780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004782:	bf00      	nop
 8004784:	e000ed88 	.word	0xe000ed88

08004788 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800478e:	f3ef 8305 	mrs	r3, IPSR
 8004792:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b0f      	cmp	r3, #15
 8004798:	d914      	bls.n	80047c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800479a:	4a17      	ldr	r2, [pc, #92]	; (80047f8 <vPortValidateInterruptPriority+0x70>)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4413      	add	r3, r2
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80047a4:	4b15      	ldr	r3, [pc, #84]	; (80047fc <vPortValidateInterruptPriority+0x74>)
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	7afa      	ldrb	r2, [r7, #11]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d20a      	bcs.n	80047c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	607b      	str	r3, [r7, #4]
}
 80047c0:	bf00      	nop
 80047c2:	e7fe      	b.n	80047c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80047c4:	4b0e      	ldr	r3, [pc, #56]	; (8004800 <vPortValidateInterruptPriority+0x78>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80047cc:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <vPortValidateInterruptPriority+0x7c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d90a      	bls.n	80047ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	603b      	str	r3, [r7, #0]
}
 80047e6:	bf00      	nop
 80047e8:	e7fe      	b.n	80047e8 <vPortValidateInterruptPriority+0x60>
	}
 80047ea:	bf00      	nop
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	e000e3f0 	.word	0xe000e3f0
 80047fc:	200009a8 	.word	0x200009a8
 8004800:	e000ed0c 	.word	0xe000ed0c
 8004804:	200009ac 	.word	0x200009ac

08004808 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b08a      	sub	sp, #40	; 0x28
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004810:	2300      	movs	r3, #0
 8004812:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004814:	f7fe fcf8 	bl	8003208 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004818:	4b5b      	ldr	r3, [pc, #364]	; (8004988 <pvPortMalloc+0x180>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004820:	f000 f920 	bl	8004a64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004824:	4b59      	ldr	r3, [pc, #356]	; (800498c <pvPortMalloc+0x184>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4013      	ands	r3, r2
 800482c:	2b00      	cmp	r3, #0
 800482e:	f040 8093 	bne.w	8004958 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d01d      	beq.n	8004874 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004838:	2208      	movs	r2, #8
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4413      	add	r3, r2
 800483e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	2b00      	cmp	r3, #0
 8004848:	d014      	beq.n	8004874 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f023 0307 	bic.w	r3, r3, #7
 8004850:	3308      	adds	r3, #8
 8004852:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <pvPortMalloc+0x6c>
	__asm volatile
 800485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	617b      	str	r3, [r7, #20]
}
 8004870:	bf00      	nop
 8004872:	e7fe      	b.n	8004872 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d06e      	beq.n	8004958 <pvPortMalloc+0x150>
 800487a:	4b45      	ldr	r3, [pc, #276]	; (8004990 <pvPortMalloc+0x188>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	d869      	bhi.n	8004958 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004884:	4b43      	ldr	r3, [pc, #268]	; (8004994 <pvPortMalloc+0x18c>)
 8004886:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004888:	4b42      	ldr	r3, [pc, #264]	; (8004994 <pvPortMalloc+0x18c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800488e:	e004      	b.n	800489a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d903      	bls.n	80048ac <pvPortMalloc+0xa4>
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1f1      	bne.n	8004890 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80048ac:	4b36      	ldr	r3, [pc, #216]	; (8004988 <pvPortMalloc+0x180>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d050      	beq.n	8004958 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2208      	movs	r2, #8
 80048bc:	4413      	add	r3, r2
 80048be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	1ad2      	subs	r2, r2, r3
 80048d0:	2308      	movs	r3, #8
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d91f      	bls.n	8004918 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80048d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4413      	add	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <pvPortMalloc+0xf8>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	613b      	str	r3, [r7, #16]
}
 80048fc:	bf00      	nop
 80048fe:	e7fe      	b.n	80048fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	1ad2      	subs	r2, r2, r3
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004912:	69b8      	ldr	r0, [r7, #24]
 8004914:	f000 f908 	bl	8004b28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004918:	4b1d      	ldr	r3, [pc, #116]	; (8004990 <pvPortMalloc+0x188>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	4a1b      	ldr	r2, [pc, #108]	; (8004990 <pvPortMalloc+0x188>)
 8004924:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004926:	4b1a      	ldr	r3, [pc, #104]	; (8004990 <pvPortMalloc+0x188>)
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <pvPortMalloc+0x190>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d203      	bcs.n	800493a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004932:	4b17      	ldr	r3, [pc, #92]	; (8004990 <pvPortMalloc+0x188>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a18      	ldr	r2, [pc, #96]	; (8004998 <pvPortMalloc+0x190>)
 8004938:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	4b13      	ldr	r3, [pc, #76]	; (800498c <pvPortMalloc+0x184>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	431a      	orrs	r2, r3
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800494e:	4b13      	ldr	r3, [pc, #76]	; (800499c <pvPortMalloc+0x194>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3301      	adds	r3, #1
 8004954:	4a11      	ldr	r2, [pc, #68]	; (800499c <pvPortMalloc+0x194>)
 8004956:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004958:	f7fe fc64 	bl	8003224 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <pvPortMalloc+0x174>
	__asm volatile
 8004966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496a:	f383 8811 	msr	BASEPRI, r3
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f3bf 8f4f 	dsb	sy
 8004976:	60fb      	str	r3, [r7, #12]
}
 8004978:	bf00      	nop
 800497a:	e7fe      	b.n	800497a <pvPortMalloc+0x172>
	return pvReturn;
 800497c:	69fb      	ldr	r3, [r7, #28]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3728      	adds	r7, #40	; 0x28
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	200045b8 	.word	0x200045b8
 800498c:	200045cc 	.word	0x200045cc
 8004990:	200045bc 	.word	0x200045bc
 8004994:	200045b0 	.word	0x200045b0
 8004998:	200045c0 	.word	0x200045c0
 800499c:	200045c4 	.word	0x200045c4

080049a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d04d      	beq.n	8004a4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80049b2:	2308      	movs	r3, #8
 80049b4:	425b      	negs	r3, r3
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4413      	add	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	4b24      	ldr	r3, [pc, #144]	; (8004a58 <vPortFree+0xb8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10a      	bne.n	80049e4 <vPortFree+0x44>
	__asm volatile
 80049ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	60fb      	str	r3, [r7, #12]
}
 80049e0:	bf00      	nop
 80049e2:	e7fe      	b.n	80049e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <vPortFree+0x62>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	60bb      	str	r3, [r7, #8]
}
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	4b14      	ldr	r3, [pc, #80]	; (8004a58 <vPortFree+0xb8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d01e      	beq.n	8004a4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d11a      	bne.n	8004a4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	; (8004a58 <vPortFree+0xb8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	43db      	mvns	r3, r3
 8004a22:	401a      	ands	r2, r3
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004a28:	f7fe fbee 	bl	8003208 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <vPortFree+0xbc>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4413      	add	r3, r2
 8004a36:	4a09      	ldr	r2, [pc, #36]	; (8004a5c <vPortFree+0xbc>)
 8004a38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a3a:	6938      	ldr	r0, [r7, #16]
 8004a3c:	f000 f874 	bl	8004b28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004a40:	4b07      	ldr	r3, [pc, #28]	; (8004a60 <vPortFree+0xc0>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3301      	adds	r3, #1
 8004a46:	4a06      	ldr	r2, [pc, #24]	; (8004a60 <vPortFree+0xc0>)
 8004a48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004a4a:	f7fe fbeb 	bl	8003224 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004a4e:	bf00      	nop
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	200045cc 	.word	0x200045cc
 8004a5c:	200045bc 	.word	0x200045bc
 8004a60:	200045c8 	.word	0x200045c8

08004a64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004a6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004a6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004a70:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <prvHeapInit+0xac>)
 8004a72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00c      	beq.n	8004a98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3307      	adds	r3, #7
 8004a82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0307 	bic.w	r3, r3, #7
 8004a8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	4a1f      	ldr	r2, [pc, #124]	; (8004b10 <prvHeapInit+0xac>)
 8004a94:	4413      	add	r3, r2
 8004a96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a9c:	4a1d      	ldr	r2, [pc, #116]	; (8004b14 <prvHeapInit+0xb0>)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004aa2:	4b1c      	ldr	r3, [pc, #112]	; (8004b14 <prvHeapInit+0xb0>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	4413      	add	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0307 	bic.w	r3, r3, #7
 8004abe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4a15      	ldr	r2, [pc, #84]	; (8004b18 <prvHeapInit+0xb4>)
 8004ac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ac6:	4b14      	ldr	r3, [pc, #80]	; (8004b18 <prvHeapInit+0xb4>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2200      	movs	r2, #0
 8004acc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ace:	4b12      	ldr	r3, [pc, #72]	; (8004b18 <prvHeapInit+0xb4>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	1ad2      	subs	r2, r2, r3
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <prvHeapInit+0xb4>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4a0a      	ldr	r2, [pc, #40]	; (8004b1c <prvHeapInit+0xb8>)
 8004af2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <prvHeapInit+0xbc>)
 8004afa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004afc:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <prvHeapInit+0xc0>)
 8004afe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b02:	601a      	str	r2, [r3, #0]
}
 8004b04:	bf00      	nop
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	200009b0 	.word	0x200009b0
 8004b14:	200045b0 	.word	0x200045b0
 8004b18:	200045b8 	.word	0x200045b8
 8004b1c:	200045c0 	.word	0x200045c0
 8004b20:	200045bc 	.word	0x200045bc
 8004b24:	200045cc 	.word	0x200045cc

08004b28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004b30:	4b28      	ldr	r3, [pc, #160]	; (8004bd4 <prvInsertBlockIntoFreeList+0xac>)
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	e002      	b.n	8004b3c <prvInsertBlockIntoFreeList+0x14>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d8f7      	bhi.n	8004b36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	4413      	add	r3, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d108      	bne.n	8004b6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	441a      	add	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	441a      	add	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d118      	bne.n	8004bb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d00d      	beq.n	8004ba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	441a      	add	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e008      	b.n	8004bb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ba6:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	e003      	b.n	8004bb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d002      	beq.n	8004bc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bc6:	bf00      	nop
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	200045b0 	.word	0x200045b0
 8004bd8:	200045b8 	.word	0x200045b8

08004bdc <memset>:
 8004bdc:	4402      	add	r2, r0
 8004bde:	4603      	mov	r3, r0
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d100      	bne.n	8004be6 <memset+0xa>
 8004be4:	4770      	bx	lr
 8004be6:	f803 1b01 	strb.w	r1, [r3], #1
 8004bea:	e7f9      	b.n	8004be0 <memset+0x4>

08004bec <__libc_init_array>:
 8004bec:	b570      	push	{r4, r5, r6, lr}
 8004bee:	4d0d      	ldr	r5, [pc, #52]	; (8004c24 <__libc_init_array+0x38>)
 8004bf0:	4c0d      	ldr	r4, [pc, #52]	; (8004c28 <__libc_init_array+0x3c>)
 8004bf2:	1b64      	subs	r4, r4, r5
 8004bf4:	10a4      	asrs	r4, r4, #2
 8004bf6:	2600      	movs	r6, #0
 8004bf8:	42a6      	cmp	r6, r4
 8004bfa:	d109      	bne.n	8004c10 <__libc_init_array+0x24>
 8004bfc:	4d0b      	ldr	r5, [pc, #44]	; (8004c2c <__libc_init_array+0x40>)
 8004bfe:	4c0c      	ldr	r4, [pc, #48]	; (8004c30 <__libc_init_array+0x44>)
 8004c00:	f000 f826 	bl	8004c50 <_init>
 8004c04:	1b64      	subs	r4, r4, r5
 8004c06:	10a4      	asrs	r4, r4, #2
 8004c08:	2600      	movs	r6, #0
 8004c0a:	42a6      	cmp	r6, r4
 8004c0c:	d105      	bne.n	8004c1a <__libc_init_array+0x2e>
 8004c0e:	bd70      	pop	{r4, r5, r6, pc}
 8004c10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c14:	4798      	blx	r3
 8004c16:	3601      	adds	r6, #1
 8004c18:	e7ee      	b.n	8004bf8 <__libc_init_array+0xc>
 8004c1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c1e:	4798      	blx	r3
 8004c20:	3601      	adds	r6, #1
 8004c22:	e7f2      	b.n	8004c0a <__libc_init_array+0x1e>
 8004c24:	08004d44 	.word	0x08004d44
 8004c28:	08004d44 	.word	0x08004d44
 8004c2c:	08004d44 	.word	0x08004d44
 8004c30:	08004d48 	.word	0x08004d48

08004c34 <memcpy>:
 8004c34:	440a      	add	r2, r1
 8004c36:	4291      	cmp	r1, r2
 8004c38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004c3c:	d100      	bne.n	8004c40 <memcpy+0xc>
 8004c3e:	4770      	bx	lr
 8004c40:	b510      	push	{r4, lr}
 8004c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c4a:	4291      	cmp	r1, r2
 8004c4c:	d1f9      	bne.n	8004c42 <memcpy+0xe>
 8004c4e:	bd10      	pop	{r4, pc}

08004c50 <_init>:
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	bf00      	nop
 8004c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c56:	bc08      	pop	{r3}
 8004c58:	469e      	mov	lr, r3
 8004c5a:	4770      	bx	lr

08004c5c <_fini>:
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	bf00      	nop
 8004c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c62:	bc08      	pop	{r3}
 8004c64:	469e      	mov	lr, r3
 8004c66:	4770      	bx	lr
