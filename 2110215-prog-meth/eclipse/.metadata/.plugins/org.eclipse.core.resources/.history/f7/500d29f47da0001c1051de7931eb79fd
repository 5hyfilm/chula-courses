package test.student;


import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import card.base.SpellCard;
import card.type.DamageSpellCard;
import card.type.NormalUnitCard;

public class TestDamageSpellCard {
	NormalUnitCard unit;

	SpellCard spell0 = new DamageSpellCard("DSpell0" , "-1" , 1,true,1);
	DamageSpellCard spell1 = new DamageSpellCard("DSpell1" , "-1" , 1,true,1);
	DamageSpellCard spell2 = new DamageSpellCard("DSpell2" , "-2" , 1,true,2);
	DamageSpellCard spell3 = new DamageSpellCard("DSpell3" , "-3" , 2,false,3);
	DamageSpellCard spellN = new DamageSpellCard("DSpellN" , "XX" , -2,false, -1);
	
	@BeforeEach
	public void setUp() {
		unit = new NormalUnitCard("Tanky Unit" , "I'm a tanky unit" , 0 , 2 , 10);
	}
	
	//Fill Code Here!!!
	// 1.testConstructor
	// 2. testSetDamage
	// 3.testCastSpell
	
	@Test
	void testConstructor() {

		assertEquals("DSpell0", spell0.getName());
		assertEquals("-1", spell0.getFlavorText());
		assertEquals(1, spell0.getBloodCost());
		assertEquals(true, spell0.isBurstSpeed());
		assertEquals(1, ((DamageSpellCard)spell0).getDamage());
		
		assertEquals("DSpell1", spell1.getName());
		assertEquals("-1", spell1.getFlavorText());
		assertEquals(1, spell1.getBloodCost());
		assertEquals(true, spell1.isBurstSpeed());
		assertEquals(1, spell1.getDamage());
		
		assertEquals("DSpell2", spell2.getName());
		assertEquals("-2", spell2.getFlavorText());
		assertEquals(1, spell2.getBloodCost());
		assertEquals(true, spell2.isBurstSpeed());
		assertEquals(2, spell2.getDamage());
		
		assertEquals("DSpell3", spell3.getName());
		assertEquals("-3", spell3.getFlavorText());
		assertEquals(2, spell3.getBloodCost());
		assertEquals(false, spell3.isBurstSpeed());
		assertEquals(3, spell3.getDamage());
		
		assertEquals("DSpellN", spellN.getName());
		assertEquals("XX", spellN.getFlavorText());
		assertEquals(0, spellN.getBloodCost());
		assertEquals(false, spellN.isBurstSpeed());
		assertEquals(1, spellN.getDamage());

	}
	
	@Test
	void testSetDamage() {
		((DamageSpellCard)spell0).setDamage(5);
		assertEquals(5, ((DamageSpellCard)spell0).getDamage());
		spell1.setDamage(100);
		assertEquals(100, spell1.getDamage());
		spell2.setDamage(-100);
		assertEquals(1, spell2.getDamage());
		spell3.setDamage(0);
		assertEquals(1, spell3.getDamage());
		spellN.setDamage(1);
		assertEquals(1, spellN.getDamage());
	}
	
	@Test
	void testCastSpell() {
		((DamageSpellCard)spell0).castSpell(unit);
		assertEquals(9, unit.getHealth());
		spell1.castSpell(unit);
		assertEquals(8, unit.getHealth());
		spell2.castSpell(unit);
		assertEquals(6, unit.getHealth());
		spell3.castSpell(unit);
		assertEquals(3, unit.getHealth());
		spellN.castSpell(unit);
		assertEquals(2, unit.getHealth());
		spell3.castSpell(unit);
		assertEquals(0, unit.getHealth());
	}

}
